
bin/Debug/home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000208  00800100  00006f48  00006fdc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006f48  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003ad  00800308  00800308  000071e4  2**0
                  ALLOC
  3 .comment      00000012  00000000  00000000  000071e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000071f8  2**2
                  CONTENTS, READONLY, OCTETS
  5 .debug_aranges 00000380  00000000  00000000  00007238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   0000badf  00000000  00000000  000075b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 00002791  00000000  00000000  00013097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_line   0000b726  00000000  00000000  00015828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_frame  00001368  00000000  00000000  00020f50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_str    0000178f  00000000  00000000  000222b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line_str 000002ee  00000000  00000000  00023a47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loclists 00002931  00000000  00000000  00023d35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000313  00000000  00000000  00026666  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 cd 04 	jmp	0x99a	; 0x99a <__ctors_end>
       4:	0c 94 ea 04 	jmp	0x9d4	; 0x9d4 <__bad_interrupt>
       8:	0c 94 ea 04 	jmp	0x9d4	; 0x9d4 <__bad_interrupt>
       c:	0c 94 ea 04 	jmp	0x9d4	; 0x9d4 <__bad_interrupt>
      10:	0c 94 ea 04 	jmp	0x9d4	; 0x9d4 <__bad_interrupt>
      14:	0c 94 ea 04 	jmp	0x9d4	; 0x9d4 <__bad_interrupt>
      18:	0c 94 ea 04 	jmp	0x9d4	; 0x9d4 <__bad_interrupt>
      1c:	0c 94 28 27 	jmp	0x4e50	; 0x4e50 <__vector_7>
      20:	0c 94 ea 04 	jmp	0x9d4	; 0x9d4 <__bad_interrupt>
      24:	0c 94 ea 04 	jmp	0x9d4	; 0x9d4 <__bad_interrupt>
      28:	0c 94 ea 04 	jmp	0x9d4	; 0x9d4 <__bad_interrupt>
      2c:	0c 94 ef 2c 	jmp	0x59de	; 0x59de <__vector_11>
      30:	0c 94 ea 04 	jmp	0x9d4	; 0x9d4 <__bad_interrupt>
      34:	0c 94 ea 04 	jmp	0x9d4	; 0x9d4 <__bad_interrupt>
      38:	0c 94 ce 2b 	jmp	0x579c	; 0x579c <__vector_14>
      3c:	0c 94 ea 04 	jmp	0x9d4	; 0x9d4 <__bad_interrupt>
      40:	0c 94 ea 04 	jmp	0x9d4	; 0x9d4 <__bad_interrupt>
      44:	0c 94 ea 04 	jmp	0x9d4	; 0x9d4 <__bad_interrupt>
      48:	0c 94 29 2e 	jmp	0x5c52	; 0x5c52 <__vector_18>
      4c:	0c 94 ea 04 	jmp	0x9d4	; 0x9d4 <__bad_interrupt>
      50:	0c 94 ea 04 	jmp	0x9d4	; 0x9d4 <__bad_interrupt>
      54:	0c 94 ea 04 	jmp	0x9d4	; 0x9d4 <__bad_interrupt>
      58:	0c 94 ea 04 	jmp	0x9d4	; 0x9d4 <__bad_interrupt>
      5c:	0c 94 ea 04 	jmp	0x9d4	; 0x9d4 <__bad_interrupt>
      60:	0c 94 ea 04 	jmp	0x9d4	; 0x9d4 <__bad_interrupt>
      64:	0c 94 ea 04 	jmp	0x9d4	; 0x9d4 <__bad_interrupt>

00000068 <__c.3>:
      68:	62 61 74 74 65 72 79 3d 25 64 25 25 3b 00           battery=%d%%;.

00000076 <__c.4>:
      76:	65 5f 70 6f 77 65 72 3d 25 75 3b 00                 e_power=%u;.

00000082 <__c.5>:
      82:	73 69 67 6e 61 6c 5f 67 73 6d 3d 25 64 25 25 3b     signal_gsm=%d%%;
	...

00000093 <__c.6>:
      93:	67 3d 25 68 75 3b 00                                g=%hu;.

0000009a <__c.7>:
      9a:	67 5f 72 3d 25 75 3b 00                             g_r=%u;.

000000a2 <__c.8>:
      a2:	6d 63 75 3d 25 75 3b 00                             mcu=%u;.

000000aa <__c.9>:
      aa:	74 65 6d 70 3d 25 64 43 3b 00                       temp=%dC;.

000000b4 <__c.10>:
      b4:	6c 5f 67 3d 25 64 3b 00                             l_g=%d;.

000000bc <__c.11>:
      bc:	67 75 61 72 64 3d 25 64 3b 00                       guard=%d;.

000000c6 <__c.12>:
      c6:	74 3d 25 75 64 25 75 68 25 75 6d 25 75 73 3b 00     t=%ud%uh%um%us;.

000000d6 <__c.13>:
      d6:	64 65 70 6f 73 69 74 3d 25 73 3b 00                 deposit=%s;.

000000e2 <__c.0>:
      e2:	31 2d 57 69 72 65 20 64 65 76 69 63 65 20 64 65     1-Wire device de
      f2:	74 65 63 74 65 64 2e 00                             tected..

000000fa <__c.1>:
      fa:	45 72 72 6f 72 21 21 21 20 43 61 6e 20 6e 6f 74     Error!!! Can not
     10a:	20 66 69 6e 64 20 31 2d 57 69 72 65 20 64 65 76      find 1-Wire dev
     11a:	69 63 65 21 00                                      ice!.

0000011f <__c.0>:
     11f:	2b 33 38 30 37 31 33 33 31 38 30 39 30 00           +380713318090.

0000012d <__c.1>:
     12d:	65 65 70 72 6f 6d 5f 66 69 72 73 74 5f 73 65 74     eeprom_first_set
	...

0000013e <__c.1>:
     13e:	2b 43 55 53 44 3a 30 00                             +CUSD:0.

00000146 <__c.2>:
     146:	23 22 2c 31 35 0d 0a 00                             #",15...

0000014e <__c.3>:
     14e:	41 54 2b 43 55 53 44 3d 31 2c 22 00                 AT+CUSD=1,".

0000015a <__c.4>:
     15a:	65 72 72 00                                         err.

0000015e <__c.5>:
     15e:	44 65 70 6f 73 69 74 20 3c 20 31 30 20 52 55 42     Deposit < 10 RUB
	...

0000016f <__c.6>:
     16f:	65 72 72 00                                         err.

00000173 <__c.7>:
     173:	65 72 72 00                                         err.

00000177 <__c.8>:
     177:	2b 43 55 53 44 3a 00                                +CUSD:.

0000017e <__c.9>:
     17e:	75 73 73 64 20 73 65 6e 64 20 6f 6b 00              ussd send ok.

0000018b <__c.10>:
     18b:	41 54 2b 43 55 53 44 3d 31 2c 22 2a 31 30 31 23     AT+CUSD=1,"*101#
     19b:	22 0d 0a 00                                         "...

0000019f <__c.11>:
     19f:	41 54 2b 44 44 45 54 3d 31 2c 35 30 2c 30 2c 31     AT+DDET=1,50,0,1
     1af:	0d 0a 00                                            ...

000001b2 <__c.12>:
     1b2:	41 54 2b 43 50 4d 53 3d 22 53 4d 22 2c 22 53 4d     AT+CPMS="SM","SM
     1c2:	22 2c 22 53 4d 22 0d 0a 00                          ","SM"...

000001cb <__c.13>:
     1cb:	41 54 2b 43 4c 49 50 3d 31 0d 0a 00                 AT+CLIP=1...

000001d7 <__c.14>:
     1d7:	41 54 2b 43 4e 4d 49 3d 32 2c 31 2c 30 2c 31 2c     AT+CNMI=2,1,0,1,
     1e7:	30 0d 0a 00                                         0...

000001eb <__c.15>:
     1eb:	41 54 2b 43 4d 47 46 3d 31 0d 0a 00                 AT+CMGF=1...

000001f7 <__c.16>:
     1f7:	41 54 45 30 0d 0a 00                                ATE0...

000001fe <__c.17>:
     1fe:	41 54 0d 0a 00                                      AT...

00000203 <__c.19>:
     203:	41 54 41 0d 0a 00                                   ATA...

00000209 <__c.20>:
     209:	41 54 2b 43 4d 47 44 41 3d 22 44 45 4c 20 41 4c     AT+CMGDA="DEL AL
     219:	4c 22 0d 0a 00                                      L"...

0000021e <__c.21>:
     21e:	41 54 2b 43 4d 47 44 3d 25 64 0d 0a 00              AT+CMGD=%d...

0000022b <__c.22>:
     22b:	41 54 2b 43 4d 47 4c 3d 22 52 45 43 20 55 4e 52     AT+CMGL="REC UNR
     23b:	45 41 44 22 0d 0a 00                                EAD"...

00000242 <__c.26>:
     242:	2b 44 54 4d 46 3a 00                                +DTMF:.

00000249 <__c.27>:
     249:	2b 43 4c 49 50 3a 00                                +CLIP:.

00000250 <__c.28>:
     250:	2b 43 4d 54 49 3a 00                                +CMTI:.

00000257 <__c.29>:
     257:	41 54 2b 43 4d 47 53 3d 22 25 73 22 0d 0a 00        AT+CMGS="%s"...

00000266 <__c.30>:
     266:	41 54 2b 43 4d 47 57 3d 22 25 73 22 0d 0a 00        AT+CMGW="%s"...

00000275 <__c.31>:
     275:	45 52 52 4f 52 00                                   ERROR.

0000027b <__c.32>:
     27b:	41 54 2b 43 4d 47 53 3d 22 25 73 22 0d 0a 00        AT+CMGS="%s"...

0000028a <__c.34>:
     28a:	41 54 2b 43 4d 47 44 3d 25 64 0d 0a 00              AT+CMGD=%d...

00000297 <__c.35>:
     297:	41 54 2b 43 4d 53 53 3d 25 64 0d 0a 00              AT+CMSS=%d...

000002a4 <__c.36>:
     2a4:	41 54 2b 43 4d 47 4c 3d 22 53 54 4f 20 55 4e 53     AT+CMGL="STO UNS
     2b4:	45 4e 54 22 0d 0a 00                                ENT"...

000002bb <__c.37>:
     2bb:	2b 43 52 45 47 3a 00                                +CREG:.

000002c2 <__c.38>:
     2c2:	41 54 2b 43 52 45 47 3f 0d 0a 00                    AT+CREG?...

000002cd <__c.39>:
     2cd:	2b 43 42 43 3a 00                                   +CBC:.

000002d3 <__c.40>:
     2d3:	41 54 2b 43 42 43 0d 0a 00                          AT+CBC...

000002dc <__c.41>:
     2dc:	41 54 2b 43 53 51 0d 00                             AT+CSQ..

000002e4 <__c.44>:
     2e4:	41 54 48 0d 0a 00                                   ATH...

000002ea <__c.46>:
     2ea:	2b 43 4c 43 43 3a 00                                +CLCC:.

000002f1 <__c.47>:
     2f1:	41 54 2b 43 4c 43 43 0d 0a 00                       AT+CLCC...

000002fb <__c.48>:
     2fb:	77 61 69 74 20 73 74 72 20 74 69 6d 65 20 65 6e     wait str time en
     30b:	64 00                                               d.

0000030d <__c.49>:
     30d:	0d 0a 00                                            ...

00000310 <__c.50>:
     310:	2e 61 6d 72 22 2c 30 2c 31 30 30 2c 00              .amr",0,100,.

0000031d <__c.51>:
     31d:	41 54 2b 43 52 45 43 3d 34 2c 22 43 3a 5c 55 73     AT+CREC=4,"C:\Us
     32d:	65 72 5c 00                                         er\.

00000331 <__c.52>:
     331:	41 54 2b 43 52 45 43 3d 35 0d 0a 00                 AT+CREC=5...

0000033d <__c.53>:
     33d:	45 52 52 4f 52 00                                   ERROR.

00000343 <__c.54>:
     343:	63 6d 64 20 74 69 6d 65 20 65 6e 64 00              cmd time end.

00000350 <__c.55>:
     350:	41 6c 61 72 6d 21 20 43 4f 55 52 54 59 41 52 44     Alarm! COURTYARD
     360:	21 00                                               !.

00000362 <__c.56>:
     362:	41 6c 61 72 6d 21 20 49 6e 74 65 72 6e 61 6c 20     Alarm! Internal 
     372:	54 45 4d 50 45 52 41 54 55 52 45 20 3e 20 36 35     TEMPERATURE > 65
     382:	43 20 21 21 21 00                                   C !!!.

00000388 <__c.57>:
     388:	41 6c 61 72 6d 21 20 54 45 4d 50 45 52 41 54 55     Alarm! TEMPERATU
     398:	52 45 21 21 21 00                                   RE!!!.

0000039e <__c.58>:
     39e:	41 6c 61 72 6d 21 20 53 4d 4f 4b 45 21 21 21 00     Alarm! SMOKE!!!.

000003ae <__c.59>:
     3ae:	41 4c 41 52 4d 21 20 4d 6f 74 69 6f 6e 21 20 43     ALARM! Motion! C
     3be:	6f 6f 6b 72 6f 6f 6d 00                             ookroom.

000003c6 <__c.60>:
     3c6:	41 4c 41 52 4d 21 20 49 6e 76 61 73 69 6f 6e 21     ALARM! Invasion!
     3d6:	20 47 61 72 64 65 6e 00                              Garden.

000003de <__c.61>:
     3de:	41 4c 41 52 4d 21 20 4d 6f 74 69 6f 6e 21 20 46     ALARM! Motion! F
     3ee:	72 6f 6e 74 00                                      ront.

000003f3 <__c.62>:
     3f3:	41 54 44 25 73 3b 0d 0a 00                          ATD%s;...

000003fc <__c.0>:
     3fc:	65 6e 64 20 6d 61 69 6e 00                          end main.

00000405 <__c.1>:
     405:	73 65 74 75 70 5f 6f 6b 0d 0a 00                    setup_ok...

00000410 <__c.2>:
     410:	53 74 61 72 74 2e 2e 2e 0d 0a 00                    Start......

0000041b <__c.0>:
     41b:	6d 74 69 6d 65 5f 73 65 6e 73 5f 6d 73 3d 25 75     mtime_sens_ms=%u
     42b:	3b 00                                               ;.

0000042d <__c.1>:
     42d:	6d 74 69 6d 65 5f 73 65 6e 73 5f 6d 73 3b 00        mtime_sens_ms;.

0000043c <__c.2>:
     43c:	61 63 63 65 70 74 5f 73 6d 73 3d 25 64 3b 00        accept_sms=%d;.

0000044b <__c.3>:
     44b:	61 63 63 65 70 74 5f 73 6d 73 3b 00                 accept_sms;.

00000457 <__c.4>:
     457:	61 63 63 65 70 74 5f 63 61 6c 6c 73 3d 25 64 3b     accept_calls=%d;
	...

00000468 <__c.5>:
     468:	61 63 63 65 70 74 5f 63 61 6c 6c 73 3b 00           accept_calls;.

00000476 <__c.6>:
     476:	61 75 74 6f 67 75 61 72 64 3d 25 64 3b 00           autoguard=%d;.

00000484 <__c.7>:
     484:	61 75 74 6f 67 75 61 72 64 3b 00                    autoguard;.

0000048f <__c.8>:
     48f:	69 6e 74 65 72 76 61 6c 5f 61 66 74 65 72 5f 6d     interval_after_m
     49f:	6f 74 69 6f 6e 5f 68 3d 25 75 68 3b 00              otion_h=%uh;.

000004ac <__c.9>:
     4ac:	61 66 74 65 72 6d 6f 74 69 6f 6e 3b 00              aftermotion;.

000004b9 <__c.10>:
     4b9:	69 6e 74 65 72 76 61 6c 5f 61 66 74 65 72 5f 62     interval_after_b
     4c9:	75 74 74 6f 6e 5f 6d 3d 25 75 6d 3b 00              utton_m=%um;.

000004d6 <__c.11>:
     4d6:	62 74 6e 69 6e 74 65 72 76 61 6c 3b 00              btninterval;.

000004e3 <__c.12>:
     4e3:	3b 00                                               ;.

000004e5 <__c.13>:
     4e5:	25 73 2c 00                                         %s,.

000004e9 <__c.14>:
     4e9:	61 64 6d 69 6e 70 68 6f 6e 65 73 3d 00              adminphones=.

000004f6 <__c.15>:
     4f6:	61 64 6d 69 6e 70 68 6f 6e 65 73 3b 00              adminphones;.

00000503 <__c.16>:
     503:	6d 74 69 6d 65 5f 73 65 6e 73 5f 6d 73 3d 00        mtime_sens_ms=.

00000512 <__c.17>:
     512:	73 5f 73 65 6e 73 6f 72 3d 00                       s_sensor=.

0000051c <__c.18>:
     51c:	70 6f 77 65 72 5f 6f 6e 5f 72 65 70 6f 72 74 5f     power_on_report_
     52c:	6d 3d 00                                            m=.

0000052f <__c.19>:
     52f:	70 6f 77 65 72 5f 6f 66 66 5f 72 65 70 6f 72 74     power_off_report
     53f:	5f 6d 3d 00                                         _m=.

00000543 <__c.20>:
     543:	61 63 63 65 70 74 5f 73 6d 73 3d 00                 accept_sms=.

0000054f <__c.21>:
     54f:	61 63 63 65 70 74 5f 63 61 6c 6c 73 3d 00           accept_calls=.

0000055d <__c.22>:
     55d:	61 75 74 6f 67 75 61 72 64 3d 00                    autoguard=.

00000568 <__c.23>:
     568:	6c 6f 63 61 6c 5f 67 75 61 72 64 3d 00              local_guard=.

00000575 <__c.24>:
     575:	67 75 61 72 64 3d 00                                guard=.

0000057c <__c.25>:
     57c:	70 61 75 73 65 5f 61 6c 61 72 6d 5f 73 3d 00        pause_alarm_s=.

0000058b <__c.26>:
     58b:	61 66 74 65 72 6d 6f 74 69 6f 6e 3d 00              aftermotion=.

00000598 <__c.27>:
     598:	62 74 6e 69 6e 74 65 72 76 61 6c 3d 00              btninterval=.

000005a5 <__c.28>:
     5a5:	6c 69 67 68 74 3d 00                                light=.

000005ac <__c.29>:
     5ac:	41 63 63 65 73 73 20 64 65 6e 69 65 64 00           Access denied.

000005ba <__c.30>:
     5ba:	4f 6b 00                                            Ok.

000005bd <__c.31>:
     5bd:	61 64 6d 69 6e 70 68 6f 6e 65 73 3d 00              adminphones=.

000005ca <__c.32>:
     5ca:	41 63 63 65 73 73 20 64 65 6e 69 65 64 00           Access denied.

000005d8 <__c.33>:
     5d8:	72 65 70 6f 72 74 3b 00                             report;.

000005e0 <__c.34>:
     5e0:	41 63 63 65 73 73 20 64 65 6e 69 65 64 00           Access denied.

000005ee <__c.35>:
     5ee:	68 65 6c 70 73 65 74 3b 00                          helpset;.

000005f7 <__c.36>:
     5f7:	41 63 63 65 73 73 20 64 65 6e 69 65 64 00           Access denied.

00000605 <__c.37>:
     605:	68 65 6c 70 67 65 74 3b 00                          helpget;.

0000060e <__c.38>:
     60e:	41 63 63 65 73 73 20 64 65 6e 69 65 64 00           Access denied.

0000061c <__c.39>:
     61c:	68 65 6c 70 3b 00                                   help;.

00000622 <__c.40>:
     622:	52 65 73 65 74 20 63 6f 6d 6d 61 6e 64 20 61 63     Reset command ac
     632:	63 65 70 74 65 64 2e 00                             cepted..

0000063a <__c.41>:
     63a:	41 63 63 65 73 73 20 64 65 6e 69 65 64 00           Access denied.

00000648 <__c.42>:
     648:	72 65 62 6f 6f 74 3b 00                             reboot;.

00000650 <__c.43>:
     650:	44 65 76 69 63 65 20 72 65 73 65 74 20 64 65 66     Device reset def
     660:	61 75 6c 74 2c 20 73 65 6e 64 20 61 64 6d 69 6e     ault, send admin
     670:	70 68 6f 6e 65 73 3d 4e 55 4d 42 45 52 5f 50 48     phones=NUMBER_PH
     680:	4f 4e 45 53 00                                      ONES.

00000685 <__c.44>:
     685:	41 63 63 65 73 73 20 64 65 6e 69 65 64 00           Access denied.

00000693 <__c.45>:
     693:	72 65 73 65 74 64 65 66 61 75 6c 74 3b 00           resetdefault;.

000006a1 <__c.47>:
     6a1:	65 72 72 6f 72 00                                   error.

000006a7 <__c.48>:
     6a7:	41 63 63 65 73 73 20 64 65 6e 69 65 64 00           Access denied.

000006b5 <__c.49>:
     6b5:	67 65 74 3a 00                                      get:.

000006ba <__c.50>:
     6ba:	65 72 72 6f 72 00                                   error.

000006c0 <__c.51>:
     6c0:	6f 6b 00                                            ok.

000006c3 <__c.52>:
     6c3:	41 63 63 65 73 73 20 64 65 6e 69 65 64 00           Access denied.

000006d1 <__c.53>:
     6d1:	73 65 74 3a 00                                      set:.

000006d6 <help_set>:
     6d6:	73 65 74 3a 62 74 6e 69 6e 74 65 72 76 61 6c 3d     set:btninterval=
     6e6:	3b 61 66 74 65 72 6d 6f 74 69 6f 6e 3d 3b 61 63     ;aftermotion=;ac
     6f6:	63 65 70 74 5f 63 61 6c 6c 73 3d 3b 76 6f 69 63     cept_calls=;voic
     706:	65 3d 3b 67 75 61 72 64 3d 3b 6c 6f 63 61 6c 5f     e=;guard=;local_
     716:	67 75 61 72 64 3d 3b 61 75 74 6f 67 75 61 72 64     guard=;autoguard
     726:	3d 3b 6d 74 69 6d 65 5f 73 65 6e 73 5f 6d 73 3d     =;mtime_sens_ms=
     736:	3b 6d 70 61 75 73 65 5f 6d 73 3d 3b 70 61 75 73     ;mpause_ms=;paus
     746:	65 5f 61 6c 61 72 6d 5f 73 3d 3b 72 65 70 6f 72     e_alarm_s=;repor
     756:	74 5f 70 6f 77 65 72 3d 00 00 00 00 00 00 00 00     t_power=........
	...

00000777 <help_get>:
     777:	67 65 74 3a 61 64 6d 69 6e 70 68 6f 6e 65 73 3b     get:adminphones;
     787:	61 63 63 65 70 74 5f 63 61 6c 6c 73 3b 62 74 6e     accept_calls;btn
     797:	69 6e 74 65 72 76 61 6c 3b 61 66 74 65 72 6d 6f     interval;aftermo
     7a7:	74 69 6f 6e 3b 61 75 74 6f 67 75 61 72 64 3b 6d     tion;autoguard;m
     7b7:	74 69 6d 65 5f 73 65 6e 73 5f 6d 73 3b 6d 70 61     time_sens_ms;mpa
     7c7:	75 73 65 5f 6d 73 3b 72 65 70 6f 72 74 5f 70 6f     use_ms;report_po
     7d7:	77 65 72 00 00 00 00 00 00 00 00 00 00 00 00 00     wer.............
	...

00000818 <help_text>:
     818:	68 65 6c 70 73 65 74 3b 68 65 6c 70 67 65 74 3b     helpset;helpget;
     828:	72 65 70 6f 72 74 3b 61 64 6d 69 6e 70 68 6f 6e     report;adminphon
     838:	65 73 3b 72 65 62 6f 6f 74 3b 72 65 73 65 74 64     es;reboot;resetd
     848:	65 66 61 75 6c 74 3b 70 61 79 5f 63 6f 64 65 3d     efault;pay_code=
     858:	3b 6c 69 67 68 74 3d 3b 00 00 00 00 00 00 00 00     ;light=;........
	...

000008b9 <__c.0>:
     8b9:	49 6e 74 65 72 6e 65 74 20 4f 4b 00                 Internet OK.

000008c5 <__c.1>:
     8c5:	4e 6f 20 49 6e 74 65 72 6e 65 74 00                 No Internet.

000008d1 <__c.3>:
     8d1:	3b 25 75 00                                         ;%u.

000008d5 <__c.4>:
     8d5:	74 3d 25 6c 75 00                                   t=%lu.

000008db <__c.5>:
     8db:	62 6d 3d 25 75 26 00                                bm=%u&.

000008e2 <__c.6>:
     8e2:	6d 69 3d 25 75 26 00                                mi=%u&.

000008e9 <__c.7>:
     8e9:	7a 3d 25 75 26 00                                   z=%u&.

000008ef <__c.8>:
     8ef:	6c 3d 25 75 26 00                                   l=%u&.

000008f5 <__c.9>:
     8f5:	73 3d 25 75 26 00                                   s=%u&.

000008fb <__c.10>:
     8fb:	62 3d 25 75 26 00                                   b=%u&.

00000901 <__c.11>:
     901:	62 3d 25 75 26 00                                   b=%u&.

00000907 <__c.12>:
     907:	72 3d 25 75 26 00                                   r=%u&.

0000090d <__c.13>:
     90d:	73 69 67 3d 25 75 26 00                             sig=%u&.

00000915 <__c.14>:
     915:	6d 3d 25 75 26 00                                   m=%u&.

0000091b <__c.15>:
     91b:	74 65 3d 25 64 26 00                                te=%d&.

00000922 <__c.16>:
     922:	74 69 3d 25 64 26 00                                ti=%d&.

00000929 <__c.17>:
     929:	6c 67 3d 25 75 26 00                                lg=%u&.

00000930 <__c.18>:
     930:	67 3d 25 75 26 00                                   g=%u&.

00000936 <__c.19>:
     936:	64 3d 25 73 26 00                                   d=%s&.

0000093c <__c.23>:
     93c:	2a 31 30 00                                         *10.

00000940 <__c.24>:
     940:	70 69 6e 67 31 00                                   ping1.

00000946 <__c.25>:
     946:	70 69 6e 67 30 00                                   ping0.

0000094c <__c.26>:
     94c:	72 65 62 6f 6f 74 5f 67 73 6d 00                    reboot_gsm.

00000957 <__c.27>:
     957:	72 65 62 6f 6f 74 5f 61 6c 6c 00                    reboot_all.

00000962 <__c.28>:
     962:	75 73 73 64 00                                      ussd.

00000967 <__c.29>:
     967:	62 75 7a 3d 31 00                                   buz=1.

0000096d <__c.30>:
     96d:	62 75 7a 3d 30 00                                   buz=0.

00000973 <__c.31>:
     973:	6c 5f 67 3d 30 00                                   l_g=0.

00000979 <__c.32>:
     979:	6c 5f 67 3d 31 00                                   l_g=1.

0000097f <__c.33>:
     97f:	6d 5f 67 3d 30 00                                   m_g=0.

00000985 <__c.34>:
     985:	6d 5f 67 3d 31 00                                   m_g=1.

0000098b <__c.35>:
     98b:	6c 61 6d 70 3d 30 00                                lamp=0.

00000992 <__c.36>:
     992:	6c 61 6d 70 3d 31 00 00                             lamp=1..

0000099a <__ctors_end>:
     99a:	11 24       	eor	r1, r1
     99c:	1f be       	out	0x3f, r1	; 63
     99e:	cf ef       	ldi	r28, 0xFF	; 255
     9a0:	d8 e0       	ldi	r29, 0x08	; 8
     9a2:	de bf       	out	0x3e, r29	; 62
     9a4:	cd bf       	out	0x3d, r28	; 61

000009a6 <__do_copy_data>:
     9a6:	13 e0       	ldi	r17, 0x03	; 3
     9a8:	a0 e0       	ldi	r26, 0x00	; 0
     9aa:	b1 e0       	ldi	r27, 0x01	; 1
     9ac:	e8 e4       	ldi	r30, 0x48	; 72
     9ae:	ff e6       	ldi	r31, 0x6F	; 111
     9b0:	02 c0       	rjmp	.+4      	; 0x9b6 <__do_copy_data+0x10>
     9b2:	05 90       	lpm	r0, Z+
     9b4:	0d 92       	st	X+, r0
     9b6:	a8 30       	cpi	r26, 0x08	; 8
     9b8:	b1 07       	cpc	r27, r17
     9ba:	d9 f7       	brne	.-10     	; 0x9b2 <__do_copy_data+0xc>

000009bc <__do_clear_bss>:
     9bc:	26 e0       	ldi	r18, 0x06	; 6
     9be:	a8 e0       	ldi	r26, 0x08	; 8
     9c0:	b3 e0       	ldi	r27, 0x03	; 3
     9c2:	01 c0       	rjmp	.+2      	; 0x9c6 <.do_clear_bss_start>

000009c4 <.do_clear_bss_loop>:
     9c4:	1d 92       	st	X+, r1

000009c6 <.do_clear_bss_start>:
     9c6:	a5 3b       	cpi	r26, 0xB5	; 181
     9c8:	b2 07       	cpc	r27, r18
     9ca:	e1 f7       	brne	.-8      	; 0x9c4 <.do_clear_bss_loop>
     9cc:	0e 94 c2 1f 	call	0x3f84	; 0x3f84 <main>
     9d0:	0c 94 83 37 	jmp	0x6f06	; 0x6f06 <_exit>

000009d4 <__bad_interrupt>:
     9d4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000009d8 <ADC_INIT>:
//	prescaler = 2,4,8,16,32,64,128
//  Voltage_Reference = AREF,AVCC,INTERNAL,INTERNAL1v1,INTERNAL2v56

void ADC_INIT(uint8_t prescaler, uint8_t Voltage_Reference)
{
    ADC_SINGLE_INIT=0; //when ADC_INIT() call by user so we dont need to again execute ADC_INIT() inside the analogRead()
     9d8:	10 92 08 03 	sts	0x0308, r1	; 0x800308 <ADC_SINGLE_INIT>


    ADCSRA |= (1<<ADEN); // ADC Enable
     9dc:	ea e7       	ldi	r30, 0x7A	; 122
     9de:	f0 e0       	ldi	r31, 0x00	; 0
     9e0:	90 81       	ld	r25, Z
     9e2:	90 68       	ori	r25, 0x80	; 128
     9e4:	90 83       	st	Z, r25
    || defined(__AVR_ATmega168__) || defined(__AVR_ATmega168P__) || defined(__AVR_ATmega168A__) || defined(__AVR_ATmega168PA__) || defined(__AVR_ATmega168PB__)\
    || defined(__AVR_ATmega328__) || defined(__AVR_ATmega328P__)\
    || defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny24A__)\
    || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny44A__)\
    || defined(__AVR_ATtiny84__) || defined(__AVR_ATtiny84A__) || defined(__AVR_ATtiny85__)
    ADCSRA &= (~(1<<ADPS2)) & (~(1<<ADPS1)) & (~(1<<ADPS0)) ; // clear ADPS2:ADPS0 for initialization
     9e6:	90 81       	ld	r25, Z
     9e8:	98 7f       	andi	r25, 0xF8	; 248
     9ea:	90 83       	st	Z, r25

    switch(prescaler)
     9ec:	80 31       	cpi	r24, 0x10	; 16
     9ee:	09 f4       	brne	.+2      	; 0x9f2 <ADC_INIT+0x1a>
     9f0:	43 c0       	rjmp	.+134    	; 0xa78 <ADC_INIT+0xa0>
     9f2:	b0 f4       	brcc	.+44     	; 0xa20 <ADC_INIT+0x48>
     9f4:	84 30       	cpi	r24, 0x04	; 4
     9f6:	d1 f1       	breq	.+116    	; 0xa6c <ADC_INIT+0x94>
     9f8:	48 f0       	brcs	.+18     	; 0xa0c <ADC_INIT+0x34>
     9fa:	88 30       	cpi	r24, 0x08	; 8
     9fc:	09 f0       	breq	.+2      	; 0xa00 <ADC_INIT+0x28>
     9fe:	48 c0       	rjmp	.+144    	; 0xa90 <ADC_INIT+0xb8>
        break;
    case 4:
        ADCSRA |= (1<<ADPS1);//-----------------------------------  0 1 0 --------------------- 4
        break;
    case 8:
        ADCSRA |= (1<<ADPS1) | (1<<ADPS0);//----------------------  0 1 1 --------------------- 8
     a00:	ea e7       	ldi	r30, 0x7A	; 122
     a02:	f0 e0       	ldi	r31, 0x00	; 0
     a04:	80 81       	ld	r24, Z
     a06:	83 60       	ori	r24, 0x03	; 3
     a08:	80 83       	st	Z, r24
        break;
     a0a:	21 c0       	rjmp	.+66     	; 0xa4e <ADC_INIT+0x76>
    switch(prescaler)
     a0c:	88 23       	and	r24, r24
     a0e:	d1 f0       	breq	.+52     	; 0xa44 <ADC_INIT+0x6c>
     a10:	82 30       	cpi	r24, 0x02	; 2
     a12:	f1 f5       	brne	.+124    	; 0xa90 <ADC_INIT+0xb8>
        ADCSRA |= (1<<ADPS0);//-----------------------------------  0 0 1 --------------------- 2
     a14:	ea e7       	ldi	r30, 0x7A	; 122
     a16:	f0 e0       	ldi	r31, 0x00	; 0
     a18:	80 81       	ld	r24, Z
     a1a:	81 60       	ori	r24, 0x01	; 1
     a1c:	80 83       	st	Z, r24
        break;
     a1e:	17 c0       	rjmp	.+46     	; 0xa4e <ADC_INIT+0x76>
    switch(prescaler)
     a20:	80 34       	cpi	r24, 0x40	; 64
     a22:	81 f1       	breq	.+96     	; 0xa84 <ADC_INIT+0xac>
     a24:	80 38       	cpi	r24, 0x80	; 128
     a26:	31 f4       	brne	.+12     	; 0xa34 <ADC_INIT+0x5c>
        break;
    case 64:
        ADCSRA |= (1<<ADPS2) | (1<<ADPS1);//---------------------  1 1 0 --------------------- 64
        break;
    case 128:
        ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);//-------  1 1 1 --------------------- 124
     a28:	ea e7       	ldi	r30, 0x7A	; 122
     a2a:	f0 e0       	ldi	r31, 0x00	; 0
     a2c:	80 81       	ld	r24, Z
     a2e:	87 60       	ori	r24, 0x07	; 7
     a30:	80 83       	st	Z, r24
        break;
     a32:	0d c0       	rjmp	.+26     	; 0xa4e <ADC_INIT+0x76>
    switch(prescaler)
     a34:	80 32       	cpi	r24, 0x20	; 32
     a36:	61 f5       	brne	.+88     	; 0xa90 <ADC_INIT+0xb8>
        ADCSRA |= (1<<ADPS2) | (1<<ADPS0);//---------------------  1 0 1 --------------------- 32
     a38:	ea e7       	ldi	r30, 0x7A	; 122
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	80 81       	ld	r24, Z
     a3e:	85 60       	ori	r24, 0x05	; 5
     a40:	80 83       	st	Z, r24
        break;
     a42:	05 c0       	rjmp	.+10     	; 0xa4e <ADC_INIT+0x76>
        ADCSRA |= (1<<ADPS0);//-----------------------------------  0 0 0 --------------------- 2
     a44:	ea e7       	ldi	r30, 0x7A	; 122
     a46:	f0 e0       	ldi	r31, 0x00	; 0
     a48:	80 81       	ld	r24, Z
     a4a:	81 60       	ori	r24, 0x01	; 1
     a4c:	80 83       	st	Z, r24
    //ATmega16=2.56v           ATmega48=1.1v
    //ATmega32=2.56v           ATmega88=1.1v
    //ATmega8535=2.56v         ATmega168=1.1v
    //ATmega8=2.56v            ATmega328=1.1v

    if(Reference_Voltage==AREF)
     a4e:	6a 30       	cpi	r22, 0x0A	; 10
     a50:	29 f1       	breq	.+74     	; 0xa9c <ADC_INIT+0xc4>
    {
        ADMUX &= (~(1<<REFS1)) & (~(1<<REFS0));   //------------------------ 0 0 -------- AREF
    }
    else if (Reference_Voltage==AVCC)
     a52:	6b 30       	cpi	r22, 0x0B	; 11
     a54:	71 f1       	breq	.+92     	; 0xab2 <ADC_INIT+0xda>
    {
        ADMUX &= (~(1<<REFS1));    //-------------- 0 1 -------- AVCC
        ADMUX |= (1<<REFS0);
    }
    else if (Reference_Voltage==INTERNAL)
     a56:	6c 30       	cpi	r22, 0x0C	; 12
     a58:	a9 f1       	breq	.+106    	; 0xac4 <ADC_INIT+0xec>
    {
        ADMUX |= /*(1<<REFS1) | */(1<<REFS0);   //-------------------- 1 1 -------- INTERNAL 2.56v or 1.1v and (1 0 reserved)
    }
    else
    {
        ADMUX &= (~(1<<REFS1));    //------------------------------------------- 0 1 -------- AVCC
     a5a:	ec e7       	ldi	r30, 0x7C	; 124
     a5c:	f0 e0       	ldi	r31, 0x00	; 0
     a5e:	80 81       	ld	r24, Z
     a60:	8f 77       	andi	r24, 0x7F	; 127
     a62:	80 83       	st	Z, r24
        ADMUX |= (1<<REFS0);
     a64:	80 81       	ld	r24, Z
     a66:	80 64       	ori	r24, 0x40	; 64
     a68:	80 83       	st	Z, r24
     a6a:	1d c0       	rjmp	.+58     	; 0xaa6 <ADC_INIT+0xce>
        ADCSRA |= (1<<ADPS1);//-----------------------------------  0 1 0 --------------------- 4
     a6c:	ea e7       	ldi	r30, 0x7A	; 122
     a6e:	f0 e0       	ldi	r31, 0x00	; 0
     a70:	80 81       	ld	r24, Z
     a72:	82 60       	ori	r24, 0x02	; 2
     a74:	80 83       	st	Z, r24
        break;
     a76:	eb cf       	rjmp	.-42     	; 0xa4e <ADC_INIT+0x76>
        ADCSRA |= (1<<ADPS2);//----------------------------------  1 0 0 --------------------- 16
     a78:	ea e7       	ldi	r30, 0x7A	; 122
     a7a:	f0 e0       	ldi	r31, 0x00	; 0
     a7c:	80 81       	ld	r24, Z
     a7e:	84 60       	ori	r24, 0x04	; 4
     a80:	80 83       	st	Z, r24
        break;
     a82:	e5 cf       	rjmp	.-54     	; 0xa4e <ADC_INIT+0x76>
        ADCSRA |= (1<<ADPS2) | (1<<ADPS1);//---------------------  1 1 0 --------------------- 64
     a84:	ea e7       	ldi	r30, 0x7A	; 122
     a86:	f0 e0       	ldi	r31, 0x00	; 0
     a88:	80 81       	ld	r24, Z
     a8a:	86 60       	ori	r24, 0x06	; 6
     a8c:	80 83       	st	Z, r24
        break;
     a8e:	df cf       	rjmp	.-66     	; 0xa4e <ADC_INIT+0x76>
        ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);//----------1 1 1 --------------------- 128
     a90:	ea e7       	ldi	r30, 0x7A	; 122
     a92:	f0 e0       	ldi	r31, 0x00	; 0
     a94:	80 81       	ld	r24, Z
     a96:	87 60       	ori	r24, 0x07	; 7
     a98:	80 83       	st	Z, r24
     a9a:	d9 cf       	rjmp	.-78     	; 0xa4e <ADC_INIT+0x76>
        ADMUX &= (~(1<<REFS1)) & (~(1<<REFS0));   //------------------------ 0 0 -------- AREF
     a9c:	ec e7       	ldi	r30, 0x7C	; 124
     a9e:	f0 e0       	ldi	r31, 0x00	; 0
     aa0:	80 81       	ld	r24, Z
     aa2:	8f 73       	andi	r24, 0x3F	; 63
     aa4:	80 83       	st	Z, r24
    ADMUX &= ~(1<<ADLAR); //left adjust off // Though by default left adjust off // this line use for more convenient for future developer
     aa6:	ec e7       	ldi	r30, 0x7C	; 124
     aa8:	f0 e0       	ldi	r31, 0x00	; 0
     aaa:	80 81       	ld	r24, Z
     aac:	8f 7d       	andi	r24, 0xDF	; 223
     aae:	80 83       	st	Z, r24
}
     ab0:	08 95       	ret
        ADMUX &= (~(1<<REFS1));    //-------------- 0 1 -------- AVCC
     ab2:	ec e7       	ldi	r30, 0x7C	; 124
     ab4:	f0 e0       	ldi	r31, 0x00	; 0
     ab6:	80 81       	ld	r24, Z
     ab8:	8f 77       	andi	r24, 0x7F	; 127
     aba:	80 83       	st	Z, r24
        ADMUX |= (1<<REFS0);
     abc:	80 81       	ld	r24, Z
     abe:	80 64       	ori	r24, 0x40	; 64
     ac0:	80 83       	st	Z, r24
     ac2:	f1 cf       	rjmp	.-30     	; 0xaa6 <ADC_INIT+0xce>
        ADMUX |= /*(1<<REFS1) | */(1<<REFS0);   //-------------------- 1 1 -------- INTERNAL 2.56v or 1.1v and (1 0 reserved)
     ac4:	ec e7       	ldi	r30, 0x7C	; 124
     ac6:	f0 e0       	ldi	r31, 0x00	; 0
     ac8:	80 81       	ld	r24, Z
     aca:	80 64       	ori	r24, 0x40	; 64
     acc:	80 83       	st	Z, r24
     ace:	eb cf       	rjmp	.-42     	; 0xaa6 <ADC_INIT+0xce>

00000ad0 <analogRead>:
//################################################################################################################################################################################
//===========================================================|   analogRead() Start	|=============================================================================================
//################################################################################################################################################################################
uint16_t analogRead(uint8_t input)
{
    ADCSRA |= (1<<ADEN);
     ad0:	ea e7       	ldi	r30, 0x7A	; 122
     ad2:	f0 e0       	ldi	r31, 0x00	; 0
     ad4:	90 81       	ld	r25, Z
     ad6:	90 68       	ori	r25, 0x80	; 128
     ad8:	90 83       	st	Z, r25
    ADMUX &=  (~(1<<MUX3)) & (~(1<<MUX2)) & (~(1<<MUX1)) & (~(1<<MUX0));
     ada:	ec e7       	ldi	r30, 0x7C	; 124
     adc:	f0 e0       	ldi	r31, 0x00	; 0
     ade:	90 81       	ld	r25, Z
     ae0:	90 7f       	andi	r25, 0xF0	; 240
     ae2:	90 83       	st	Z, r25
    // Select the ADC reference voltage and channel. Must be done everytime because ADMUX can be overwritten in meantime
    switch(input)
     ae4:	89 30       	cpi	r24, 0x09	; 9
     ae6:	08 f0       	brcs	.+2      	; 0xaea <analogRead+0x1a>
     ae8:	4d c0       	rjmp	.+154    	; 0xb84 <analogRead+0xb4>
     aea:	e8 2f       	mov	r30, r24
     aec:	f0 e0       	ldi	r31, 0x00	; 0
     aee:	eb 57       	subi	r30, 0x7B	; 123
     af0:	f8 4c       	sbci	r31, 0xC8	; 200
     af2:	0c 94 6c 2f 	jmp	0x5ed8	; 0x5ed8 <__tablejump2__>
    {
    case ANALOG0:
        ADMUX &=  (~(1<<MUX3)) & (~(1<<MUX2)) & (~(1<<MUX1)) & (~(1<<MUX0)); //---------- 0 0 0 0 0
     af6:	ec e7       	ldi	r30, 0x7C	; 124
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	80 81       	ld	r24, Z
     afc:	80 7f       	andi	r24, 0xF0	; 240
     afe:	80 83       	st	Z, r24
        ADMUX |= (1<<MUX3);         // ADC channel 8 - intelnal temperature sensor
        break;
    default:
        ADMUX &= (~(1<<MUX3)) & (~(1<<MUX2)) & (~(1<<MUX1)) & (~(1<<MUX0)); // set channel ADC0 default
    }
    ADCSRA |= (1 << ADSC);  // Start converting
     b00:	ea e7       	ldi	r30, 0x7A	; 122
     b02:	f0 e0       	ldi	r31, 0x00	; 0
     b04:	80 81       	ld	r24, Z
     b06:	80 64       	ori	r24, 0x40	; 64
     b08:	80 83       	st	Z, r24

    while((ADCSRA & (1<<ADIF)) == 0) {};
     b0a:	80 81       	ld	r24, Z
     b0c:	84 ff       	sbrs	r24, 4
     b0e:	fd cf       	rjmp	.-6      	; 0xb0a <analogRead+0x3a>

//    // Shut down the ADC to save power
    ADCSRA &= ~(1 << ADEN);
     b10:	ea e7       	ldi	r30, 0x7A	; 122
     b12:	f0 e0       	ldi	r31, 0x00	; 0
     b14:	80 81       	ld	r24, Z
     b16:	8f 77       	andi	r24, 0x7F	; 127
     b18:	80 83       	st	Z, r24

    return ADCW;
     b1a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     b1e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
     b22:	08 95       	ret
        ADMUX |= (1<<MUX0);//-------------------------------------------------------------------------- 0 0 0 0 1
     b24:	ec e7       	ldi	r30, 0x7C	; 124
     b26:	f0 e0       	ldi	r31, 0x00	; 0
     b28:	80 81       	ld	r24, Z
     b2a:	81 60       	ori	r24, 0x01	; 1
     b2c:	80 83       	st	Z, r24
        break;
     b2e:	e8 cf       	rjmp	.-48     	; 0xb00 <analogRead+0x30>
        ADMUX |= (1<<MUX1);//-------------------------------------------------------------------------- 0 0 0 1 0
     b30:	ec e7       	ldi	r30, 0x7C	; 124
     b32:	f0 e0       	ldi	r31, 0x00	; 0
     b34:	80 81       	ld	r24, Z
     b36:	82 60       	ori	r24, 0x02	; 2
     b38:	80 83       	st	Z, r24
        break;
     b3a:	e2 cf       	rjmp	.-60     	; 0xb00 <analogRead+0x30>
        ADMUX |= (1<<MUX1) | (1<<MUX0);//-------------------------------------------------------------- 0 0 0 1 1
     b3c:	ec e7       	ldi	r30, 0x7C	; 124
     b3e:	f0 e0       	ldi	r31, 0x00	; 0
     b40:	80 81       	ld	r24, Z
     b42:	83 60       	ori	r24, 0x03	; 3
     b44:	80 83       	st	Z, r24
        break;
     b46:	dc cf       	rjmp	.-72     	; 0xb00 <analogRead+0x30>
        ADMUX |= (1<<MUX2);//-------------------------------------------------------------------------- 0 0 1 0 0
     b48:	ec e7       	ldi	r30, 0x7C	; 124
     b4a:	f0 e0       	ldi	r31, 0x00	; 0
     b4c:	80 81       	ld	r24, Z
     b4e:	84 60       	ori	r24, 0x04	; 4
     b50:	80 83       	st	Z, r24
        break;
     b52:	d6 cf       	rjmp	.-84     	; 0xb00 <analogRead+0x30>
        ADMUX |= (1<<MUX2) | (1<<MUX0);//-------------------------------------------------------------- 0 0 1 0 1
     b54:	ec e7       	ldi	r30, 0x7C	; 124
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	80 81       	ld	r24, Z
     b5a:	85 60       	ori	r24, 0x05	; 5
     b5c:	80 83       	st	Z, r24
        break;
     b5e:	d0 cf       	rjmp	.-96     	; 0xb00 <analogRead+0x30>
        ADMUX |= (1<<MUX2) | (1<<MUX1);//-------------------------------------------------------------- 0 0 1 1 0
     b60:	ec e7       	ldi	r30, 0x7C	; 124
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	86 60       	ori	r24, 0x06	; 6
     b68:	80 83       	st	Z, r24
        break;
     b6a:	ca cf       	rjmp	.-108    	; 0xb00 <analogRead+0x30>
        ADMUX |= (1<<MUX2) | (1<<MUX1) | (1<<MUX0);//-------------------------------------------------- 0 0 1 1 1
     b6c:	ec e7       	ldi	r30, 0x7C	; 124
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	80 81       	ld	r24, Z
     b72:	87 60       	ori	r24, 0x07	; 7
     b74:	80 83       	st	Z, r24
        break;
     b76:	c4 cf       	rjmp	.-120    	; 0xb00 <analogRead+0x30>
        ADMUX |= (1<<MUX3);         // ADC channel 8 - intelnal temperature sensor
     b78:	ec e7       	ldi	r30, 0x7C	; 124
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	80 81       	ld	r24, Z
     b7e:	88 60       	ori	r24, 0x08	; 8
     b80:	80 83       	st	Z, r24
        break;
     b82:	be cf       	rjmp	.-132    	; 0xb00 <analogRead+0x30>
        ADMUX &= (~(1<<MUX3)) & (~(1<<MUX2)) & (~(1<<MUX1)) & (~(1<<MUX0)); // set channel ADC0 default
     b84:	ec e7       	ldi	r30, 0x7C	; 124
     b86:	f0 e0       	ldi	r31, 0x00	; 0
     b88:	80 81       	ld	r24, Z
     b8a:	80 7f       	andi	r24, 0xF0	; 240
     b8c:	80 83       	st	Z, r24
     b8e:	b8 cf       	rjmp	.-144    	; 0xb00 <analogRead+0x30>

00000b90 <get_filtered_adc>:
}

//*******************************************************************************************************************

uint16_t get_filtered_adc(uint8_t pin)
{
     b90:	cf 92       	push	r12
     b92:	df 92       	push	r13
     b94:	ff 92       	push	r15
     b96:	0f 93       	push	r16
     b98:	1f 93       	push	r17
     b9a:	cf 93       	push	r28
     b9c:	df 93       	push	r29
     b9e:	f8 2e       	mov	r15, r24
    static uint16_t buf[3];
    buf[0] = analogRead(pin);
     ba0:	0e 94 68 05 	call	0xad0	; 0xad0 <analogRead>
     ba4:	c8 2f       	mov	r28, r24
     ba6:	d9 2f       	mov	r29, r25
     ba8:	0f 2e       	mov	r0, r31
     baa:	f8 e1       	ldi	r31, 0x18	; 24
     bac:	cf 2e       	mov	r12, r31
     bae:	f3 e0       	ldi	r31, 0x03	; 3
     bb0:	df 2e       	mov	r13, r31
     bb2:	f0 2d       	mov	r31, r0
     bb4:	f6 01       	movw	r30, r12
     bb6:	d1 83       	std	Z+1, r29	; 0x01
     bb8:	c0 83       	st	Z, r28
    buf[1] = analogRead(pin);
     bba:	8f 2d       	mov	r24, r15
     bbc:	0e 94 68 05 	call	0xad0	; 0xad0 <analogRead>
     bc0:	08 2f       	mov	r16, r24
     bc2:	19 2f       	mov	r17, r25
     bc4:	f6 01       	movw	r30, r12
     bc6:	13 83       	std	Z+3, r17	; 0x03
     bc8:	02 83       	std	Z+2, r16	; 0x02
    buf[2] = analogRead(pin);
     bca:	8f 2d       	mov	r24, r15
     bcc:	0e 94 68 05 	call	0xad0	; 0xad0 <analogRead>
     bd0:	28 2f       	mov	r18, r24
     bd2:	39 2f       	mov	r19, r25
     bd4:	f6 01       	movw	r30, r12
     bd6:	35 83       	std	Z+5, r19	; 0x05
     bd8:	24 83       	std	Z+4, r18	; 0x04
    uint16_t middle;
    if ((buf[0] <= buf[1]) && (buf[0] <= buf[2]))
     bda:	0c 17       	cp	r16, r28
     bdc:	1d 07       	cpc	r17, r29
     bde:	c8 f0       	brcs	.+50     	; 0xc12 <get_filtered_adc+0x82>
     be0:	2c 17       	cp	r18, r28
     be2:	3d 07       	cpc	r19, r29
     be4:	30 f0       	brcs	.+12     	; 0xbf2 <get_filtered_adc+0x62>
    {
        middle = (buf[1] <= buf[2]) ? buf[1] : buf[2];
     be6:	c8 01       	movw	r24, r16
     be8:	28 17       	cp	r18, r24
     bea:	39 07       	cpc	r19, r25
     bec:	50 f4       	brcc	.+20     	; 0xc02 <get_filtered_adc+0x72>
     bee:	c9 01       	movw	r24, r18
     bf0:	08 c0       	rjmp	.+16     	; 0xc02 <get_filtered_adc+0x72>
    }
    else
    {
        if ((buf[1] <= buf[0]) && (buf[1] <= buf[2]))
     bf2:	c0 17       	cp	r28, r16
     bf4:	d1 07       	cpc	r29, r17
     bf6:	69 f0       	breq	.+26     	; 0xc12 <get_filtered_adc+0x82>
        {
            middle = (buf[0] <= buf[2]) ? buf[0] : buf[2];
        }
        else
        {
            middle = (buf[0] <= buf[1]) ? buf[0] : buf[1];
     bf8:	ce 01       	movw	r24, r28
     bfa:	0c 17       	cp	r16, r28
     bfc:	1d 07       	cpc	r17, r29
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <get_filtered_adc+0x72>
     c00:	c8 01       	movw	r24, r16
        }
    }
    return middle;
}
     c02:	df 91       	pop	r29
     c04:	cf 91       	pop	r28
     c06:	1f 91       	pop	r17
     c08:	0f 91       	pop	r16
     c0a:	ff 90       	pop	r15
     c0c:	df 90       	pop	r13
     c0e:	cf 90       	pop	r12
     c10:	08 95       	ret
        if ((buf[1] <= buf[0]) && (buf[1] <= buf[2]))
     c12:	20 17       	cp	r18, r16
     c14:	31 07       	cpc	r19, r17
     c16:	80 f3       	brcs	.-32     	; 0xbf8 <get_filtered_adc+0x68>
            middle = (buf[0] <= buf[2]) ? buf[0] : buf[2];
     c18:	ce 01       	movw	r24, r28
     c1a:	2c 17       	cp	r18, r28
     c1c:	3d 07       	cpc	r19, r29
     c1e:	88 f7       	brcc	.-30     	; 0xc02 <get_filtered_adc+0x72>
     c20:	c9 01       	movw	r24, r18
     c22:	ef cf       	rjmp	.-34     	; 0xc02 <get_filtered_adc+0x72>

00000c24 <get_int_temperature>:
    return (int8_t)((get_filtered_adc(INT_TEMP) + CHIP_TEMP_ERROR_OFFSET) - 273);
     c24:	88 e0       	ldi	r24, 0x08	; 8
     c26:	0e 94 c8 05 	call	0xb90	; 0xb90 <get_filtered_adc>
}
     c2a:	80 54       	subi	r24, 0x40	; 64
     c2c:	08 95       	ret

00000c2e <check_power>:
    if(get_filtered_adc(BAT_LEVEL) > 600)
     c2e:	86 e0       	ldi	r24, 0x06	; 6
     c30:	0e 94 c8 05 	call	0xb90	; 0xb90 <get_filtered_adc>

//*******************************************************************************************************************

void check_power(void)
{
    if(is_external_pwr())
     c34:	89 35       	cpi	r24, 0x59	; 89
     c36:	92 40       	sbci	r25, 0x02	; 2
     c38:	a0 f4       	brcc	.+40     	; 0xc62 <check_power+0x34>
        time_without_power_s = 0;
    else
        time_without_power_s++;
     c3a:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <time_without_power_s>
     c3e:	90 91 1f 03 	lds	r25, 0x031F	; 0x80031f <time_without_power_s+0x1>
     c42:	a0 91 20 03 	lds	r26, 0x0320	; 0x800320 <time_without_power_s+0x2>
     c46:	b0 91 21 03 	lds	r27, 0x0321	; 0x800321 <time_without_power_s+0x3>
     c4a:	01 96       	adiw	r24, 0x01	; 1
     c4c:	a1 1d       	adc	r26, r1
     c4e:	b1 1d       	adc	r27, r1
        time_without_power_s = 0;
     c50:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <time_without_power_s>
     c54:	90 93 1f 03 	sts	0x031F, r25	; 0x80031f <time_without_power_s+0x1>
     c58:	a0 93 20 03 	sts	0x0320, r26	; 0x800320 <time_without_power_s+0x2>
     c5c:	b0 93 21 03 	sts	0x0321, r27	; 0x800321 <time_without_power_s+0x3>
}
     c60:	08 95       	ret
     c62:	80 e0       	ldi	r24, 0x00	; 0
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	dc 01       	movw	r26, r24
     c68:	f3 cf       	rjmp	.-26     	; 0xc50 <check_power+0x22>

00000c6a <power_control>:
//*******************************************************************************************************************

void power_control(void)
{
     c6a:	cf 92       	push	r12
     c6c:	df 92       	push	r13
     c6e:	ef 92       	push	r14
     c70:	ff 92       	push	r15
     c72:	cf 93       	push	r28
     c74:	df 93       	push	r29
     c76:	00 d0       	rcall	.+0      	; 0xc78 <power_control+0xe>
     c78:	00 d0       	rcall	.+0      	; 0xc7a <power_control+0x10>
     c7a:	cd b7       	in	r28, 0x3d	; 61
     c7c:	de b7       	in	r29, 0x3e	; 62
    //static uint8_t report_bat = 0;
    static uint8_t flag_time_on = 1;
    static uint8_t flag_time_off = 1;
    static uint8_t flag_guard = 0;

    if (get_time_ms() - my_timer >= 1000)
     c7e:	0e 94 09 2c 	call	0x5812	; 0x5812 <get_time_ms>
     c82:	69 83       	std	Y+1, r22	; 0x01
     c84:	7a 83       	std	Y+2, r23	; 0x02
     c86:	8b 83       	std	Y+3, r24	; 0x03
     c88:	9c 83       	std	Y+4, r25	; 0x04
     c8a:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <my_timer.7>
     c8e:	90 91 15 03 	lds	r25, 0x0315	; 0x800315 <my_timer.7+0x1>
     c92:	a0 91 16 03 	lds	r26, 0x0316	; 0x800316 <my_timer.7+0x2>
     c96:	b0 91 17 03 	lds	r27, 0x0317	; 0x800317 <my_timer.7+0x3>
     c9a:	29 81       	ldd	r18, Y+1	; 0x01
     c9c:	3a 81       	ldd	r19, Y+2	; 0x02
     c9e:	4b 81       	ldd	r20, Y+3	; 0x03
     ca0:	5c 81       	ldd	r21, Y+4	; 0x04
     ca2:	28 1b       	sub	r18, r24
     ca4:	39 0b       	sbc	r19, r25
     ca6:	4a 0b       	sbc	r20, r26
     ca8:	5b 0b       	sbc	r21, r27
     caa:	da 01       	movw	r26, r20
     cac:	c9 01       	movw	r24, r18
     cae:	88 3e       	cpi	r24, 0xE8	; 232
     cb0:	93 40       	sbci	r25, 0x03	; 3
     cb2:	a1 05       	cpc	r26, r1
     cb4:	b1 05       	cpc	r27, r1
     cb6:	d8 f4       	brcc	.+54     	; 0xcee <power_control+0x84>
    {
        my_timer = get_time_ms();
        check_power();
    }

    if(time_without_power_s == 0)   // power+++
     cb8:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <time_without_power_s>
     cbc:	90 91 1f 03 	lds	r25, 0x031F	; 0x80031f <time_without_power_s+0x1>
     cc0:	a0 91 20 03 	lds	r26, 0x0320	; 0x800320 <time_without_power_s+0x2>
     cc4:	b0 91 21 03 	lds	r27, 0x0321	; 0x800321 <time_without_power_s+0x3>
     cc8:	89 2b       	or	r24, r25
     cca:	8a 2b       	or	r24, r26
     ccc:	8b 2b       	or	r24, r27
     cce:	e1 f0       	breq	.+56     	; 0xd08 <power_control+0x9e>
                }
            }
        }
        return;
    }
    if(get_interval_power_off_report() != 0)  ///  power---
     cd0:	0e 94 96 10 	call	0x212c	; 0x212c <get_interval_power_off_report>
     cd4:	81 11       	cpse	r24, r1
     cd6:	69 c0       	rjmp	.+210    	; 0xdaa <power_control+0x140>
//                report_bat = 0;
//                send_sms_admins("Battery LOW!!!");
//            }
//        }
    }
}
     cd8:	0f 90       	pop	r0
     cda:	0f 90       	pop	r0
     cdc:	0f 90       	pop	r0
     cde:	0f 90       	pop	r0
     ce0:	df 91       	pop	r29
     ce2:	cf 91       	pop	r28
     ce4:	ff 90       	pop	r15
     ce6:	ef 90       	pop	r14
     ce8:	df 90       	pop	r13
     cea:	cf 90       	pop	r12
     cec:	08 95       	ret
        my_timer = get_time_ms();
     cee:	0e 94 09 2c 	call	0x5812	; 0x5812 <get_time_ms>
     cf2:	60 93 14 03 	sts	0x0314, r22	; 0x800314 <my_timer.7>
     cf6:	70 93 15 03 	sts	0x0315, r23	; 0x800315 <my_timer.7+0x1>
     cfa:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <my_timer.7+0x2>
     cfe:	90 93 17 03 	sts	0x0317, r25	; 0x800317 <my_timer.7+0x3>
        check_power();
     d02:	0e 94 17 06 	call	0xc2e	; 0xc2e <check_power>
     d06:	d8 cf       	rjmp	.-80     	; 0xcb8 <power_control+0x4e>
        if(get_interval_power_on_report() != 0)
     d08:	0e 94 9c 10 	call	0x2138	; 0x2138 <get_interval_power_on_report>
     d0c:	88 23       	and	r24, r24
     d0e:	21 f3       	breq	.-56     	; 0xcd8 <power_control+0x6e>
            if(flag_guard == 0)
     d10:	80 91 13 03 	lds	r24, 0x0313	; 0x800313 <flag_guard.6>
     d14:	88 23       	and	r24, r24
     d16:	69 f0       	breq	.+26     	; 0xd32 <power_control+0xc8>
            if(flag_time_on == 0)
     d18:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <flag_time_on.5>
     d1c:	88 23       	and	r24, r24
     d1e:	81 f0       	breq	.+32     	; 0xd40 <power_control+0xd6>
            if(report_on == 1)
     d20:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <report_on.3>
     d24:	81 30       	cpi	r24, 0x01	; 1
     d26:	c1 f6       	brne	.-80     	; 0xcd8 <power_control+0x6e>
                if(flag_time_on == 1 && (time_stamp_on +  + (uint32_t)60*get_interval_power_on_report()) < get_time_s())
     d28:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <flag_time_on.5>
     d2c:	81 30       	cpi	r24, 0x01	; 1
     d2e:	a1 f6       	brne	.-88     	; 0xcd8 <power_control+0x6e>
     d30:	16 c0       	rjmp	.+44     	; 0xd5e <power_control+0xf4>
                flag_guard = 1;
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	80 93 13 03 	sts	0x0313, r24	; 0x800313 <flag_guard.6>
                delay_s(10);    //для инициализации датчиков
     d38:	8a e0       	ldi	r24, 0x0A	; 10
     d3a:	0e 94 a8 2c 	call	0x5950	; 0x5950 <delay_s>
     d3e:	ec cf       	rjmp	.-40     	; 0xd18 <power_control+0xae>
                time_stamp_on = get_time_s();
     d40:	0e 94 29 2c 	call	0x5852	; 0x5852 <get_time_s>
     d44:	60 93 0f 03 	sts	0x030F, r22	; 0x80030f <time_stamp_on.4>
     d48:	70 93 10 03 	sts	0x0310, r23	; 0x800310 <time_stamp_on.4+0x1>
     d4c:	80 93 11 03 	sts	0x0311, r24	; 0x800311 <time_stamp_on.4+0x2>
     d50:	90 93 12 03 	sts	0x0312, r25	; 0x800312 <time_stamp_on.4+0x3>
                flag_time_on = 1;
     d54:	81 e0       	ldi	r24, 0x01	; 1
     d56:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <flag_time_on.5>
                report_on = 1;
     d5a:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <report_on.3>
                if(flag_time_on == 1 && (time_stamp_on +  + (uint32_t)60*get_interval_power_on_report()) < get_time_s())
     d5e:	0e 94 9c 10 	call	0x2138	; 0x2138 <get_interval_power_on_report>
     d62:	28 2f       	mov	r18, r24
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	ac e3       	ldi	r26, 0x3C	; 60
     d68:	b0 e0       	ldi	r27, 0x00	; 0
     d6a:	0e 94 7a 2f 	call	0x5ef4	; 0x5ef4 <__umulhisi3>
     d6e:	c0 90 0f 03 	lds	r12, 0x030F	; 0x80030f <time_stamp_on.4>
     d72:	d0 90 10 03 	lds	r13, 0x0310	; 0x800310 <time_stamp_on.4+0x1>
     d76:	e0 90 11 03 	lds	r14, 0x0311	; 0x800311 <time_stamp_on.4+0x2>
     d7a:	f0 90 12 03 	lds	r15, 0x0312	; 0x800312 <time_stamp_on.4+0x3>
     d7e:	c6 0e       	add	r12, r22
     d80:	d7 1e       	adc	r13, r23
     d82:	e8 1e       	adc	r14, r24
     d84:	f9 1e       	adc	r15, r25
     d86:	0e 94 29 2c 	call	0x5852	; 0x5852 <get_time_s>
     d8a:	c6 16       	cp	r12, r22
     d8c:	d7 06       	cpc	r13, r23
     d8e:	e8 06       	cpc	r14, r24
     d90:	f9 06       	cpc	r15, r25
     d92:	08 f0       	brcs	.+2      	; 0xd96 <power_control+0x12c>
     d94:	a1 cf       	rjmp	.-190    	; 0xcd8 <power_control+0x6e>
                    report_on = 0;
     d96:	10 92 0e 03 	sts	0x030E, r1	; 0x80030e <report_on.3>
                    flag_time_off = 1;
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <flag_time_off.2>
                    send_sms_admins("External power is on.");
     da0:	8c e0       	ldi	r24, 0x0C	; 12
     da2:	92 e0       	ldi	r25, 0x02	; 2
     da4:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <send_sms_admins>
     da8:	97 cf       	rjmp	.-210    	; 0xcd8 <power_control+0x6e>
        time_stamp_off = get_val(time_without_power_s);
     daa:	2f b7       	in	r18, 0x3f	; 63
     dac:	f8 94       	cli
     dae:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <time_without_power_s>
     db2:	90 91 1f 03 	lds	r25, 0x031F	; 0x80031f <time_without_power_s+0x1>
     db6:	a0 91 20 03 	lds	r26, 0x0320	; 0x800320 <time_without_power_s+0x2>
     dba:	b0 91 21 03 	lds	r27, 0x0321	; 0x800321 <time_without_power_s+0x3>
     dbe:	2f bf       	out	0x3f, r18	; 63
     dc0:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <time_stamp_off.1>
     dc4:	90 93 0b 03 	sts	0x030B, r25	; 0x80030b <time_stamp_off.1+0x1>
     dc8:	a0 93 0c 03 	sts	0x030C, r26	; 0x80030c <time_stamp_off.1+0x2>
     dcc:	b0 93 0d 03 	sts	0x030D, r27	; 0x80030d <time_stamp_off.1+0x3>
        time_stamp_on = get_time_s();
     dd0:	0e 94 29 2c 	call	0x5852	; 0x5852 <get_time_s>
     dd4:	60 93 0f 03 	sts	0x030F, r22	; 0x80030f <time_stamp_on.4>
     dd8:	70 93 10 03 	sts	0x0310, r23	; 0x800310 <time_stamp_on.4+0x1>
     ddc:	80 93 11 03 	sts	0x0311, r24	; 0x800311 <time_stamp_on.4+0x2>
     de0:	90 93 12 03 	sts	0x0312, r25	; 0x800312 <time_stamp_on.4+0x3>
        if(flag_guard == 1)
     de4:	80 91 13 03 	lds	r24, 0x0313	; 0x800313 <flag_guard.6>
     de8:	81 30       	cpi	r24, 0x01	; 1
     dea:	51 f0       	breq	.+20     	; 0xe00 <power_control+0x196>
        if(flag_time_off == 1 && time_stamp_off > (uint32_t)60*get_interval_power_off_report())
     dec:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <flag_time_off.2>
     df0:	81 30       	cpi	r24, 0x01	; 1
     df2:	49 f0       	breq	.+18     	; 0xe06 <power_control+0x19c>
        if(report_off == 1)
     df4:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <report_off.0>
     df8:	81 30       	cpi	r24, 0x01	; 1
     dfa:	09 f0       	breq	.+2      	; 0xdfe <power_control+0x194>
     dfc:	6d cf       	rjmp	.-294    	; 0xcd8 <power_control+0x6e>
     dfe:	20 c0       	rjmp	.+64     	; 0xe40 <power_control+0x1d6>
            flag_guard = 0;
     e00:	10 92 13 03 	sts	0x0313, r1	; 0x800313 <flag_guard.6>
     e04:	f3 cf       	rjmp	.-26     	; 0xdec <power_control+0x182>
        if(flag_time_off == 1 && time_stamp_off > (uint32_t)60*get_interval_power_off_report())
     e06:	0e 94 96 10 	call	0x212c	; 0x212c <get_interval_power_off_report>
     e0a:	28 2f       	mov	r18, r24
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	ac e3       	ldi	r26, 0x3C	; 60
     e10:	b0 e0       	ldi	r27, 0x00	; 0
     e12:	0e 94 7a 2f 	call	0x5ef4	; 0x5ef4 <__umulhisi3>
     e16:	69 83       	std	Y+1, r22	; 0x01
     e18:	7a 83       	std	Y+2, r23	; 0x02
     e1a:	8b 83       	std	Y+3, r24	; 0x03
     e1c:	9c 83       	std	Y+4, r25	; 0x04
     e1e:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <time_stamp_off.1>
     e22:	90 91 0b 03 	lds	r25, 0x030B	; 0x80030b <time_stamp_off.1+0x1>
     e26:	a0 91 0c 03 	lds	r26, 0x030C	; 0x80030c <time_stamp_off.1+0x2>
     e2a:	b0 91 0d 03 	lds	r27, 0x030D	; 0x80030d <time_stamp_off.1+0x3>
     e2e:	29 81       	ldd	r18, Y+1	; 0x01
     e30:	3a 81       	ldd	r19, Y+2	; 0x02
     e32:	4b 81       	ldd	r20, Y+3	; 0x03
     e34:	5c 81       	ldd	r21, Y+4	; 0x04
     e36:	28 17       	cp	r18, r24
     e38:	39 07       	cpc	r19, r25
     e3a:	4a 07       	cpc	r20, r26
     e3c:	5b 07       	cpc	r21, r27
     e3e:	d0 f6       	brcc	.-76     	; 0xdf4 <power_control+0x18a>
            report_off = 0;
     e40:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <report_off.0>
            flag_time_on = 0;
     e44:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <flag_time_on.5>
            flag_time_off = 0;
     e48:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <flag_time_off.2>
            send_sms_admins("External power is off.");
     e4c:	82 e2       	ldi	r24, 0x22	; 34
     e4e:	92 e0       	ldi	r25, 0x02	; 2
     e50:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <send_sms_admins>
     e54:	41 cf       	rjmp	.-382    	; 0xcd8 <power_control+0x6e>

00000e56 <get_time_without_power_s>:

//*****************************************************************************
uint32_t get_time_without_power_s(void)
{
     e56:	cf 93       	push	r28
     e58:	df 93       	push	r29
     e5a:	00 d0       	rcall	.+0      	; 0xe5c <get_time_without_power_s+0x6>
     e5c:	00 d0       	rcall	.+0      	; 0xe5e <get_time_without_power_s+0x8>
     e5e:	cd b7       	in	r28, 0x3d	; 61
     e60:	de b7       	in	r29, 0x3e	; 62
    return get_val(time_without_power_s);
     e62:	8f b7       	in	r24, 0x3f	; 63
     e64:	f8 94       	cli
     e66:	20 91 1e 03 	lds	r18, 0x031E	; 0x80031e <time_without_power_s>
     e6a:	30 91 1f 03 	lds	r19, 0x031F	; 0x80031f <time_without_power_s+0x1>
     e6e:	40 91 20 03 	lds	r20, 0x0320	; 0x800320 <time_without_power_s+0x2>
     e72:	50 91 21 03 	lds	r21, 0x0321	; 0x800321 <time_without_power_s+0x3>
     e76:	29 83       	std	Y+1, r18	; 0x01
     e78:	3a 83       	std	Y+2, r19	; 0x02
     e7a:	4b 83       	std	Y+3, r20	; 0x03
     e7c:	5c 83       	std	Y+4, r21	; 0x04
     e7e:	8f bf       	out	0x3f, r24	; 63
}
     e80:	69 81       	ldd	r22, Y+1	; 0x01
     e82:	7a 81       	ldd	r23, Y+2	; 0x02
     e84:	8b 81       	ldd	r24, Y+3	; 0x03
     e86:	9c 81       	ldd	r25, Y+4	; 0x04
     e88:	0f 90       	pop	r0
     e8a:	0f 90       	pop	r0
     e8c:	0f 90       	pop	r0
     e8e:	0f 90       	pop	r0
     e90:	df 91       	pop	r29
     e92:	cf 91       	pop	r28
     e94:	08 95       	ret

00000e96 <send_alarm_signal_if_needed>:

//*******************************************************************************************************************
static void send_alarm_signal_if_needed(void);
static void send_alarm_signal_if_needed(void)
{
    if(flag_alarm == 0)
     e96:	e0 91 42 03 	lds	r30, 0x0342	; 0x800342 <flag_alarm>
     e9a:	ee 23       	and	r30, r30
     e9c:	a9 f0       	breq	.+42     	; 0xec8 <send_alarm_signal_if_needed+0x32>
    {
        return;
    }

    flag_for_send = flag_alarm;
     e9e:	e0 93 40 03 	sts	0x0340, r30	; 0x800340 <flag_for_send>

    switch(flag_alarm)
     ea2:	e1 50       	subi	r30, 0x01	; 1
     ea4:	e7 30       	cpi	r30, 0x07	; 7
     ea6:	48 f4       	brcc	.+18     	; 0xeba <send_alarm_signal_if_needed+0x24>
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	e2 57       	subi	r30, 0x72	; 114
     eac:	f8 4c       	sbci	r31, 0xC8	; 200
     eae:	0c 94 6c 2f 	jmp	0x5ed8	; 0x5ed8 <__tablejump2__>
    {
    case 0:
        break;
    case FLAG_ALARM_FRONT:
        alarm_play_file(AUDIO_ALARM_FRONT);
     eb2:	89 e3       	ldi	r24, 0x39	; 57
     eb4:	92 e0       	ldi	r25, 0x02	; 2
     eb6:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <alarm_play_file>
        alarm_play_file(AUDIO_ALARM_TEMPERATURE);
        break;
    default:
        break;
    }
    flag_alarm = 0;
     eba:	10 92 42 03 	sts	0x0342, r1	; 0x800342 <flag_alarm>
    set_guard(0);
     ebe:	80 e0       	ldi	r24, 0x00	; 0
     ec0:	0e 94 a5 10 	call	0x214a	; 0x214a <set_guard>
    stop_buzzer();
     ec4:	0e 94 ed 2c 	call	0x59da	; 0x59da <stop_buzzer>
}
     ec8:	08 95       	ret
        alarm_play_file(AUDIO_ALARM_COURTYARD);
     eca:	81 e4       	ldi	r24, 0x41	; 65
     ecc:	92 e0       	ldi	r25, 0x02	; 2
     ece:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <alarm_play_file>
        break;
     ed2:	f3 cf       	rjmp	.-26     	; 0xeba <send_alarm_signal_if_needed+0x24>
        alarm_play_file(AUDIO_ALARM_COOK_ROOM);
     ed4:	88 e4       	ldi	r24, 0x48	; 72
     ed6:	92 e0       	ldi	r25, 0x02	; 2
     ed8:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <alarm_play_file>
        break;
     edc:	ee cf       	rjmp	.-36     	; 0xeba <send_alarm_signal_if_needed+0x24>
        alarm_play_file(AUDIO_ALARM_SIDE);
     ede:	8e e4       	ldi	r24, 0x4E	; 78
     ee0:	92 e0       	ldi	r25, 0x02	; 2
     ee2:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <alarm_play_file>
        break;
     ee6:	e9 cf       	rjmp	.-46     	; 0xeba <send_alarm_signal_if_needed+0x24>
        alarm_play_file(AUDIO_ALARM_SMOKE);
     ee8:	85 e5       	ldi	r24, 0x55	; 85
     eea:	92 e0       	ldi	r25, 0x02	; 2
     eec:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <alarm_play_file>
        break;
     ef0:	e4 cf       	rjmp	.-56     	; 0xeba <send_alarm_signal_if_needed+0x24>
        alarm_play_file(AUDIO_ALARM_TEMPERATURE);
     ef2:	8a e5       	ldi	r24, 0x5A	; 90
     ef4:	92 e0       	ldi	r25, 0x02	; 2
     ef6:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <alarm_play_file>
        break;
     efa:	df cf       	rjmp	.-66     	; 0xeba <send_alarm_signal_if_needed+0x24>
        alarm_play_file(AUDIO_ALARM_TEMPERATURE);
     efc:	8a e5       	ldi	r24, 0x5A	; 90
     efe:	92 e0       	ldi	r25, 0x02	; 2
     f00:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <alarm_play_file>
        break;
     f04:	da cf       	rjmp	.-76     	; 0xeba <send_alarm_signal_if_needed+0x24>

00000f06 <check_guard>:
        }
    }
}
//*******************************************************************************************************************
void check_guard(void)
{
     f06:	cf 92       	push	r12
     f08:	df 92       	push	r13
     f0a:	ef 92       	push	r14
     f0c:	ff 92       	push	r15
     f0e:	cf 93       	push	r28
     f10:	df 93       	push	r29
     f12:	00 d0       	rcall	.+0      	; 0xf14 <check_guard+0xe>
     f14:	00 d0       	rcall	.+0      	; 0xf16 <check_guard+0x10>
     f16:	00 d0       	rcall	.+0      	; 0xf18 <check_guard+0x12>
     f18:	cd b7       	in	r28, 0x3d	; 61
     f1a:	de b7       	in	r29, 0x3e	; 62
    if(get_guard())
     f1c:	0e 94 a2 10 	call	0x2144	; 0x2144 <get_guard>
     f20:	88 23       	and	r24, r24
     f22:	09 f4       	brne	.+2      	; 0xf26 <check_guard+0x20>
     f24:	fc c0       	rjmp	.+504    	; 0x111e <check_guard+0x218>
    uint8_t motion_d = get_motion_detected();
     f26:	0e 94 b7 20 	call	0x416e	; 0x416e <get_motion_detected>
     f2a:	8d 83       	std	Y+5, r24	; 0x05
    char zone = get_zone_mask();
     f2c:	0e 94 c9 10 	call	0x2192	; 0x2192 <get_zone_mask>
     f30:	8e 83       	std	Y+6, r24	; 0x06
    if(motion_d && flag_alarm == 0)
     f32:	2d 81       	ldd	r18, Y+5	; 0x05
     f34:	22 23       	and	r18, r18
     f36:	21 f0       	breq	.+8      	; 0xf40 <check_guard+0x3a>
     f38:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <flag_alarm>
     f3c:	88 23       	and	r24, r24
     f3e:	e9 f0       	breq	.+58     	; 0xf7a <check_guard+0x74>
    if(motion_cnt == 1 && (get_time_ms() > (first_time_stamp + get_mtime_sens())))
     f40:	80 91 3b 03 	lds	r24, 0x033B	; 0x80033b <motion_cnt.21>
     f44:	81 30       	cpi	r24, 0x01	; 1
     f46:	09 f4       	brne	.+2      	; 0xf4a <check_guard+0x44>
     f48:	a9 c0       	rjmp	.+338    	; 0x109c <check_guard+0x196>
    if(flag_motion && ((get_time_from_motion_s() > (uint32_t)3600*get_interval_after_motion_m())))
     f4a:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <flag_motion.19>
     f4e:	81 11       	cpse	r24, r1
     f50:	c2 c0       	rjmp	.+388    	; 0x10d6 <check_guard+0x1d0>
    {
        main_guard();
        send_alarm_signal_if_needed();
     f52:	0e 94 4b 07 	call	0xe96	; 0xe96 <send_alarm_signal_if_needed>
    if(!get_guard())
     f56:	0e 94 a2 10 	call	0x2144	; 0x2144 <get_guard>
     f5a:	88 23       	and	r24, r24
     f5c:	09 f4       	brne	.+2      	; 0xf60 <check_guard+0x5a>
     f5e:	37 c2       	rjmp	.+1134   	; 0x13ce <check_guard+0x4c8>
        if(get_single_sensor() == 1)
            single_sens();
        send_alarm_signal_if_needed();
    }
    guard_timer();
}
     f60:	26 96       	adiw	r28, 0x06	; 6
     f62:	0f b6       	in	r0, 0x3f	; 63
     f64:	f8 94       	cli
     f66:	de bf       	out	0x3e, r29	; 62
     f68:	0f be       	out	0x3f, r0	; 63
     f6a:	cd bf       	out	0x3d, r28	; 61
     f6c:	df 91       	pop	r29
     f6e:	cf 91       	pop	r28
     f70:	ff 90       	pop	r15
     f72:	ef 90       	pop	r14
     f74:	df 90       	pop	r13
     f76:	cf 90       	pop	r12
     f78:	08 95       	ret
        if(get_first_m() == 0)
     f7a:	0e 94 c3 10 	call	0x2186	; 0x2186 <get_first_m>
     f7e:	81 11       	cpse	r24, r1
     f80:	21 c0       	rjmp	.+66     	; 0xfc4 <check_guard+0xbe>
            if(motion_cnt == 0)//if first motion - return
     f82:	80 91 3b 03 	lds	r24, 0x033B	; 0x80033b <motion_cnt.21>
     f86:	88 23       	and	r24, r24
     f88:	b1 f1       	breq	.+108    	; 0xff6 <check_guard+0xf0>
        if(motion_cnt == 1 && (get_time_ms() < (first_time_stamp + 1000)))
     f8a:	81 30       	cpi	r24, 0x01	; 1
     f8c:	d9 f4       	brne	.+54     	; 0xfc4 <check_guard+0xbe>
     f8e:	0e 94 09 2c 	call	0x5812	; 0x5812 <get_time_ms>
     f92:	69 83       	std	Y+1, r22	; 0x01
     f94:	7a 83       	std	Y+2, r23	; 0x02
     f96:	8b 83       	std	Y+3, r24	; 0x03
     f98:	9c 83       	std	Y+4, r25	; 0x04
     f9a:	80 91 37 03 	lds	r24, 0x0337	; 0x800337 <first_time_stamp.20>
     f9e:	90 91 38 03 	lds	r25, 0x0338	; 0x800338 <first_time_stamp.20+0x1>
     fa2:	a0 91 39 03 	lds	r26, 0x0339	; 0x800339 <first_time_stamp.20+0x2>
     fa6:	b0 91 3a 03 	lds	r27, 0x033A	; 0x80033a <first_time_stamp.20+0x3>
     faa:	88 51       	subi	r24, 0x18	; 24
     fac:	9c 4f       	sbci	r25, 0xFC	; 252
     fae:	af 4f       	sbci	r26, 0xFF	; 255
     fb0:	bf 4f       	sbci	r27, 0xFF	; 255
     fb2:	29 81       	ldd	r18, Y+1	; 0x01
     fb4:	3a 81       	ldd	r19, Y+2	; 0x02
     fb6:	4b 81       	ldd	r20, Y+3	; 0x03
     fb8:	5c 81       	ldd	r21, Y+4	; 0x04
     fba:	28 17       	cp	r18, r24
     fbc:	39 07       	cpc	r19, r25
     fbe:	4a 07       	cpc	r20, r26
     fc0:	5b 07       	cpc	r21, r27
     fc2:	38 f2       	brcs	.-114    	; 0xf52 <check_guard+0x4c>
        motion_cnt = 0;
     fc4:	10 92 3b 03 	sts	0x033B, r1	; 0x80033b <motion_cnt.21>
        set_time_from_motion_s(0); // обнуляем таймер с момента последнего зафиксированного движения
     fc8:	80 e0       	ldi	r24, 0x00	; 0
     fca:	0e 94 cc 2d 	call	0x5b98	; 0x5b98 <set_time_from_motion_s>
        flag_motion = 1;
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	80 93 36 03 	sts	0x0336, r24	; 0x800336 <flag_motion.19>
        buzzer_non_block(60000); //50sec
     fd4:	80 e6       	ldi	r24, 0x60	; 96
     fd6:	9a ee       	ldi	r25, 0xEA	; 234
     fd8:	0e 94 e0 2c 	call	0x59c0	; 0x59c0 <buzzer_non_block>
        if(motion_d & FRONT_SENSOR_MASK)
     fdc:	3d 81       	ldd	r19, Y+5	; 0x05
     fde:	30 ff       	sbrs	r19, 0
     fe0:	23 c0       	rjmp	.+70     	; 0x1028 <check_guard+0x122>
            if(zone == 0xB0 || zone == 0xD0 || zone == 0x70)
     fe2:	4e 81       	ldd	r20, Y+6	; 0x06
     fe4:	40 37       	cpi	r20, 0x70	; 112
     fe6:	a9 f0       	breq	.+42     	; 0x1012 <check_guard+0x10c>
                set_zone_mask(0xE0);
     fe8:	80 ee       	ldi	r24, 0xE0	; 224
     fea:	0e 94 cc 10 	call	0x2198	; 0x2198 <set_zone_mask>
            flag_alarm = FLAG_ALARM_FRONT;
     fee:	83 e0       	ldi	r24, 0x03	; 3
     ff0:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <flag_alarm>
     ff4:	a5 cf       	rjmp	.-182    	; 0xf40 <check_guard+0x3a>
                first_time_stamp = get_time_ms();// sensitivity 3 sec
     ff6:	0e 94 09 2c 	call	0x5812	; 0x5812 <get_time_ms>
     ffa:	60 93 37 03 	sts	0x0337, r22	; 0x800337 <first_time_stamp.20>
     ffe:	70 93 38 03 	sts	0x0338, r23	; 0x800338 <first_time_stamp.20+0x1>
    1002:	80 93 39 03 	sts	0x0339, r24	; 0x800339 <first_time_stamp.20+0x2>
    1006:	90 93 3a 03 	sts	0x033A, r25	; 0x80033a <first_time_stamp.20+0x3>
                motion_cnt = 1;
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	80 93 3b 03 	sts	0x033B, r24	; 0x80033b <motion_cnt.21>
                return;
    1010:	a0 cf       	rjmp	.-192    	; 0xf52 <check_guard+0x4c>
                set_zone_mask(0xF0);
    1012:	80 ef       	ldi	r24, 0xF0	; 240
    1014:	0e 94 cc 10 	call	0x2198	; 0x2198 <set_zone_mask>
                set_guard(0);
    1018:	80 e0       	ldi	r24, 0x00	; 0
    101a:	0e 94 a5 10 	call	0x214a	; 0x214a <set_guard>
                EEPROM_update();
    101e:	0e 94 81 10 	call	0x2102	; 0x2102 <EEPROM_update>
                flag_motion = 0;
    1022:	10 92 36 03 	sts	0x0336, r1	; 0x800336 <flag_motion.19>
    1026:	e3 cf       	rjmp	.-58     	; 0xfee <check_guard+0xe8>
        else if(motion_d & INSIDE_1_SENSOR_MASK)
    1028:	5d 81       	ldd	r21, Y+5	; 0x05
    102a:	51 ff       	sbrs	r21, 1
    102c:	15 c0       	rjmp	.+42     	; 0x1058 <check_guard+0x152>
            if(zone == 0xE0 || zone == 0xB0 || zone == 0x70)
    102e:	8e 81       	ldd	r24, Y+6	; 0x06
    1030:	80 37       	cpi	r24, 0x70	; 112
    1032:	39 f0       	breq	.+14     	; 0x1042 <check_guard+0x13c>
                set_zone_mask(0xD0);
    1034:	80 ed       	ldi	r24, 0xD0	; 208
    1036:	0e 94 cc 10 	call	0x2198	; 0x2198 <set_zone_mask>
            flag_alarm = FLAG_ALARM_COURTYARD;
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <flag_alarm>
    1040:	7f cf       	rjmp	.-258    	; 0xf40 <check_guard+0x3a>
                set_zone_mask(0xF0);
    1042:	80 ef       	ldi	r24, 0xF0	; 240
    1044:	0e 94 cc 10 	call	0x2198	; 0x2198 <set_zone_mask>
                set_guard(0);
    1048:	80 e0       	ldi	r24, 0x00	; 0
    104a:	0e 94 a5 10 	call	0x214a	; 0x214a <set_guard>
                EEPROM_update();
    104e:	0e 94 81 10 	call	0x2102	; 0x2102 <EEPROM_update>
                flag_motion = 0;
    1052:	10 92 36 03 	sts	0x0336, r1	; 0x800336 <flag_motion.19>
    1056:	f1 cf       	rjmp	.-30     	; 0x103a <check_guard+0x134>
        else if(motion_d & INSIDE_2_SENSOR_MASK)
    1058:	9d 81       	ldd	r25, Y+5	; 0x05
    105a:	92 ff       	sbrs	r25, 2
    105c:	15 c0       	rjmp	.+42     	; 0x1088 <check_guard+0x182>
            if(zone == 0xD0 || zone == 0xE0 || zone == 0x70)
    105e:	ae 81       	ldd	r26, Y+6	; 0x06
    1060:	a0 37       	cpi	r26, 0x70	; 112
    1062:	39 f0       	breq	.+14     	; 0x1072 <check_guard+0x16c>
                set_zone_mask(0xB0);
    1064:	80 eb       	ldi	r24, 0xB0	; 176
    1066:	0e 94 cc 10 	call	0x2198	; 0x2198 <set_zone_mask>
            flag_alarm = FLAG_ALARM_COOK_ROOM;
    106a:	82 e0       	ldi	r24, 0x02	; 2
    106c:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <flag_alarm>
    1070:	67 cf       	rjmp	.-306    	; 0xf40 <check_guard+0x3a>
                set_zone_mask(0xF0);
    1072:	80 ef       	ldi	r24, 0xF0	; 240
    1074:	0e 94 cc 10 	call	0x2198	; 0x2198 <set_zone_mask>
                set_guard(0);
    1078:	80 e0       	ldi	r24, 0x00	; 0
    107a:	0e 94 a5 10 	call	0x214a	; 0x214a <set_guard>
                flag_motion = 0;
    107e:	10 92 36 03 	sts	0x0336, r1	; 0x800336 <flag_motion.19>
                EEPROM_update();
    1082:	0e 94 81 10 	call	0x2102	; 0x2102 <EEPROM_update>
    1086:	f1 cf       	rjmp	.-30     	; 0x106a <check_guard+0x164>
        else if(motion_d & SIDE_SENSOR_MASK)
    1088:	bd 81       	ldd	r27, Y+5	; 0x05
    108a:	b3 ff       	sbrs	r27, 3
    108c:	59 cf       	rjmp	.-334    	; 0xf40 <check_guard+0x3a>
                set_zone_mask(0x70);
    108e:	80 e7       	ldi	r24, 0x70	; 112
    1090:	0e 94 cc 10 	call	0x2198	; 0x2198 <set_zone_mask>
            flag_alarm = FLAG_ALARM_SIDE;
    1094:	84 e0       	ldi	r24, 0x04	; 4
    1096:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <flag_alarm>
    109a:	52 cf       	rjmp	.-348    	; 0xf40 <check_guard+0x3a>
    if(motion_cnt == 1 && (get_time_ms() > (first_time_stamp + get_mtime_sens())))
    109c:	0e 94 09 2c 	call	0x5812	; 0x5812 <get_time_ms>
    10a0:	c6 2e       	mov	r12, r22
    10a2:	d7 2e       	mov	r13, r23
    10a4:	e8 2e       	mov	r14, r24
    10a6:	f9 2e       	mov	r15, r25
    10a8:	0e 94 cf 10 	call	0x219e	; 0x219e <get_mtime_sens>
    10ac:	40 91 37 03 	lds	r20, 0x0337	; 0x800337 <first_time_stamp.20>
    10b0:	50 91 38 03 	lds	r21, 0x0338	; 0x800338 <first_time_stamp.20+0x1>
    10b4:	60 91 39 03 	lds	r22, 0x0339	; 0x800339 <first_time_stamp.20+0x2>
    10b8:	70 91 3a 03 	lds	r23, 0x033A	; 0x80033a <first_time_stamp.20+0x3>
    10bc:	48 0f       	add	r20, r24
    10be:	59 1f       	adc	r21, r25
    10c0:	61 1d       	adc	r22, r1
    10c2:	71 1d       	adc	r23, r1
    10c4:	4c 15       	cp	r20, r12
    10c6:	5d 05       	cpc	r21, r13
    10c8:	6e 05       	cpc	r22, r14
    10ca:	7f 05       	cpc	r23, r15
    10cc:	08 f0       	brcs	.+2      	; 0x10d0 <check_guard+0x1ca>
    10ce:	3d cf       	rjmp	.-390    	; 0xf4a <check_guard+0x44>
        motion_cnt = 0;
    10d0:	10 92 3b 03 	sts	0x033B, r1	; 0x80033b <motion_cnt.21>
        return;
    10d4:	3e cf       	rjmp	.-388    	; 0xf52 <check_guard+0x4c>
    if(flag_motion && ((get_time_from_motion_s() > (uint32_t)3600*get_interval_after_motion_m())))
    10d6:	0e 94 db 2d 	call	0x5bb6	; 0x5bb6 <get_time_from_motion_s>
    10da:	c6 2e       	mov	r12, r22
    10dc:	d7 2e       	mov	r13, r23
    10de:	e8 2e       	mov	r14, r24
    10e0:	f9 2e       	mov	r15, r25
    10e2:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <get_interval_after_motion_m>
    10e6:	9c 01       	movw	r18, r24
    10e8:	a0 e1       	ldi	r26, 0x10	; 16
    10ea:	be e0       	ldi	r27, 0x0E	; 14
    10ec:	0e 94 7a 2f 	call	0x5ef4	; 0x5ef4 <__umulhisi3>
    10f0:	6c 15       	cp	r22, r12
    10f2:	7d 05       	cpc	r23, r13
    10f4:	8e 05       	cpc	r24, r14
    10f6:	9f 05       	cpc	r25, r15
    10f8:	08 f0       	brcs	.+2      	; 0x10fc <check_guard+0x1f6>
    10fa:	2b cf       	rjmp	.-426    	; 0xf52 <check_guard+0x4c>
        flag_motion = 0;
    10fc:	10 92 36 03 	sts	0x0336, r1	; 0x800336 <flag_motion.19>
        set_zone_mask(0xF0);
    1100:	80 ef       	ldi	r24, 0xF0	; 240
    1102:	0e 94 cc 10 	call	0x2198	; 0x2198 <set_zone_mask>
        flag_for_send = 0;
    1106:	10 92 40 03 	sts	0x0340, r1	; 0x800340 <flag_for_send>
        if(get_accept_sms() == 1)
    110a:	0e 94 93 10 	call	0x2126	; 0x2126 <get_accept_sms>
    110e:	81 30       	cpi	r24, 0x01	; 1
    1110:	09 f0       	breq	.+2      	; 0x1114 <check_guard+0x20e>
    1112:	1f cf       	rjmp	.-450    	; 0xf52 <check_guard+0x4c>
            send_sms_admins("Guard is recovery after motion timer.");
    1114:	80 e6       	ldi	r24, 0x60	; 96
    1116:	92 e0       	ldi	r25, 0x02	; 2
    1118:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <send_sms_admins>
    111c:	1a cf       	rjmp	.-460    	; 0xf52 <check_guard+0x4c>
    else if(get_local_guard())
    111e:	0e 94 a8 10 	call	0x2150	; 0x2150 <get_local_guard>
    1122:	88 23       	and	r24, r24
    1124:	09 f4       	brne	.+2      	; 0x1128 <check_guard+0x222>
    1126:	17 cf       	rjmp	.-466    	; 0xf56 <check_guard+0x50>
    uint8_t motion_d = get_motion_detected();
    1128:	0e 94 b7 20 	call	0x416e	; 0x416e <get_motion_detected>
    112c:	8d 83       	std	Y+5, r24	; 0x05
    if(motion_d && flag_alarm == 0)
    112e:	88 23       	and	r24, r24
    1130:	21 f0       	breq	.+8      	; 0x113a <check_guard+0x234>
    1132:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <flag_alarm>
    1136:	88 23       	and	r24, r24
    1138:	91 f0       	breq	.+36     	; 0x115e <check_guard+0x258>
    if(motion_cnt == 1 && (get_time_ms() > (first_time_stamp + 7000)))
    113a:	80 91 35 03 	lds	r24, 0x0335	; 0x800335 <motion_cnt.18>
    113e:	81 30       	cpi	r24, 0x01	; 1
    1140:	09 f4       	brne	.+2      	; 0x1144 <check_guard+0x23e>
    1142:	6f c0       	rjmp	.+222    	; 0x1222 <check_guard+0x31c>
    if(flag_motion_inside == 1 && get_time_from_motion_s() > TIMER_RST_LOCAL)
    1144:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <flag_motion_inside>
    1148:	81 30       	cpi	r24, 0x01	; 1
    114a:	09 f4       	brne	.+2      	; 0x114e <check_guard+0x248>
    114c:	89 c0       	rjmp	.+274    	; 0x1260 <check_guard+0x35a>
        if(get_single_sensor() == 1)
    114e:	0e 94 05 11 	call	0x220a	; 0x220a <get_single_sensor>
    1152:	81 30       	cpi	r24, 0x01	; 1
    1154:	09 f4       	brne	.+2      	; 0x1158 <check_guard+0x252>
    1156:	93 c0       	rjmp	.+294    	; 0x127e <check_guard+0x378>
        send_alarm_signal_if_needed();
    1158:	0e 94 4b 07 	call	0xe96	; 0xe96 <send_alarm_signal_if_needed>
    115c:	fc ce       	rjmp	.-520    	; 0xf56 <check_guard+0x50>
        if(get_first_m() == 0)
    115e:	0e 94 c3 10 	call	0x2186	; 0x2186 <get_first_m>
    1162:	81 11       	cpse	r24, r1
    1164:	30 c0       	rjmp	.+96     	; 0x11c6 <check_guard+0x2c0>
            if(motion_cnt == 0)//if first motion - return
    1166:	80 91 35 03 	lds	r24, 0x0335	; 0x800335 <motion_cnt.18>
    116a:	88 23       	and	r24, r24
    116c:	f1 f0       	breq	.+60     	; 0x11aa <check_guard+0x2a4>
        if(motion_cnt == 1 && (get_time_ms() < (first_time_stamp + 1000)))
    116e:	81 30       	cpi	r24, 0x01	; 1
    1170:	61 f5       	brne	.+88     	; 0x11ca <check_guard+0x2c4>
    1172:	0e 94 09 2c 	call	0x5812	; 0x5812 <get_time_ms>
    1176:	69 83       	std	Y+1, r22	; 0x01
    1178:	7a 83       	std	Y+2, r23	; 0x02
    117a:	8b 83       	std	Y+3, r24	; 0x03
    117c:	9c 83       	std	Y+4, r25	; 0x04
    117e:	80 91 31 03 	lds	r24, 0x0331	; 0x800331 <first_time_stamp.17>
    1182:	90 91 32 03 	lds	r25, 0x0332	; 0x800332 <first_time_stamp.17+0x1>
    1186:	a0 91 33 03 	lds	r26, 0x0333	; 0x800333 <first_time_stamp.17+0x2>
    118a:	b0 91 34 03 	lds	r27, 0x0334	; 0x800334 <first_time_stamp.17+0x3>
    118e:	88 51       	subi	r24, 0x18	; 24
    1190:	9c 4f       	sbci	r25, 0xFC	; 252
    1192:	af 4f       	sbci	r26, 0xFF	; 255
    1194:	bf 4f       	sbci	r27, 0xFF	; 255
    1196:	29 81       	ldd	r18, Y+1	; 0x01
    1198:	3a 81       	ldd	r19, Y+2	; 0x02
    119a:	4b 81       	ldd	r20, Y+3	; 0x03
    119c:	5c 81       	ldd	r21, Y+4	; 0x04
    119e:	28 17       	cp	r18, r24
    11a0:	39 07       	cpc	r19, r25
    11a2:	4a 07       	cpc	r20, r26
    11a4:	5b 07       	cpc	r21, r27
    11a6:	88 f4       	brcc	.+34     	; 0x11ca <check_guard+0x2c4>
    11a8:	d2 cf       	rjmp	.-92     	; 0x114e <check_guard+0x248>
                first_time_stamp = get_time_ms();
    11aa:	0e 94 09 2c 	call	0x5812	; 0x5812 <get_time_ms>
    11ae:	60 93 31 03 	sts	0x0331, r22	; 0x800331 <first_time_stamp.17>
    11b2:	70 93 32 03 	sts	0x0332, r23	; 0x800332 <first_time_stamp.17+0x1>
    11b6:	80 93 33 03 	sts	0x0333, r24	; 0x800333 <first_time_stamp.17+0x2>
    11ba:	90 93 34 03 	sts	0x0334, r25	; 0x800334 <first_time_stamp.17+0x3>
                motion_cnt = 1;
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	80 93 35 03 	sts	0x0335, r24	; 0x800335 <motion_cnt.18>
                return;
    11c4:	c4 cf       	rjmp	.-120    	; 0x114e <check_guard+0x248>
        else motion_cnt = 0;
    11c6:	10 92 35 03 	sts	0x0335, r1	; 0x800335 <motion_cnt.18>
        set_time_from_motion_s(0);
    11ca:	80 e0       	ldi	r24, 0x00	; 0
    11cc:	0e 94 cc 2d 	call	0x5b98	; 0x5b98 <set_time_from_motion_s>
        if((motion_d & INSIDE_1_SENSOR_MASK) || (motion_d & INSIDE_2_SENSOR_MASK))
    11d0:	8d 81       	ldd	r24, Y+5	; 0x05
    11d2:	86 70       	andi	r24, 0x06	; 6
    11d4:	31 f0       	breq	.+12     	; 0x11e2 <check_guard+0x2dc>
            flag_motion_inside = 1;
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <flag_motion_inside>
            motion_cnt = 0;
    11dc:	10 92 35 03 	sts	0x0335, r1	; 0x800335 <motion_cnt.18>
    if(motion_cnt == 1 && (get_time_ms() > (first_time_stamp + 7000)))
    11e0:	b1 cf       	rjmp	.-158    	; 0x1144 <check_guard+0x23e>
        if(!flag_motion_inside)
    11e2:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <flag_motion_inside>
    11e6:	81 11       	cpse	r24, r1
    11e8:	a8 cf       	rjmp	.-176    	; 0x113a <check_guard+0x234>
            buzzer_non_block(10000);
    11ea:	80 e1       	ldi	r24, 0x10	; 16
    11ec:	97 e2       	ldi	r25, 0x27	; 39
    11ee:	0e 94 e0 2c 	call	0x59c0	; 0x59c0 <buzzer_non_block>
            flag_motion_inside = 1;
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <flag_motion_inside>
            if(motion_d & FRONT_SENSOR_MASK)
    11f8:	3d 81       	ldd	r19, Y+5	; 0x05
    11fa:	30 ff       	sbrs	r19, 0
    11fc:	05 c0       	rjmp	.+10     	; 0x1208 <check_guard+0x302>
                flag_alarm = FLAG_ALARM_FRONT;
    11fe:	83 e0       	ldi	r24, 0x03	; 3
    1200:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <flag_alarm>
                flag_motion_inside = FLAG_ALARM_FRONT;
    1204:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <flag_motion_inside>
            if(motion_d & SIDE_SENSOR_MASK)
    1208:	4d 81       	ldd	r20, Y+5	; 0x05
    120a:	43 ff       	sbrs	r20, 3
    120c:	96 cf       	rjmp	.-212    	; 0x113a <check_guard+0x234>
                flag_alarm = FLAG_ALARM_SIDE;
    120e:	84 e0       	ldi	r24, 0x04	; 4
    1210:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <flag_alarm>
                flag_motion_inside = FLAG_ALARM_SIDE;
    1214:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <flag_motion_inside>
    if(motion_cnt == 1 && (get_time_ms() > (first_time_stamp + 7000)))
    1218:	80 91 35 03 	lds	r24, 0x0335	; 0x800335 <motion_cnt.18>
    121c:	81 30       	cpi	r24, 0x01	; 1
    121e:	09 f0       	breq	.+2      	; 0x1222 <check_guard+0x31c>
    1220:	96 cf       	rjmp	.-212    	; 0x114e <check_guard+0x248>
    1222:	0e 94 09 2c 	call	0x5812	; 0x5812 <get_time_ms>
    1226:	69 83       	std	Y+1, r22	; 0x01
    1228:	7a 83       	std	Y+2, r23	; 0x02
    122a:	8b 83       	std	Y+3, r24	; 0x03
    122c:	9c 83       	std	Y+4, r25	; 0x04
    122e:	80 91 31 03 	lds	r24, 0x0331	; 0x800331 <first_time_stamp.17>
    1232:	90 91 32 03 	lds	r25, 0x0332	; 0x800332 <first_time_stamp.17+0x1>
    1236:	a0 91 33 03 	lds	r26, 0x0333	; 0x800333 <first_time_stamp.17+0x2>
    123a:	b0 91 34 03 	lds	r27, 0x0334	; 0x800334 <first_time_stamp.17+0x3>
    123e:	88 5a       	subi	r24, 0xA8	; 168
    1240:	94 4e       	sbci	r25, 0xE4	; 228
    1242:	af 4f       	sbci	r26, 0xFF	; 255
    1244:	bf 4f       	sbci	r27, 0xFF	; 255
    1246:	29 81       	ldd	r18, Y+1	; 0x01
    1248:	3a 81       	ldd	r19, Y+2	; 0x02
    124a:	4b 81       	ldd	r20, Y+3	; 0x03
    124c:	5c 81       	ldd	r21, Y+4	; 0x04
    124e:	82 17       	cp	r24, r18
    1250:	93 07       	cpc	r25, r19
    1252:	a4 07       	cpc	r26, r20
    1254:	b5 07       	cpc	r27, r21
    1256:	08 f0       	brcs	.+2      	; 0x125a <check_guard+0x354>
    1258:	75 cf       	rjmp	.-278    	; 0x1144 <check_guard+0x23e>
        motion_cnt = 0;
    125a:	10 92 35 03 	sts	0x0335, r1	; 0x800335 <motion_cnt.18>
        return;
    125e:	77 cf       	rjmp	.-274    	; 0x114e <check_guard+0x248>
    if(flag_motion_inside == 1 && get_time_from_motion_s() > TIMER_RST_LOCAL)
    1260:	0e 94 db 2d 	call	0x5bb6	; 0x5bb6 <get_time_from_motion_s>
    1264:	69 35       	cpi	r22, 0x59	; 89
    1266:	72 40       	sbci	r23, 0x02	; 2
    1268:	81 05       	cpc	r24, r1
    126a:	91 05       	cpc	r25, r1
    126c:	08 f4       	brcc	.+2      	; 0x1270 <check_guard+0x36a>
    126e:	6f cf       	rjmp	.-290    	; 0x114e <check_guard+0x248>
        beep();
    1270:	0e 94 c4 2b 	call	0x5788	; 0x5788 <beep>
        flag_motion_inside = 0;
    1274:	10 92 3c 03 	sts	0x033C, r1	; 0x80033c <flag_motion_inside>
        flag_for_send = 0;
    1278:	10 92 40 03 	sts	0x0340, r1	; 0x800340 <flag_for_send>
    127c:	68 cf       	rjmp	.-304    	; 0x114e <check_guard+0x248>
    uint8_t motion_d = get_single_motion_detected();
    127e:	0e 94 79 20 	call	0x40f2	; 0x40f2 <get_single_motion_detected>
    if(motion_d && flag_alarm == 0)
    1282:	88 23       	and	r24, r24
    1284:	21 f0       	breq	.+8      	; 0x128e <check_guard+0x388>
    1286:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <flag_alarm>
    128a:	88 23       	and	r24, r24
    128c:	99 f1       	breq	.+102    	; 0x12f4 <check_guard+0x3ee>
    if(motion_cnt == 1 && (get_time_ms() > (first_time_stamp + 10000)))
    128e:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <motion_cnt.16>
    1292:	81 30       	cpi	r24, 0x01	; 1
    1294:	09 f4       	brne	.+2      	; 0x1298 <check_guard+0x392>
    1296:	5f c0       	rjmp	.+190    	; 0x1356 <check_guard+0x450>
    if(flag_motion && (get_time_ms() > (first_time_stamp + 300000)))
    1298:	80 91 2b 03 	lds	r24, 0x032B	; 0x80032b <flag_motion.14>
    129c:	88 23       	and	r24, r24
    129e:	09 f4       	brne	.+2      	; 0x12a2 <check_guard+0x39c>
    12a0:	5b cf       	rjmp	.-330    	; 0x1158 <check_guard+0x252>
    12a2:	0e 94 09 2c 	call	0x5812	; 0x5812 <get_time_ms>
    12a6:	69 83       	std	Y+1, r22	; 0x01
    12a8:	7a 83       	std	Y+2, r23	; 0x02
    12aa:	8b 83       	std	Y+3, r24	; 0x03
    12ac:	9c 83       	std	Y+4, r25	; 0x04
    12ae:	80 91 2c 03 	lds	r24, 0x032C	; 0x80032c <first_time_stamp.15>
    12b2:	90 91 2d 03 	lds	r25, 0x032D	; 0x80032d <first_time_stamp.15+0x1>
    12b6:	a0 91 2e 03 	lds	r26, 0x032E	; 0x80032e <first_time_stamp.15+0x2>
    12ba:	b0 91 2f 03 	lds	r27, 0x032F	; 0x80032f <first_time_stamp.15+0x3>
    12be:	80 52       	subi	r24, 0x20	; 32
    12c0:	9c 46       	sbci	r25, 0x6C	; 108
    12c2:	ab 4f       	sbci	r26, 0xFB	; 251
    12c4:	bf 4f       	sbci	r27, 0xFF	; 255
    12c6:	29 81       	ldd	r18, Y+1	; 0x01
    12c8:	3a 81       	ldd	r19, Y+2	; 0x02
    12ca:	4b 81       	ldd	r20, Y+3	; 0x03
    12cc:	5c 81       	ldd	r21, Y+4	; 0x04
    12ce:	82 17       	cp	r24, r18
    12d0:	93 07       	cpc	r25, r19
    12d2:	a4 07       	cpc	r26, r20
    12d4:	b5 07       	cpc	r27, r21
    12d6:	08 f0       	brcs	.+2      	; 0x12da <check_guard+0x3d4>
    12d8:	3f cf       	rjmp	.-386    	; 0x1158 <check_guard+0x252>
        flag_motion = 0;
    12da:	10 92 2b 03 	sts	0x032B, r1	; 0x80032b <flag_motion.14>
        beep();
    12de:	0e 94 c4 2b 	call	0x5788	; 0x5788 <beep>
        delay_ms(200);
    12e2:	88 ec       	ldi	r24, 0xC8	; 200
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
        beep();
    12ea:	0e 94 c4 2b 	call	0x5788	; 0x5788 <beep>
        flag_for_send = 0;
    12ee:	10 92 40 03 	sts	0x0340, r1	; 0x800340 <flag_for_send>
    12f2:	32 cf       	rjmp	.-412    	; 0x1158 <check_guard+0x252>
        if(get_first_m() == 0)
    12f4:	0e 94 c3 10 	call	0x2186	; 0x2186 <get_first_m>
    12f8:	81 11       	cpse	r24, r1
    12fa:	5a c0       	rjmp	.+180    	; 0x13b0 <check_guard+0x4aa>
            if(motion_cnt == 0)//if first motion - return
    12fc:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <motion_cnt.16>
    1300:	88 23       	and	r24, r24
    1302:	09 f4       	brne	.+2      	; 0x1306 <check_guard+0x400>
    1304:	47 c0       	rjmp	.+142    	; 0x1394 <check_guard+0x48e>
        if(motion_cnt == 1 && (get_time_ms() < (first_time_stamp + 2100)))
    1306:	81 30       	cpi	r24, 0x01	; 1
    1308:	09 f0       	breq	.+2      	; 0x130c <check_guard+0x406>
    130a:	54 c0       	rjmp	.+168    	; 0x13b4 <check_guard+0x4ae>
    130c:	0e 94 09 2c 	call	0x5812	; 0x5812 <get_time_ms>
    1310:	69 83       	std	Y+1, r22	; 0x01
    1312:	7a 83       	std	Y+2, r23	; 0x02
    1314:	8b 83       	std	Y+3, r24	; 0x03
    1316:	9c 83       	std	Y+4, r25	; 0x04
    1318:	80 91 2c 03 	lds	r24, 0x032C	; 0x80032c <first_time_stamp.15>
    131c:	90 91 2d 03 	lds	r25, 0x032D	; 0x80032d <first_time_stamp.15+0x1>
    1320:	a0 91 2e 03 	lds	r26, 0x032E	; 0x80032e <first_time_stamp.15+0x2>
    1324:	b0 91 2f 03 	lds	r27, 0x032F	; 0x80032f <first_time_stamp.15+0x3>
    1328:	8c 5c       	subi	r24, 0xCC	; 204
    132a:	97 4f       	sbci	r25, 0xF7	; 247
    132c:	af 4f       	sbci	r26, 0xFF	; 255
    132e:	bf 4f       	sbci	r27, 0xFF	; 255
    1330:	29 81       	ldd	r18, Y+1	; 0x01
    1332:	3a 81       	ldd	r19, Y+2	; 0x02
    1334:	4b 81       	ldd	r20, Y+3	; 0x03
    1336:	5c 81       	ldd	r21, Y+4	; 0x04
    1338:	28 17       	cp	r18, r24
    133a:	39 07       	cpc	r19, r25
    133c:	4a 07       	cpc	r20, r26
    133e:	5b 07       	cpc	r21, r27
    1340:	08 f4       	brcc	.+2      	; 0x1344 <check_guard+0x43e>
    1342:	0a cf       	rjmp	.-492    	; 0x1158 <check_guard+0x252>
        if(flag_motion == 0)
    1344:	80 91 2b 03 	lds	r24, 0x032B	; 0x80032b <flag_motion.14>
    1348:	88 23       	and	r24, r24
    134a:	c1 f1       	breq	.+112    	; 0x13bc <check_guard+0x4b6>
    if(motion_cnt == 1 && (get_time_ms() > (first_time_stamp + 10000)))
    134c:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <motion_cnt.16>
    1350:	81 30       	cpi	r24, 0x01	; 1
    1352:	09 f0       	breq	.+2      	; 0x1356 <check_guard+0x450>
    1354:	a6 cf       	rjmp	.-180    	; 0x12a2 <check_guard+0x39c>
    1356:	0e 94 09 2c 	call	0x5812	; 0x5812 <get_time_ms>
    135a:	69 83       	std	Y+1, r22	; 0x01
    135c:	7a 83       	std	Y+2, r23	; 0x02
    135e:	8b 83       	std	Y+3, r24	; 0x03
    1360:	9c 83       	std	Y+4, r25	; 0x04
    1362:	80 91 2c 03 	lds	r24, 0x032C	; 0x80032c <first_time_stamp.15>
    1366:	90 91 2d 03 	lds	r25, 0x032D	; 0x80032d <first_time_stamp.15+0x1>
    136a:	a0 91 2e 03 	lds	r26, 0x032E	; 0x80032e <first_time_stamp.15+0x2>
    136e:	b0 91 2f 03 	lds	r27, 0x032F	; 0x80032f <first_time_stamp.15+0x3>
    1372:	80 5f       	subi	r24, 0xF0	; 240
    1374:	98 4d       	sbci	r25, 0xD8	; 216
    1376:	af 4f       	sbci	r26, 0xFF	; 255
    1378:	bf 4f       	sbci	r27, 0xFF	; 255
    137a:	29 81       	ldd	r18, Y+1	; 0x01
    137c:	3a 81       	ldd	r19, Y+2	; 0x02
    137e:	4b 81       	ldd	r20, Y+3	; 0x03
    1380:	5c 81       	ldd	r21, Y+4	; 0x04
    1382:	82 17       	cp	r24, r18
    1384:	93 07       	cpc	r25, r19
    1386:	a4 07       	cpc	r26, r20
    1388:	b5 07       	cpc	r27, r21
    138a:	08 f0       	brcs	.+2      	; 0x138e <check_guard+0x488>
    138c:	85 cf       	rjmp	.-246    	; 0x1298 <check_guard+0x392>
        motion_cnt = 0;
    138e:	10 92 30 03 	sts	0x0330, r1	; 0x800330 <motion_cnt.16>
    1392:	82 cf       	rjmp	.-252    	; 0x1298 <check_guard+0x392>
                first_time_stamp = get_time_ms();
    1394:	0e 94 09 2c 	call	0x5812	; 0x5812 <get_time_ms>
    1398:	60 93 2c 03 	sts	0x032C, r22	; 0x80032c <first_time_stamp.15>
    139c:	70 93 2d 03 	sts	0x032D, r23	; 0x80032d <first_time_stamp.15+0x1>
    13a0:	80 93 2e 03 	sts	0x032E, r24	; 0x80032e <first_time_stamp.15+0x2>
    13a4:	90 93 2f 03 	sts	0x032F, r25	; 0x80032f <first_time_stamp.15+0x3>
                motion_cnt = 1;
    13a8:	81 e0       	ldi	r24, 0x01	; 1
    13aa:	80 93 30 03 	sts	0x0330, r24	; 0x800330 <motion_cnt.16>
                return;
    13ae:	d4 ce       	rjmp	.-600    	; 0x1158 <check_guard+0x252>
        else motion_cnt = 0;
    13b0:	10 92 30 03 	sts	0x0330, r1	; 0x800330 <motion_cnt.16>
        if(flag_motion == 0)
    13b4:	80 91 2b 03 	lds	r24, 0x032B	; 0x80032b <flag_motion.14>
    13b8:	81 11       	cpse	r24, r1
    13ba:	73 cf       	rjmp	.-282    	; 0x12a2 <check_guard+0x39c>
            flag_motion = 1;
    13bc:	81 e0       	ldi	r24, 0x01	; 1
    13be:	80 93 2b 03 	sts	0x032B, r24	; 0x80032b <flag_motion.14>
            beep();
    13c2:	0e 94 c4 2b 	call	0x5788	; 0x5788 <beep>
            flag_alarm = FLAG_ALARM_SINGLE;
    13c6:	88 e0       	ldi	r24, 0x08	; 8
    13c8:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <flag_alarm>
    13cc:	60 cf       	rjmp	.-320    	; 0x128e <check_guard+0x388>
        uint16_t t = get_time_from_button_s();
    13ce:	0e 94 0b 2e 	call	0x5c16	; 0x5c16 <get_time_from_button_s>
    13d2:	89 83       	std	Y+1, r24	; 0x01
    13d4:	9a 83       	std	Y+2, r25	; 0x02
        if(!get_autoguard() && t!=0xFFFF)
    13d6:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <get_autoguard>
    13da:	81 11       	cpse	r24, r1
    13dc:	1c c0       	rjmp	.+56     	; 0x1416 <check_guard+0x510>
    13de:	49 81       	ldd	r20, Y+1	; 0x01
    13e0:	5a 81       	ldd	r21, Y+2	; 0x02
    13e2:	4f 3f       	cpi	r20, 0xFF	; 255
    13e4:	5f 4f       	sbci	r21, 0xFF	; 255
    13e6:	19 f4       	brne	.+6      	; 0x13ee <check_guard+0x4e8>
        if((t > 60*get_interval_after_button_m()) && (t != 0xFFFF))
    13e8:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <get_interval_after_button_m>
    13ec:	b9 cd       	rjmp	.-1166   	; 0xf60 <check_guard+0x5a>
            set_autoguard(1);
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	0e 94 e6 10 	call	0x21cc	; 0x21cc <set_autoguard>
            EEPROM_update();
    13f4:	0e 94 81 10 	call	0x2102	; 0x2102 <EEPROM_update>
        if((t > 60*get_interval_after_button_m()) && (t != 0xFFFF))
    13f8:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <get_interval_after_button_m>
    13fc:	4c e3       	ldi	r20, 0x3C	; 60
    13fe:	48 9f       	mul	r20, r24
    1400:	90 01       	movw	r18, r0
    1402:	49 9f       	mul	r20, r25
    1404:	30 0d       	add	r19, r0
    1406:	11 24       	eor	r1, r1
    1408:	a9 81       	ldd	r26, Y+1	; 0x01
    140a:	ba 81       	ldd	r27, Y+2	; 0x02
    140c:	2a 17       	cp	r18, r26
    140e:	3b 07       	cpc	r19, r27
    1410:	08 f0       	brcs	.+2      	; 0x1414 <check_guard+0x50e>
    1412:	a6 cd       	rjmp	.-1204   	; 0xf60 <check_guard+0x5a>
    1414:	12 c0       	rjmp	.+36     	; 0x143a <check_guard+0x534>
    1416:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <get_interval_after_button_m>
    141a:	4c e3       	ldi	r20, 0x3C	; 60
    141c:	48 9f       	mul	r20, r24
    141e:	90 01       	movw	r18, r0
    1420:	49 9f       	mul	r20, r25
    1422:	30 0d       	add	r19, r0
    1424:	11 24       	eor	r1, r1
    1426:	49 81       	ldd	r20, Y+1	; 0x01
    1428:	5a 81       	ldd	r21, Y+2	; 0x02
    142a:	24 17       	cp	r18, r20
    142c:	35 07       	cpc	r19, r21
    142e:	08 f0       	brcs	.+2      	; 0x1432 <check_guard+0x52c>
    1430:	97 cd       	rjmp	.-1234   	; 0xf60 <check_guard+0x5a>
    1432:	4f 3f       	cpi	r20, 0xFF	; 255
    1434:	5f 4f       	sbci	r21, 0xFF	; 255
    1436:	09 f4       	brne	.+2      	; 0x143a <check_guard+0x534>
    1438:	93 cd       	rjmp	.-1242   	; 0xf60 <check_guard+0x5a>
            set_guard(1);
    143a:	81 e0       	ldi	r24, 0x01	; 1
    143c:	0e 94 a5 10 	call	0x214a	; 0x214a <set_guard>
            set_local_guard(0);
    1440:	80 e0       	ldi	r24, 0x00	; 0
    1442:	0e 94 ab 10 	call	0x2156	; 0x2156 <set_local_guard>
            EEPROM_update();
    1446:	0e 94 81 10 	call	0x2102	; 0x2102 <EEPROM_update>
            set_time_from_button_s(0xFFFF);
    144a:	8f ef       	ldi	r24, 0xFF	; 255
    144c:	9f ef       	ldi	r25, 0xFF	; 255
    144e:	0e 94 03 2e 	call	0x5c06	; 0x5c06 <set_time_from_button_s>
            beep();
    1452:	0e 94 c4 2b 	call	0x5788	; 0x5788 <beep>
            delay_ms(100);
    1456:	84 e6       	ldi	r24, 0x64	; 100
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
            beep();
    145e:	0e 94 c4 2b 	call	0x5788	; 0x5788 <beep>
            if(get_accept_calls() == 1)
    1462:	0e 94 8d 10 	call	0x211a	; 0x211a <get_accept_calls>
    1466:	81 30       	cpi	r24, 0x01	; 1
    1468:	51 f0       	breq	.+20     	; 0x147e <check_guard+0x578>
            if(get_accept_sms() == 1)
    146a:	0e 94 93 10 	call	0x2126	; 0x2126 <get_accept_sms>
    146e:	81 30       	cpi	r24, 0x01	; 1
    1470:	09 f0       	breq	.+2      	; 0x1474 <check_guard+0x56e>
    1472:	76 cd       	rjmp	.-1300   	; 0xf60 <check_guard+0x5a>
                send_sms_admins("Guard is on by button.");
    1474:	8d e8       	ldi	r24, 0x8D	; 141
    1476:	92 e0       	ldi	r25, 0x02	; 2
    1478:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <send_sms_admins>
}
    147c:	71 cd       	rjmp	.-1310   	; 0xf60 <check_guard+0x5a>
                alarm_play_file(AUDIO_GUARD_ON);
    147e:	86 e8       	ldi	r24, 0x86	; 134
    1480:	92 e0       	ldi	r25, 0x02	; 2
    1482:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <alarm_play_file>
    1486:	f1 cf       	rjmp	.-30     	; 0x146a <check_guard+0x564>

00001488 <check_temperature_smoke>:
}


//********************************************************************************************************************
void check_temperature_smoke(void)
{
    1488:	cf 93       	push	r28
    148a:	df 93       	push	r29
    148c:	00 d0       	rcall	.+0      	; 0x148e <check_temperature_smoke+0x6>
    148e:	00 d0       	rcall	.+0      	; 0x1490 <check_temperature_smoke+0x8>
    1490:	cd b7       	in	r28, 0x3d	; 61
    1492:	de b7       	in	r29, 0x3e	; 62

    static uint32_t time_stamp_s = 0;
    static uint8_t flag = 0;
    if(flag == 1)
    1494:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <flag.2>
    1498:	81 30       	cpi	r24, 0x01	; 1
    149a:	d1 f0       	breq	.+52     	; 0x14d0 <check_temperature_smoke+0x48>
        return;
    if(get_time_s() > (time_stamp_s + INTERVAL_CHECK_TEMPERATURE_S))
    149c:	0e 94 29 2c 	call	0x5852	; 0x5852 <get_time_s>
    14a0:	69 83       	std	Y+1, r22	; 0x01
    14a2:	7a 83       	std	Y+2, r23	; 0x02
    14a4:	8b 83       	std	Y+3, r24	; 0x03
    14a6:	9c 83       	std	Y+4, r25	; 0x04
    14a8:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <time_stamp_s.1>
    14ac:	90 91 27 03 	lds	r25, 0x0327	; 0x800327 <time_stamp_s.1+0x1>
    14b0:	a0 91 28 03 	lds	r26, 0x0328	; 0x800328 <time_stamp_s.1+0x2>
    14b4:	b0 91 29 03 	lds	r27, 0x0329	; 0x800329 <time_stamp_s.1+0x3>
    14b8:	cc 96       	adiw	r24, 0x3c	; 60
    14ba:	a1 1d       	adc	r26, r1
    14bc:	b1 1d       	adc	r27, r1
    14be:	29 81       	ldd	r18, Y+1	; 0x01
    14c0:	3a 81       	ldd	r19, Y+2	; 0x02
    14c2:	4b 81       	ldd	r20, Y+3	; 0x03
    14c4:	5c 81       	ldd	r21, Y+4	; 0x04
    14c6:	82 17       	cp	r24, r18
    14c8:	93 07       	cpc	r25, r19
    14ca:	a4 07       	cpc	r26, r20
    14cc:	b5 07       	cpc	r27, r21
    14ce:	38 f0       	brcs	.+14     	; 0x14de <check_temperature_smoke+0x56>
            flag = 1;
//            softuart_puts_p(PSTR("Alarm! Int TEMPERATURE!!!"));
            set_flag_alarm(FLAG_ALARM_TEMPERATURE_INT);
        }
    }
}
    14d0:	0f 90       	pop	r0
    14d2:	0f 90       	pop	r0
    14d4:	0f 90       	pop	r0
    14d6:	0f 90       	pop	r0
    14d8:	df 91       	pop	r29
    14da:	cf 91       	pop	r28
    14dc:	08 95       	ret
        time_stamp_s = get_time_s();
    14de:	0e 94 29 2c 	call	0x5852	; 0x5852 <get_time_s>
    14e2:	60 93 26 03 	sts	0x0326, r22	; 0x800326 <time_stamp_s.1>
    14e6:	70 93 27 03 	sts	0x0327, r23	; 0x800327 <time_stamp_s.1+0x1>
    14ea:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <time_stamp_s.1+0x2>
    14ee:	90 93 29 03 	sts	0x0329, r25	; 0x800329 <time_stamp_s.1+0x3>
        temperature_18b20 = get_18b20();
    14f2:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <get_18b20>
    14f6:	80 93 3e 03 	sts	0x033E, r24	; 0x80033e <temperature_18b20>
        temperature_mcu = get_int_temperature();
    14fa:	0e 94 12 06 	call	0xc24	; 0xc24 <get_int_temperature>
    14fe:	80 93 3d 03 	sts	0x033D, r24	; 0x80033d <temperature_mcu>
        if(temperature_18b20 > 65)
    1502:	90 91 3e 03 	lds	r25, 0x033E	; 0x80033e <temperature_18b20>
    1506:	92 34       	cpi	r25, 0x42	; 66
    1508:	4c f4       	brge	.+18     	; 0x151c <check_temperature_smoke+0x94>
        if(temperature_mcu > 65)
    150a:	82 34       	cpi	r24, 0x42	; 66
    150c:	0c f3       	brlt	.-62     	; 0x14d0 <check_temperature_smoke+0x48>
            flag = 1;
    150e:	81 e0       	ldi	r24, 0x01	; 1
    1510:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <flag.2>

//*******************************************************************************************************************
void set_flag_alarm(uint8_t flag)
{
    flag_alarm = flag;
    1514:	86 e0       	ldi	r24, 0x06	; 6
    1516:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <flag_alarm>
}
    151a:	da cf       	rjmp	.-76     	; 0x14d0 <check_temperature_smoke+0x48>
            flag = 1;
    151c:	91 e0       	ldi	r25, 0x01	; 1
    151e:	90 93 2a 03 	sts	0x032A, r25	; 0x80032a <flag.2>
    flag_alarm = flag;
    1522:	95 e0       	ldi	r25, 0x05	; 5
    1524:	90 93 42 03 	sts	0x0342, r25	; 0x800342 <flag_alarm>
}
    1528:	f0 cf       	rjmp	.-32     	; 0x150a <check_temperature_smoke+0x82>

0000152a <set_flag_alarm>:
    flag_alarm = flag;
    152a:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <flag_alarm>
}
    152e:	08 95       	ret

00001530 <get_flag_alarm>:
//*******************************************************************************************************************
uint8_t get_flag_alarm(void)
{
    return get_val(flag_alarm);
    1530:	9f b7       	in	r25, 0x3f	; 63
    1532:	f8 94       	cli
    1534:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <flag_alarm>
    1538:	9f bf       	out	0x3f, r25	; 63
}
    153a:	08 95       	ret

0000153c <freeRam>:

//*******************************************************************************************************************
int freeRam ()
{
    153c:	cf 93       	push	r28
    153e:	df 93       	push	r29
    1540:	00 d0       	rcall	.+0      	; 0x1542 <freeRam+0x6>
    1542:	cd b7       	in	r28, 0x3d	; 61
    1544:	de b7       	in	r29, 0x3e	; 62
    extern int __heap_start, *__brkval;
    int v;
    return (int) &v - (__brkval == 0 ? (int) &__heap_start : (int) __brkval);
    1546:	60 91 af 06 	lds	r22, 0x06AF	; 0x8006af <__brkval>
    154a:	70 91 b0 06 	lds	r23, 0x06B0	; 0x8006b0 <__brkval+0x1>
    154e:	61 15       	cp	r22, r1
    1550:	71 05       	cpc	r23, r1
    1552:	49 f0       	breq	.+18     	; 0x1566 <freeRam+0x2a>
    1554:	ce 01       	movw	r24, r28
    1556:	01 96       	adiw	r24, 0x01	; 1
    1558:	0e 94 f7 2e 	call	0x5dee	; 0x5dee <__subvhi3>
}
    155c:	0f 90       	pop	r0
    155e:	0f 90       	pop	r0
    1560:	df 91       	pop	r29
    1562:	cf 91       	pop	r28
    1564:	08 95       	ret
    return (int) &v - (__brkval == 0 ? (int) &__heap_start : (int) __brkval);
    1566:	65 eb       	ldi	r22, 0xB5	; 181
    1568:	76 e0       	ldi	r23, 0x06	; 6
    156a:	f4 cf       	rjmp	.-24     	; 0x1554 <freeRam+0x18>

0000156c <ram_free>:

//*******************************************************************************************************************
void ram_free(void)
{
    156c:	cf 93       	push	r28
    156e:	df 93       	push	r29
    1570:	cd b7       	in	r28, 0x3d	; 61
    1572:	de b7       	in	r29, 0x3e	; 62
    1574:	2a 97       	sbiw	r28, 0x0a	; 10
    1576:	0f b6       	in	r0, 0x3f	; 63
    1578:	f8 94       	cli
    157a:	de bf       	out	0x3e, r29	; 62
    157c:	0f be       	out	0x3f, r0	; 63
    157e:	cd bf       	out	0x3d, r28	; 61
    char ch[10];
    itoa(freeRam(), ch, 10);
    1580:	0e 94 9e 0a 	call	0x153c	; 0x153c <freeRam>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    1584:	4a e0       	ldi	r20, 0x0A	; 10
    1586:	be 01       	movw	r22, r28
    1588:	6f 5f       	subi	r22, 0xFF	; 255
    158a:	7f 4f       	sbci	r23, 0xFF	; 255
    158c:	0e 94 3b 34 	call	0x6876	; 0x6876 <__itoa_ncheck>
    softuart_puts_ln(ch);
    1590:	ce 01       	movw	r24, r28
    1592:	01 96       	adiw	r24, 0x01	; 1
    1594:	0e 94 31 28 	call	0x5062	; 0x5062 <softuart_puts_ln>
}
    1598:	2a 96       	adiw	r28, 0x0a	; 10
    159a:	0f b6       	in	r0, 0x3f	; 63
    159c:	f8 94       	cli
    159e:	de bf       	out	0x3e, r29	; 62
    15a0:	0f be       	out	0x3f, r0	; 63
    15a2:	cd bf       	out	0x3d, r28	; 61
    15a4:	df 91       	pop	r29
    15a6:	cf 91       	pop	r28
    15a8:	08 95       	ret

000015aa <check_light>:

//**************************************************************************
void check_light(void)
{
    15aa:	cf 93       	push	r28
    15ac:	df 93       	push	r29
    15ae:	00 d0       	rcall	.+0      	; 0x15b0 <check_light+0x6>
    15b0:	00 d0       	rcall	.+0      	; 0x15b2 <check_light+0x8>
    15b2:	cd b7       	in	r28, 0x3d	; 61
    15b4:	de b7       	in	r29, 0x3e	; 62
    static uint32_t delay_light = 0;
    if(light == 0)
    15b6:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <light>
    15ba:	88 23       	and	r24, r24
    15bc:	21 f0       	breq	.+8      	; 0x15c6 <check_light+0x1c>
        return;
    else if(light == 1)
    15be:	81 30       	cpi	r24, 0x01	; 1
    15c0:	49 f0       	breq	.+18     	; 0x15d4 <check_light+0x2a>
    {
        light = 2;
        delay_light = get_time_m() + 10;
    }
    else if(light == 2 && (get_time_m() > delay_light))
    15c2:	82 30       	cpi	r24, 0x02	; 2
    15c4:	d1 f0       	breq	.+52     	; 0x15fa <check_light+0x50>
    {
        DigitalWrite(PIN_LIGHT, LOW);
        light = 0;
    }
}
    15c6:	0f 90       	pop	r0
    15c8:	0f 90       	pop	r0
    15ca:	0f 90       	pop	r0
    15cc:	0f 90       	pop	r0
    15ce:	df 91       	pop	r29
    15d0:	cf 91       	pop	r28
    15d2:	08 95       	ret
        light = 2;
    15d4:	82 e0       	ldi	r24, 0x02	; 2
    15d6:	80 93 41 03 	sts	0x0341, r24	; 0x800341 <light>
        delay_light = get_time_m() + 10;
    15da:	0e 94 49 2c 	call	0x5892	; 0x5892 <get_time_m>
    15de:	dc 01       	movw	r26, r24
    15e0:	cb 01       	movw	r24, r22
    15e2:	0a 96       	adiw	r24, 0x0a	; 10
    15e4:	a1 1d       	adc	r26, r1
    15e6:	b1 1d       	adc	r27, r1
    15e8:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <delay_light.0>
    15ec:	90 93 23 03 	sts	0x0323, r25	; 0x800323 <delay_light.0+0x1>
    15f0:	a0 93 24 03 	sts	0x0324, r26	; 0x800324 <delay_light.0+0x2>
    15f4:	b0 93 25 03 	sts	0x0325, r27	; 0x800325 <delay_light.0+0x3>
    15f8:	e6 cf       	rjmp	.-52     	; 0x15c6 <check_light+0x1c>
    else if(light == 2 && (get_time_m() > delay_light))
    15fa:	0e 94 49 2c 	call	0x5892	; 0x5892 <get_time_m>
    15fe:	69 83       	std	Y+1, r22	; 0x01
    1600:	7a 83       	std	Y+2, r23	; 0x02
    1602:	8b 83       	std	Y+3, r24	; 0x03
    1604:	9c 83       	std	Y+4, r25	; 0x04
    1606:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <delay_light.0>
    160a:	90 91 23 03 	lds	r25, 0x0323	; 0x800323 <delay_light.0+0x1>
    160e:	a0 91 24 03 	lds	r26, 0x0324	; 0x800324 <delay_light.0+0x2>
    1612:	b0 91 25 03 	lds	r27, 0x0325	; 0x800325 <delay_light.0+0x3>
    1616:	29 81       	ldd	r18, Y+1	; 0x01
    1618:	3a 81       	ldd	r19, Y+2	; 0x02
    161a:	4b 81       	ldd	r20, Y+3	; 0x03
    161c:	5c 81       	ldd	r21, Y+4	; 0x04
    161e:	82 17       	cp	r24, r18
    1620:	93 07       	cpc	r25, r19
    1622:	a4 07       	cpc	r26, r20
    1624:	b5 07       	cpc	r27, r21
    1626:	78 f6       	brcc	.-98     	; 0x15c6 <check_light+0x1c>
        DigitalWrite(PIN_LIGHT, LOW);
    1628:	5f 98       	cbi	0x0b, 7	; 11
        light = 0;
    162a:	10 92 41 03 	sts	0x0341, r1	; 0x800341 <light>
    162e:	cb cf       	rjmp	.-106    	; 0x15c6 <check_light+0x1c>

00001630 <set_light>:
void set_light(uint8_t state)
{
    if(state == 1)
    1630:	81 30       	cpi	r24, 0x01	; 1
    1632:	21 f0       	breq	.+8      	; 0x163c <set_light+0xc>
    {
        DigitalWrite(PIN_LIGHT, HIGH);
    }
    else
    {
        DigitalWrite(PIN_LIGHT, LOW);
    1634:	5f 98       	cbi	0x0b, 7	; 11
    }
    light = state;
    1636:	80 93 41 03 	sts	0x0341, r24	; 0x800341 <light>
}
    163a:	08 95       	ret
        DigitalWrite(PIN_LIGHT, HIGH);
    163c:	5f 9a       	sbi	0x0b, 7	; 11
    163e:	fb cf       	rjmp	.-10     	; 0x1636 <set_light+0x6>

00001640 <get_light>:
uint8_t get_light(void)
{
    return get_val(light);
    1640:	9f b7       	in	r25, 0x3f	; 63
    1642:	f8 94       	cli
    1644:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <light>
    1648:	9f bf       	out	0x3f, r25	; 63
}
    164a:	08 95       	ret

0000164c <get_flag_for_send>:
//*******************************************
uint8_t get_flag_for_send(void)
{
    return get_val(flag_for_send);
    164c:	9f b7       	in	r25, 0x3f	; 63
    164e:	f8 94       	cli
    1650:	80 91 40 03 	lds	r24, 0x0340	; 0x800340 <flag_for_send>
    1654:	9f bf       	out	0x3f, r25	; 63
}
    1656:	08 95       	ret

00001658 <set_flag_for_send>:
void set_flag_for_send(uint8_t flag)
{
    set_val(flag_for_send, flag);
    1658:	9f b7       	in	r25, 0x3f	; 63
    165a:	f8 94       	cli
    165c:	80 93 40 03 	sts	0x0340, r24	; 0x800340 <flag_for_send>
    1660:	9f bf       	out	0x3f, r25	; 63
}
    1662:	08 95       	ret

00001664 <get_flg_rst>:
//*******************************************
uint8_t get_flg_rst(void)
{
    return get_val(flg_rst);
    1664:	9f b7       	in	r25, 0x3f	; 63
    1666:	f8 94       	cli
    1668:	80 91 3f 03 	lds	r24, 0x033F	; 0x80033f <flg_rst>
    166c:	9f bf       	out	0x3f, r25	; 63
}
    166e:	08 95       	ret

00001670 <set_flg_rst>:
void set_flg_rst(uint8_t flag)
{
    set_val(flg_rst, flag);
    1670:	9f b7       	in	r25, 0x3f	; 63
    1672:	f8 94       	cli
    1674:	80 93 3f 03 	sts	0x033F, r24	; 0x80033f <flg_rst>
    1678:	9f bf       	out	0x3f, r25	; 63
}
    167a:	08 95       	ret

0000167c <get_temperature_18b20>:
//*******************************************
int8_t get_temperature_18b20(void)
{
    return get_val(temperature_18b20);
    167c:	9f b7       	in	r25, 0x3f	; 63
    167e:	f8 94       	cli
    1680:	80 91 3e 03 	lds	r24, 0x033E	; 0x80033e <temperature_18b20>
    1684:	9f bf       	out	0x3f, r25	; 63
}
    1686:	08 95       	ret

00001688 <get_temperature_mcu>:
//*******************************************
int8_t get_temperature_mcu(void)
{
    return get_val(temperature_mcu);
    1688:	9f b7       	in	r25, 0x3f	; 63
    168a:	f8 94       	cli
    168c:	80 91 3d 03 	lds	r24, 0x033D	; 0x80033d <temperature_mcu>
    1690:	9f bf       	out	0x3f, r25	; 63
}
    1692:	08 95       	ret

00001694 <send_sms_report>:
{
    1694:	2f 92       	push	r2
    1696:	3f 92       	push	r3
    1698:	4f 92       	push	r4
    169a:	5f 92       	push	r5
    169c:	6f 92       	push	r6
    169e:	7f 92       	push	r7
    16a0:	8f 92       	push	r8
    16a2:	9f 92       	push	r9
    16a4:	cf 92       	push	r12
    16a6:	df 92       	push	r13
    16a8:	ef 92       	push	r14
    16aa:	ff 92       	push	r15
    16ac:	0f 93       	push	r16
    16ae:	1f 93       	push	r17
    16b0:	cf 93       	push	r28
    16b2:	df 93       	push	r29
    16b4:	cd b7       	in	r28, 0x3d	; 61
    16b6:	de b7       	in	r29, 0x3e	; 62
    16b8:	c4 5a       	subi	r28, 0xA4	; 164
    16ba:	d1 09       	sbc	r29, r1
    16bc:	0f b6       	in	r0, 0x3f	; 63
    16be:	f8 94       	cli
    16c0:	de bf       	out	0x3e, r29	; 62
    16c2:	0f be       	out	0x3f, r0	; 63
    16c4:	cd bf       	out	0x3d, r28	; 61
    16c6:	e8 2e       	mov	r14, r24
    16c8:	f9 2e       	mov	r15, r25
    send_USSD(0);
    16ca:	80 e0       	ldi	r24, 0x00	; 0
    16cc:	0e 94 e5 1c 	call	0x39ca	; 0x39ca <send_USSD>
    time = get_time_s();
    16d0:	0e 94 29 2c 	call	0x5852	; 0x5852 <get_time_s>
    time -= d*(3600UL*24UL);
    16d4:	20 e8       	ldi	r18, 0x80	; 128
    16d6:	31 e5       	ldi	r19, 0x51	; 81
    16d8:	41 e0       	ldi	r20, 0x01	; 1
    16da:	50 e0       	ldi	r21, 0x00	; 0
    16dc:	0e 94 4a 2f 	call	0x5e94	; 0x5e94 <__udivmodsi4>
    16e0:	92 2e       	mov	r9, r18
    16e2:	83 2e       	mov	r8, r19
    time -= h*3600UL;
    16e4:	20 e1       	ldi	r18, 0x10	; 16
    16e6:	3e e0       	ldi	r19, 0x0E	; 14
    16e8:	40 e0       	ldi	r20, 0x00	; 0
    16ea:	50 e0       	ldi	r21, 0x00	; 0
    16ec:	0e 94 4a 2f 	call	0x5e94	; 0x5e94 <__udivmodsi4>
    16f0:	32 2e       	mov	r3, r18
    16f2:	23 2e       	mov	r2, r19
    16f4:	cf 55       	subi	r28, 0x5F	; 95
    16f6:	df 4f       	sbci	r29, 0xFF	; 255
    16f8:	68 83       	st	Y, r22
    16fa:	79 83       	std	Y+1, r23	; 0x01
    16fc:	8a 83       	std	Y+2, r24	; 0x02
    16fe:	9b 83       	std	Y+3, r25	; 0x03
    1700:	c1 5a       	subi	r28, 0xA1	; 161
    1702:	d0 40       	sbci	r29, 0x00	; 0
    m = time/60;
    1704:	2c e3       	ldi	r18, 0x3C	; 60
    1706:	30 e0       	ldi	r19, 0x00	; 0
    1708:	40 e0       	ldi	r20, 0x00	; 0
    170a:	50 e0       	ldi	r21, 0x00	; 0
    170c:	0e 94 4a 2f 	call	0x5e94	; 0x5e94 <__udivmodsi4>
    1710:	29 01       	movw	r4, r18
    s = time - m*60;
    1712:	2c e3       	ldi	r18, 0x3C	; 60
    1714:	24 9d       	mul	r18, r4
    1716:	c0 01       	movw	r24, r0
    1718:	25 9d       	mul	r18, r5
    171a:	90 0d       	add	r25, r0
    171c:	11 24       	eor	r1, r1
    171e:	cf 55       	subi	r28, 0x5F	; 95
    1720:	df 4f       	sbci	r29, 0xFF	; 255
    1722:	c8 80       	ld	r12, Y
    1724:	d9 80       	ldd	r13, Y+1	; 0x01
    1726:	c1 5a       	subi	r28, 0xA1	; 161
    1728:	d0 40       	sbci	r29, 0x00	; 0
    172a:	c8 1a       	sub	r12, r24
    172c:	d9 0a       	sbc	r13, r25
    ptr += sprintf_P(ptr, PSTR("deposit=%s;"), get_arr_dep());
    172e:	0e 94 a7 1f 	call	0x3f4e	; 0x3f4e <get_arr_dep>
    1732:	9f 93       	push	r25
    1734:	8f 93       	push	r24
    1736:	86 ed       	ldi	r24, 0xD6	; 214
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	9f 93       	push	r25
    173c:	8f 93       	push	r24
    173e:	8e 01       	movw	r16, r28
    1740:	0f 5f       	subi	r16, 0xFF	; 255
    1742:	1f 4f       	sbci	r17, 0xFF	; 255
    1744:	1f 93       	push	r17
    1746:	0f 93       	push	r16
    1748:	0e 94 68 34 	call	0x68d0	; 0x68d0 <sprintf_P>
    174c:	08 0f       	add	r16, r24
    174e:	19 1f       	adc	r17, r25
    ptr += sprintf_P(ptr, PSTR("t=%ud%uh%um%us;"), d, h, m, s);
    1750:	df 92       	push	r13
    1752:	cf 92       	push	r12
    1754:	5f 92       	push	r5
    1756:	4f 92       	push	r4
    1758:	2f 92       	push	r2
    175a:	3f 92       	push	r3
    175c:	8f 92       	push	r8
    175e:	9f 92       	push	r9
    1760:	86 ec       	ldi	r24, 0xC6	; 198
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	9f 93       	push	r25
    1766:	8f 93       	push	r24
    1768:	1f 93       	push	r17
    176a:	0f 93       	push	r16
    176c:	0e 94 68 34 	call	0x68d0	; 0x68d0 <sprintf_P>
    1770:	08 0f       	add	r16, r24
    1772:	19 1f       	adc	r17, r25
    ptr += sprintf_P(ptr, PSTR("guard=%d;"), get_guard());
    1774:	0e 94 a2 10 	call	0x2144	; 0x2144 <get_guard>
    1778:	1f 92       	push	r1
    177a:	8f 93       	push	r24
    177c:	8c eb       	ldi	r24, 0xBC	; 188
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	9f 93       	push	r25
    1782:	8f 93       	push	r24
    1784:	1f 93       	push	r17
    1786:	0f 93       	push	r16
    1788:	0e 94 68 34 	call	0x68d0	; 0x68d0 <sprintf_P>
    178c:	08 0f       	add	r16, r24
    178e:	19 1f       	adc	r17, r25
    ptr += sprintf_P(ptr, PSTR("l_g=%d;"), get_local_guard());
    1790:	0e 94 a8 10 	call	0x2150	; 0x2150 <get_local_guard>
    1794:	1f 92       	push	r1
    1796:	8f 93       	push	r24
    1798:	84 eb       	ldi	r24, 0xB4	; 180
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	9f 93       	push	r25
    179e:	8f 93       	push	r24
    17a0:	1f 93       	push	r17
    17a2:	0f 93       	push	r16
    17a4:	0e 94 68 34 	call	0x68d0	; 0x68d0 <sprintf_P>
    17a8:	08 0f       	add	r16, r24
    17aa:	19 1f       	adc	r17, r25
    ptr += sprintf_P(ptr, PSTR("temp=%dC;"), get_temperature_mcu());
    17ac:	0e 94 44 0b 	call	0x1688	; 0x1688 <get_temperature_mcu>
    17b0:	28 2f       	mov	r18, r24
    17b2:	08 2e       	mov	r0, r24
    17b4:	00 0c       	add	r0, r0
    17b6:	33 0b       	sbc	r19, r19
    17b8:	3f 93       	push	r19
    17ba:	8f 93       	push	r24
    17bc:	8a ea       	ldi	r24, 0xAA	; 170
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	9f 93       	push	r25
    17c2:	8f 93       	push	r24
    17c4:	1f 93       	push	r17
    17c6:	0f 93       	push	r16
    17c8:	0e 94 68 34 	call	0x68d0	; 0x68d0 <sprintf_P>
    17cc:	08 0f       	add	r16, r24
    17ce:	19 1f       	adc	r17, r25
    ptr += sprintf_P(ptr, PSTR("mcu=%u;"), get_reset_count_mcu());
    17d0:	0f b6       	in	r0, 0x3f	; 63
    17d2:	f8 94       	cli
    17d4:	de bf       	out	0x3e, r29	; 62
    17d6:	0f be       	out	0x3f, r0	; 63
    17d8:	cd bf       	out	0x3d, r28	; 61
    17da:	0e 94 ba 10 	call	0x2174	; 0x2174 <get_reset_count_mcu>
    17de:	1f 92       	push	r1
    17e0:	8f 93       	push	r24
    17e2:	82 ea       	ldi	r24, 0xA2	; 162
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	9f 93       	push	r25
    17e8:	8f 93       	push	r24
    17ea:	1f 93       	push	r17
    17ec:	0f 93       	push	r16
    17ee:	0e 94 68 34 	call	0x68d0	; 0x68d0 <sprintf_P>
    17f2:	08 0f       	add	r16, r24
    17f4:	19 1f       	adc	r17, r25
    ptr += sprintf_P(ptr, PSTR("g_r=%u;"), get_error_code1());
    17f6:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <get_error_code1>
    17fa:	1f 92       	push	r1
    17fc:	8f 93       	push	r24
    17fe:	8a e9       	ldi	r24, 0x9A	; 154
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	9f 93       	push	r25
    1804:	8f 93       	push	r24
    1806:	1f 93       	push	r17
    1808:	0f 93       	push	r16
    180a:	0e 94 68 34 	call	0x68d0	; 0x68d0 <sprintf_P>
    180e:	08 0f       	add	r16, r24
    1810:	19 1f       	adc	r17, r25
    ptr += sprintf_P(ptr, PSTR("g=%hu;"), get_error_gsm());
    1812:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <get_error_gsm>
    1816:	9f 93       	push	r25
    1818:	8f 93       	push	r24
    181a:	83 e9       	ldi	r24, 0x93	; 147
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	9f 93       	push	r25
    1820:	8f 93       	push	r24
    1822:	1f 93       	push	r17
    1824:	0f 93       	push	r16
    1826:	0e 94 68 34 	call	0x68d0	; 0x68d0 <sprintf_P>
    182a:	08 0f       	add	r16, r24
    182c:	19 1f       	adc	r17, r25
    ptr += sprintf_P(ptr, PSTR("signal_gsm=%d%%;"), get_signal_strength());
    182e:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <get_signal_strength>
    1832:	1f 92       	push	r1
    1834:	8f 93       	push	r24
    1836:	82 e8       	ldi	r24, 0x82	; 130
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	9f 93       	push	r25
    183c:	8f 93       	push	r24
    183e:	1f 93       	push	r17
    1840:	0f 93       	push	r16
    1842:	0e 94 68 34 	call	0x68d0	; 0x68d0 <sprintf_P>
    1846:	08 0f       	add	r16, r24
    1848:	19 1f       	adc	r17, r25
    uint32_t time_w_p = get_time_without_power_s();
    184a:	0e 94 2b 07 	call	0xe56	; 0xe56 <get_time_without_power_s>
    184e:	cf 55       	subi	r28, 0x5F	; 95
    1850:	df 4f       	sbci	r29, 0xFF	; 255
    1852:	68 83       	st	Y, r22
    1854:	79 83       	std	Y+1, r23	; 0x01
    1856:	8a 83       	std	Y+2, r24	; 0x02
    1858:	9b 83       	std	Y+3, r25	; 0x03
    185a:	c1 5a       	subi	r28, 0xA1	; 161
    185c:	d0 40       	sbci	r29, 0x00	; 0
    if(time_w_p == 0)
    185e:	0f b6       	in	r0, 0x3f	; 63
    1860:	f8 94       	cli
    1862:	de bf       	out	0x3e, r29	; 62
    1864:	0f be       	out	0x3f, r0	; 63
    1866:	cd bf       	out	0x3d, r28	; 61
    1868:	67 2b       	or	r22, r23
    186a:	68 2b       	or	r22, r24
    186c:	69 2b       	or	r22, r25
    186e:	79 f5       	brne	.+94     	; 0x18ce <send_sms_report+0x23a>
        ptr += sprintf_P(ptr, PSTR("e_power=%u;"), 1);
    1870:	1f 92       	push	r1
    1872:	81 e0       	ldi	r24, 0x01	; 1
    1874:	8f 93       	push	r24
    1876:	86 e7       	ldi	r24, 0x76	; 118
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	9f 93       	push	r25
    187c:	8f 93       	push	r24
    187e:	1f 93       	push	r17
    1880:	0f 93       	push	r16
    1882:	0e 94 68 34 	call	0x68d0	; 0x68d0 <sprintf_P>
    1886:	0f 90       	pop	r0
    1888:	0f 90       	pop	r0
    188a:	0f 90       	pop	r0
    188c:	0f 90       	pop	r0
    188e:	0f 90       	pop	r0
    1890:	0f 90       	pop	r0
    send_sms(sms, phone);
    1892:	6e 2d       	mov	r22, r14
    1894:	7f 2d       	mov	r23, r15
    1896:	ce 01       	movw	r24, r28
    1898:	01 96       	adiw	r24, 0x01	; 1
    189a:	0e 94 43 15 	call	0x2a86	; 0x2a86 <send_sms>
}
    189e:	cc 55       	subi	r28, 0x5C	; 92
    18a0:	df 4f       	sbci	r29, 0xFF	; 255
    18a2:	0f b6       	in	r0, 0x3f	; 63
    18a4:	f8 94       	cli
    18a6:	de bf       	out	0x3e, r29	; 62
    18a8:	0f be       	out	0x3f, r0	; 63
    18aa:	cd bf       	out	0x3d, r28	; 61
    18ac:	df 91       	pop	r29
    18ae:	cf 91       	pop	r28
    18b0:	1f 91       	pop	r17
    18b2:	0f 91       	pop	r16
    18b4:	ff 90       	pop	r15
    18b6:	ef 90       	pop	r14
    18b8:	df 90       	pop	r13
    18ba:	cf 90       	pop	r12
    18bc:	9f 90       	pop	r9
    18be:	8f 90       	pop	r8
    18c0:	7f 90       	pop	r7
    18c2:	6f 90       	pop	r6
    18c4:	5f 90       	pop	r5
    18c6:	4f 90       	pop	r4
    18c8:	3f 90       	pop	r3
    18ca:	2f 90       	pop	r2
    18cc:	08 95       	ret
        ptr += sprintf_P(ptr, PSTR("battery=%d%%;"), get_battery_level());
    18ce:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <get_battery_level>
    18d2:	1f 92       	push	r1
    18d4:	8f 93       	push	r24
    18d6:	88 e6       	ldi	r24, 0x68	; 104
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	9f 93       	push	r25
    18dc:	8f 93       	push	r24
    18de:	1f 93       	push	r17
    18e0:	0f 93       	push	r16
    18e2:	0e 94 68 34 	call	0x68d0	; 0x68d0 <sprintf_P>
    18e6:	0f 90       	pop	r0
    18e8:	0f 90       	pop	r0
    18ea:	0f 90       	pop	r0
    18ec:	0f 90       	pop	r0
    18ee:	0f 90       	pop	r0
    18f0:	0f 90       	pop	r0
    18f2:	cf cf       	rjmp	.-98     	; 0x1892 <send_sms_report+0x1fe>

000018f4 <get_flag_motion_inside>:
//*******************************************
uint8_t get_flag_motion_inside(void)
{
    return get_val(flag_motion_inside);
    18f4:	9f b7       	in	r25, 0x3f	; 63
    18f6:	f8 94       	cli
    18f8:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <flag_motion_inside>
    18fc:	9f bf       	out	0x3f, r25	; 63
}
    18fe:	08 95       	ret

00001900 <set_flag_motion_inside>:
void set_flag_motion_inside(uint8_t flag)
{
    set_val(flag_motion_inside, flag);
    1900:	9f b7       	in	r25, 0x3f	; 63
    1902:	f8 94       	cli
    1904:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <flag_motion_inside>
    1908:	9f bf       	out	0x3f, r25	; 63
}
    190a:	08 95       	ret

0000190c <OWCheckCRC>:
    return data;
}

/* Calculates CRC value based on the example in Avr-libc reference manual. */
static uint8_t OWCheckCRC(uint8_t *data, uint8_t length)
{
    190c:	28 2f       	mov	r18, r24
    190e:	39 2f       	mov	r19, r25
    1910:	86 2f       	mov	r24, r22
    uint8_t i;
    uint8_t CRCvalue=0;

    for(i=0; i<length; i++)
    1912:	66 23       	and	r22, r22
    1914:	99 f0       	breq	.+38     	; 0x193c <OWCheckCRC+0x30>
    1916:	f9 01       	movw	r30, r18
    1918:	81 50       	subi	r24, 0x01	; 1
    191a:	2f 5f       	subi	r18, 0xFF	; 255
    191c:	3f 4f       	sbci	r19, 0xFF	; 255
    191e:	28 0f       	add	r18, r24
    1920:	31 1d       	adc	r19, r1
    uint8_t CRCvalue=0;
    1922:	80 e0       	ldi	r24, 0x00	; 0
        CRCvalue=_crc_ibutton_update(CRCvalue,*(data+i));
    1924:	91 91       	ld	r25, Z+

static __inline__ uint8_t
_crc_ibutton_update(uint8_t __crc, uint8_t __data)
{
	uint8_t __i, __pattern;
	__asm__ __volatile__ (
    1926:	89 27       	eor	r24, r25
    1928:	98 e0       	ldi	r25, 0x08	; 8
    192a:	4c e8       	ldi	r20, 0x8C	; 140
    192c:	86 95       	lsr	r24
    192e:	08 f4       	brcc	.+2      	; 0x1932 <OWCheckCRC+0x26>
    1930:	84 27       	eor	r24, r20
    1932:	9a 95       	dec	r25
    1934:	d9 f7       	brne	.-10     	; 0x192c <OWCheckCRC+0x20>
    for(i=0; i<length; i++)
    1936:	e2 17       	cp	r30, r18
    1938:	f3 07       	cpc	r31, r19
    193a:	a1 f7       	brne	.-24     	; 0x1924 <OWCheckCRC+0x18>

    return CRCvalue;
}
    193c:	08 95       	ret

0000193e <OWReset>:
{
    193e:	e8 2f       	mov	r30, r24
    1940:	f9 2f       	mov	r31, r25
    *(pDS18x20->DS18x20_PORT-1) |= _BV(pDS18x20->DS18x20_PIN);
    1942:	a0 81       	ld	r26, Z
    1944:	b1 81       	ldd	r27, Z+1	; 0x01
    1946:	8e 91       	ld	r24, -X
    1948:	92 81       	ldd	r25, Z+2	; 0x02
    194a:	21 e0       	ldi	r18, 0x01	; 1
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	a9 01       	movw	r20, r18
    1950:	02 c0       	rjmp	.+4      	; 0x1956 <OWReset+0x18>
    1952:	44 0f       	add	r20, r20
    1954:	55 1f       	adc	r21, r21
    1956:	9a 95       	dec	r25
    1958:	e2 f7       	brpl	.-8      	; 0x1952 <OWReset+0x14>
    195a:	84 2b       	or	r24, r20
    195c:	8c 93       	st	X, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    195e:	8f e7       	ldi	r24, 0x7F	; 127
    1960:	97 e0       	ldi	r25, 0x07	; 7
    1962:	01 97       	sbiw	r24, 0x01	; 1
    1964:	f1 f7       	brne	.-4      	; 0x1962 <OWReset+0x24>
    1966:	00 c0       	rjmp	.+0      	; 0x1968 <OWReset+0x2a>
    1968:	00 00       	nop
    *(pDS18x20->DS18x20_PORT-1) &= ~(_BV(pDS18x20->DS18x20_PIN));
    196a:	a0 81       	ld	r26, Z
    196c:	b1 81       	ldd	r27, Z+1	; 0x01
    196e:	4e 91       	ld	r20, -X
    1970:	82 81       	ldd	r24, Z+2	; 0x02
    1972:	b9 01       	movw	r22, r18
    1974:	02 c0       	rjmp	.+4      	; 0x197a <OWReset+0x3c>
    1976:	66 0f       	add	r22, r22
    1978:	77 1f       	adc	r23, r23
    197a:	8a 95       	dec	r24
    197c:	e2 f7       	brpl	.-8      	; 0x1976 <OWReset+0x38>
    197e:	cb 01       	movw	r24, r22
    1980:	80 95       	com	r24
    1982:	84 23       	and	r24, r20
    1984:	8c 93       	st	X, r24
    1986:	8f e3       	ldi	r24, 0x3F	; 63
    1988:	91 e0       	ldi	r25, 0x01	; 1
    198a:	01 97       	sbiw	r24, 0x01	; 1
    198c:	f1 f7       	brne	.-4      	; 0x198a <OWReset+0x4c>
    198e:	00 c0       	rjmp	.+0      	; 0x1990 <OWReset+0x52>
    1990:	00 00       	nop
    result = (*(pDS18x20->DS18x20_PORT-2)) & (_BV(pDS18x20->DS18x20_PIN));
    1992:	a0 81       	ld	r26, Z
    1994:	b1 81       	ldd	r27, Z+1	; 0x01
    1996:	12 97       	sbiw	r26, 0x02	; 2
    1998:	8c 91       	ld	r24, X
    199a:	92 81       	ldd	r25, Z+2	; 0x02
    199c:	02 c0       	rjmp	.+4      	; 0x19a2 <OWReset+0x64>
    199e:	22 0f       	add	r18, r18
    19a0:	33 1f       	adc	r19, r19
    19a2:	9a 95       	dec	r25
    19a4:	e2 f7       	brpl	.-8      	; 0x199e <OWReset+0x60>
    19a6:	82 23       	and	r24, r18
    19a8:	ef e3       	ldi	r30, 0x3F	; 63
    19aa:	f6 e0       	ldi	r31, 0x06	; 6
    19ac:	31 97       	sbiw	r30, 0x01	; 1
    19ae:	f1 f7       	brne	.-4      	; 0x19ac <OWReset+0x6e>
    19b0:	00 c0       	rjmp	.+0      	; 0x19b2 <OWReset+0x74>
    19b2:	00 00       	nop
}
    19b4:	08 95       	ret

000019b6 <OWWriteByte>:
{
    19b6:	0f 93       	push	r16
    19b8:	1f 93       	push	r17
    19ba:	cf 93       	push	r28
    19bc:	df 93       	push	r29
    19be:	e8 2f       	mov	r30, r24
    19c0:	f9 2f       	mov	r31, r25
    19c2:	28 e0       	ldi	r18, 0x08	; 8
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t mask = 0x01;
    19c6:	91 e0       	ldi	r25, 0x01	; 1
    *(pDS18x20->DS18x20_PORT-1) |= _BV(pDS18x20->DS18x20_PIN);
    19c8:	c1 e0       	ldi	r28, 0x01	; 1
    19ca:	d0 e0       	ldi	r29, 0x00	; 0
    19cc:	18 c0       	rjmp	.+48     	; 0x19fe <OWWriteByte+0x48>
    19ce:	af ee       	ldi	r26, 0xEF	; 239
    19d0:	b0 e0       	ldi	r27, 0x00	; 0
    19d2:	11 97       	sbiw	r26, 0x01	; 1
    19d4:	f1 f7       	brne	.-4      	; 0x19d2 <OWWriteByte+0x1c>
    19d6:	00 c0       	rjmp	.+0      	; 0x19d8 <OWWriteByte+0x22>
    19d8:	00 00       	nop
        *(pDS18x20->DS18x20_PORT-1) &= ~(_BV(pDS18x20->DS18x20_PIN));
    19da:	a0 81       	ld	r26, Z
    19dc:	b1 81       	ldd	r27, Z+1	; 0x01
    19de:	8e 91       	ld	r24, -X
    19e0:	42 81       	ldd	r20, Z+2	; 0x02
    19e2:	8e 01       	movw	r16, r28
    19e4:	02 c0       	rjmp	.+4      	; 0x19ea <OWWriteByte+0x34>
    19e6:	00 0f       	add	r16, r16
    19e8:	11 1f       	adc	r17, r17
    19ea:	4a 95       	dec	r20
    19ec:	e2 f7       	brpl	.-8      	; 0x19e6 <OWWriteByte+0x30>
    19ee:	a8 01       	movw	r20, r16
    19f0:	40 95       	com	r20
    19f2:	48 23       	and	r20, r24
    19f4:	4c 93       	st	X, r20
        mask <<= 1;
    19f6:	99 0f       	add	r25, r25
    while (mask)
    19f8:	21 50       	subi	r18, 0x01	; 1
    19fa:	31 09       	sbc	r19, r1
    19fc:	21 f1       	breq	.+72     	; 0x1a46 <OWWriteByte+0x90>
    *(pDS18x20->DS18x20_PORT-1) |= _BV(pDS18x20->DS18x20_PIN);
    19fe:	a0 81       	ld	r26, Z
    1a00:	b1 81       	ldd	r27, Z+1	; 0x01
    1a02:	8e 91       	ld	r24, -X
    1a04:	42 81       	ldd	r20, Z+2	; 0x02
    1a06:	8e 01       	movw	r16, r28
    1a08:	02 c0       	rjmp	.+4      	; 0x1a0e <OWWriteByte+0x58>
    1a0a:	00 0f       	add	r16, r16
    1a0c:	11 1f       	adc	r17, r17
    1a0e:	4a 95       	dec	r20
    1a10:	e2 f7       	brpl	.-8      	; 0x1a0a <OWWriteByte+0x54>
    1a12:	80 2b       	or	r24, r16
    1a14:	8c 93       	st	X, r24
        OWWriteBit(pDS18x20,value & mask);
    1a16:	86 2f       	mov	r24, r22
    1a18:	89 23       	and	r24, r25
    if (bit)
    1a1a:	c9 f2       	breq	.-78     	; 0x19ce <OWWriteByte+0x18>
    1a1c:	10 e5       	ldi	r17, 0x50	; 80
    1a1e:	1a 95       	dec	r17
    1a20:	f1 f7       	brne	.-4      	; 0x1a1e <OWWriteByte+0x68>
        *(pDS18x20->DS18x20_PORT-1) &= ~(_BV(pDS18x20->DS18x20_PIN));
    1a22:	a0 81       	ld	r26, Z
    1a24:	b1 81       	ldd	r27, Z+1	; 0x01
    1a26:	8e 91       	ld	r24, -X
    1a28:	42 81       	ldd	r20, Z+2	; 0x02
    1a2a:	8e 01       	movw	r16, r28
    1a2c:	02 c0       	rjmp	.+4      	; 0x1a32 <OWWriteByte+0x7c>
    1a2e:	00 0f       	add	r16, r16
    1a30:	11 1f       	adc	r17, r17
    1a32:	4a 95       	dec	r20
    1a34:	e2 f7       	brpl	.-8      	; 0x1a2e <OWWriteByte+0x78>
    1a36:	a8 01       	movw	r20, r16
    1a38:	40 95       	com	r20
    1a3a:	48 23       	and	r20, r24
    1a3c:	4c 93       	st	X, r20
    1a3e:	10 ef       	ldi	r17, 0xF0	; 240
    1a40:	1a 95       	dec	r17
    1a42:	f1 f7       	brne	.-4      	; 0x1a40 <OWWriteByte+0x8a>
	}
	else
		__ticks = (uint8_t)__tmp;
	_delay_loop_1(__ticks);
#endif
}
    1a44:	d8 cf       	rjmp	.-80     	; 0x19f6 <OWWriteByte+0x40>
}
    1a46:	df 91       	pop	r29
    1a48:	cf 91       	pop	r28
    1a4a:	1f 91       	pop	r17
    1a4c:	0f 91       	pop	r16
    1a4e:	08 95       	ret

00001a50 <OWReadBit>:
{
    1a50:	e8 2f       	mov	r30, r24
    1a52:	f9 2f       	mov	r31, r25
    *(pDS18x20->DS18x20_PORT-1) |= _BV(pDS18x20->DS18x20_PIN);
    1a54:	a0 81       	ld	r26, Z
    1a56:	b1 81       	ldd	r27, Z+1	; 0x01
    1a58:	2e 91       	ld	r18, -X
    1a5a:	32 81       	ldd	r19, Z+2	; 0x02
    1a5c:	81 e0       	ldi	r24, 0x01	; 1
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	ac 01       	movw	r20, r24
    1a62:	02 c0       	rjmp	.+4      	; 0x1a68 <OWReadBit+0x18>
    1a64:	44 0f       	add	r20, r20
    1a66:	55 1f       	adc	r21, r21
    1a68:	3a 95       	dec	r19
    1a6a:	e2 f7       	brpl	.-8      	; 0x1a64 <OWReadBit+0x14>
    1a6c:	24 2b       	or	r18, r20
    1a6e:	2c 93       	st	X, r18
	__builtin_avr_delay_cycles(__ticks_dc);
    1a70:	25 e1       	ldi	r18, 0x15	; 21
    1a72:	2a 95       	dec	r18
    1a74:	f1 f7       	brne	.-4      	; 0x1a72 <OWReadBit+0x22>
    1a76:	00 00       	nop
    *(pDS18x20->DS18x20_PORT-1) &= ~(_BV(pDS18x20->DS18x20_PIN));
    1a78:	a0 81       	ld	r26, Z
    1a7a:	b1 81       	ldd	r27, Z+1	; 0x01
    1a7c:	2e 91       	ld	r18, -X
    1a7e:	32 81       	ldd	r19, Z+2	; 0x02
    1a80:	02 c0       	rjmp	.+4      	; 0x1a86 <OWReadBit+0x36>
    1a82:	88 0f       	add	r24, r24
    1a84:	99 1f       	adc	r25, r25
    1a86:	3a 95       	dec	r19
    1a88:	e2 f7       	brpl	.-8      	; 0x1a82 <OWReadBit+0x32>
    1a8a:	80 95       	com	r24
    1a8c:	82 23       	and	r24, r18
    1a8e:	8c 93       	st	X, r24
    1a90:	8a e2       	ldi	r24, 0x2A	; 42
    1a92:	8a 95       	dec	r24
    1a94:	f1 f7       	brne	.-4      	; 0x1a92 <OWReadBit+0x42>
    1a96:	00 c0       	rjmp	.+0      	; 0x1a98 <OWReadBit+0x48>
    if ((*(pDS18x20->DS18x20_PORT-2) & (_BV(pDS18x20->DS18x20_PIN))))
    1a98:	a0 81       	ld	r26, Z
    1a9a:	b1 81       	ldd	r27, Z+1	; 0x01
    1a9c:	12 97       	sbiw	r26, 0x02	; 2
    1a9e:	8c 91       	ld	r24, X
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	22 81       	ldd	r18, Z+2	; 0x02
    1aa4:	02 c0       	rjmp	.+4      	; 0x1aaa <OWReadBit+0x5a>
    1aa6:	95 95       	asr	r25
    1aa8:	87 95       	ror	r24
    1aaa:	2a 95       	dec	r18
    1aac:	e2 f7       	brpl	.-8      	; 0x1aa6 <OWReadBit+0x56>
    1aae:	81 70       	andi	r24, 0x01	; 1
    1ab0:	ef eb       	ldi	r30, 0xBF	; 191
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	31 97       	sbiw	r30, 0x01	; 1
    1ab6:	f1 f7       	brne	.-4      	; 0x1ab4 <OWReadBit+0x64>
    1ab8:	00 c0       	rjmp	.+0      	; 0x1aba <OWReadBit+0x6a>
    1aba:	00 00       	nop
}
    1abc:	08 95       	ret

00001abe <init_ds18b20>:
        return 0.0;
    }
}

void init_ds18b20(void)
{
    1abe:	4f 92       	push	r4
    1ac0:	5f 92       	push	r5
    1ac2:	6f 92       	push	r6
    1ac4:	7f 92       	push	r7
    1ac6:	8f 92       	push	r8
    1ac8:	9f 92       	push	r9
    1aca:	af 92       	push	r10
    1acc:	bf 92       	push	r11
    1ace:	cf 92       	push	r12
    1ad0:	df 92       	push	r13
    1ad2:	ef 92       	push	r14
    1ad4:	ff 92       	push	r15
    1ad6:	0f 93       	push	r16
    1ad8:	1f 93       	push	r17
    1ada:	cf 93       	push	r28
    1adc:	df 93       	push	r29
    ///        // Init DS18B20 sensor
    for(uint8_t i = 0; i <= 5; i++)
    1ade:	61 2c       	mov	r6, r1
    pDS18x20->DS18x20_PORT = DS18x20_PORT;
    1ae0:	0f 2e       	mov	r0, r31
    1ae2:	f3 e4       	ldi	r31, 0x43	; 67
    1ae4:	ef 2e       	mov	r14, r31
    1ae6:	f3 e0       	ldi	r31, 0x03	; 3
    1ae8:	ff 2e       	mov	r15, r31
    1aea:	f0 2d       	mov	r31, r0
    1aec:	0f 2e       	mov	r0, r31
    1aee:	f5 e2       	ldi	r31, 0x25	; 37
    1af0:	8f 2e       	mov	r8, r31
    1af2:	91 2c       	mov	r9, r1
    1af4:	f0 2d       	mov	r31, r0
    1af6:	48 2c       	mov	r4, r8
    1af8:	59 2c       	mov	r5, r9
    1afa:	0f 2e       	mov	r0, r31
    1afc:	fe e4       	ldi	r31, 0x4E	; 78
    1afe:	af 2e       	mov	r10, r31
    1b00:	f3 e0       	ldi	r31, 0x03	; 3
    1b02:	bf 2e       	mov	r11, r31
    1b04:	f0 2d       	mov	r31, r0
    1b06:	04 c0       	rjmp	.+8      	; 0x1b10 <init_ds18b20+0x52>
    {
        if(i!=0)
            delay_ms(1000);
    1b08:	88 ee       	ldi	r24, 0xE8	; 232
    1b0a:	93 e0       	ldi	r25, 0x03	; 3
    1b0c:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
    pDS18x20->DS18x20_PORT = DS18x20_PORT;
    1b10:	d7 01       	movw	r26, r14
    1b12:	4c 92       	st	X, r4
    1b14:	11 96       	adiw	r26, 0x01	; 1
    1b16:	5c 92       	st	X, r5
    1b18:	11 97       	sbiw	r26, 0x01	; 1
    pDS18x20->DS18x20_PIN = DS18x20_PIN;
    1b1a:	12 96       	adiw	r26, 0x02	; 2
    1b1c:	1c 92       	st	X, r1
    1b1e:	12 97       	sbiw	r26, 0x02	; 2
    *(pDS18x20->DS18x20_PORT) &= ~(_BV(pDS18x20->DS18x20_PIN));
    1b20:	f4 01       	movw	r30, r8
    1b22:	80 81       	ld	r24, Z
    1b24:	8e 7f       	andi	r24, 0xFE	; 254
    1b26:	80 83       	st	Z, r24
    *(pDS18x20->DS18x20_PORT-1) &= ~(_BV(pDS18x20->DS18x20_PIN));
    1b28:	ed 91       	ld	r30, X+
    1b2a:	fc 91       	ld	r31, X
    1b2c:	82 91       	ld	r24, -Z
    1b2e:	8e 7f       	andi	r24, 0xFE	; 254
    1b30:	80 83       	st	Z, r24
    if (OWReset(pDS18x20))
    1b32:	c7 01       	movw	r24, r14
    1b34:	0e 94 9f 0c 	call	0x193e	; 0x193e <OWReset>
    1b38:	78 2e       	mov	r7, r24
    1b3a:	88 23       	and	r24, r24
    1b3c:	61 f0       	breq	.+24     	; 0x1b56 <init_ds18b20+0x98>
        if (DS18x20_Init(pDS18x20,&DS18B20_PORT,DS18B20_SENSOR))
        {
            softuart_puts_p(PSTR("Error!!! Can not find 1-Wire device!"));
    1b3e:	8a ef       	ldi	r24, 0xFA	; 250
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	0e 94 45 28 	call	0x508a	; 0x508a <softuart_puts_p>
    for(uint8_t i = 0; i <= 5; i++)
    1b46:	63 94       	inc	r6
    1b48:	f6 e0       	ldi	r31, 0x06	; 6
    1b4a:	6f 16       	cp	r6, r31
    1b4c:	09 f4       	brne	.+2      	; 0x1b50 <init_ds18b20+0x92>
    1b4e:	60 c0       	rjmp	.+192    	; 0x1c10 <init_ds18b20+0x152>
        if(i!=0)
    1b50:	61 10       	cpse	r6, r1
    1b52:	da cf       	rjmp	.-76     	; 0x1b08 <init_ds18b20+0x4a>
    1b54:	dd cf       	rjmp	.-70     	; 0x1b10 <init_ds18b20+0x52>
    OWWriteByte(pDS18x20,READ_ROM);
    1b56:	63 e3       	ldi	r22, 0x33	; 51
    1b58:	c7 01       	movw	r24, r14
    1b5a:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <OWWriteByte>
    for(i=0; i<8; i++)
    1b5e:	0f 2e       	mov	r0, r31
    1b60:	f6 e4       	ldi	r31, 0x46	; 70
    1b62:	cf 2e       	mov	r12, r31
    1b64:	f3 e0       	ldi	r31, 0x03	; 3
    1b66:	df 2e       	mov	r13, r31
    1b68:	f0 2d       	mov	r31, r0
    1b6a:	10 c0       	rjmp	.+32     	; 0x1b8c <init_ds18b20+0xce>
        mask <<= 1;
    1b6c:	11 0f       	add	r17, r17
    while(mask)
    1b6e:	21 97       	sbiw	r28, 0x01	; 1
    1b70:	39 f0       	breq	.+14     	; 0x1b80 <init_ds18b20+0xc2>
        if (OWReadBit(pDS18x20))
    1b72:	c7 01       	movw	r24, r14
    1b74:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <OWReadBit>
    1b78:	88 23       	and	r24, r24
    1b7a:	c1 f3       	breq	.-16     	; 0x1b6c <init_ds18b20+0xae>
            data |= mask;
    1b7c:	01 2b       	or	r16, r17
    1b7e:	f6 cf       	rjmp	.-20     	; 0x1b6c <init_ds18b20+0xae>
        pDS18x20->serialNumber[i]=OWReadByte(pDS18x20);
    1b80:	d6 01       	movw	r26, r12
    1b82:	0d 93       	st	X+, r16
    1b84:	6d 01       	movw	r12, r26
    for(i=0; i<8; i++)
    1b86:	aa 15       	cp	r26, r10
    1b88:	bb 05       	cpc	r27, r11
    1b8a:	29 f0       	breq	.+10     	; 0x1b96 <init_ds18b20+0xd8>
    uint8_t data = 0x00;
    1b8c:	07 2d       	mov	r16, r7
    1b8e:	c8 e0       	ldi	r28, 0x08	; 8
    1b90:	d0 e0       	ldi	r29, 0x00	; 0
    uint8_t mask = 0x01;
    1b92:	11 e0       	ldi	r17, 0x01	; 1
    1b94:	ee cf       	rjmp	.-36     	; 0x1b72 <init_ds18b20+0xb4>
    if (OWCheckCRC(pDS18x20->serialNumber,7)==pDS18x20->serialNumber[7])
    1b96:	67 e0       	ldi	r22, 0x07	; 7
    1b98:	86 e4       	ldi	r24, 0x46	; 70
    1b9a:	93 e0       	ldi	r25, 0x03	; 3
    1b9c:	0e 94 86 0c 	call	0x190c	; 0x190c <OWCheckCRC>
    if (!DS18x20_ReadROM(pDS18x20))
    1ba0:	f7 01       	movw	r30, r14
    1ba2:	92 85       	ldd	r25, Z+10	; 0x0a
    1ba4:	89 13       	cpse	r24, r25
    1ba6:	cb cf       	rjmp	.-106    	; 0x1b3e <init_ds18b20+0x80>
    switch(pDS18x20->serialNumber[0])
    1ba8:	83 81       	ldd	r24, Z+3	; 0x03
    1baa:	80 31       	cpi	r24, 0x10	; 16
    1bac:	09 f4       	brne	.+2      	; 0x1bb0 <init_ds18b20+0xf2>
    1bae:	41 c0       	rjmp	.+130    	; 0x1c32 <init_ds18b20+0x174>
    1bb0:	88 32       	cpi	r24, 0x28	; 40
    1bb2:	29 f6       	brne	.-118    	; 0x1b3e <init_ds18b20+0x80>
        pDS18x20->SensorModel=DS18B20Sensor;
    1bb4:	e3 e4       	ldi	r30, 0x43	; 67
    1bb6:	f3 e0       	ldi	r31, 0x03	; 3
    1bb8:	81 e0       	ldi	r24, 0x01	; 1
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	95 8b       	std	Z+21, r25	; 0x15
    1bbe:	84 8b       	std	Z+20, r24	; 0x14
        pDS18x20->scratchpad[4]=CONF_RES_9b;
    1bc0:	8f e1       	ldi	r24, 0x1F	; 31
    1bc2:	87 87       	std	Z+15, r24	; 0x0f
        }
        else
        {
            softuart_puts_p(PSTR("1-Wire device detected."));
    1bc4:	82 ee       	ldi	r24, 0xE2	; 226
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	0e 94 45 28 	call	0x508a	; 0x508a <softuart_puts_p>
    if (pDS18x20->SensorModel==DS18B20Sensor)
    1bcc:	80 91 57 03 	lds	r24, 0x0357	; 0x800357 <DS18x20+0x14>
    1bd0:	90 91 58 03 	lds	r25, 0x0358	; 0x800358 <DS18x20+0x15>
    1bd4:	01 97       	sbiw	r24, 0x01	; 1
    1bd6:	91 f1       	breq	.+100    	; 0x1c3c <init_ds18b20+0x17e>
    OWReset(pDS18x20);
    1bd8:	83 e4       	ldi	r24, 0x43	; 67
    1bda:	93 e0       	ldi	r25, 0x03	; 3
    1bdc:	0e 94 9f 0c 	call	0x193e	; 0x193e <OWReset>
    OWWriteByte(pDS18x20,SKIP_ROM);
    1be0:	6c ec       	ldi	r22, 0xCC	; 204
    1be2:	83 e4       	ldi	r24, 0x43	; 67
    1be4:	93 e0       	ldi	r25, 0x03	; 3
    1be6:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <OWWriteByte>
    OWWriteByte(pDS18x20,WRITE_SCRATCHPAD);
    1bea:	6e e4       	ldi	r22, 0x4E	; 78
    1bec:	83 e4       	ldi	r24, 0x43	; 67
    1bee:	93 e0       	ldi	r25, 0x03	; 3
    1bf0:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <OWWriteByte>
    OWWriteByte(pDS18x20,pDS18x20->scratchpad[2]);
    1bf4:	c3 e4       	ldi	r28, 0x43	; 67
    1bf6:	d3 e0       	ldi	r29, 0x03	; 3
    1bf8:	6d 85       	ldd	r22, Y+13	; 0x0d
    1bfa:	ce 01       	movw	r24, r28
    1bfc:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <OWWriteByte>
    OWWriteByte(pDS18x20,pDS18x20->scratchpad[3]);
    1c00:	6e 85       	ldd	r22, Y+14	; 0x0e
    1c02:	ce 01       	movw	r24, r28
    1c04:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <OWWriteByte>
    if (pDS18x20->SensorModel == DS18B20Sensor)
    1c08:	8c 89       	ldd	r24, Y+20	; 0x14
    1c0a:	9d 89       	ldd	r25, Y+21	; 0x15
    1c0c:	01 97       	sbiw	r24, 0x01	; 1
    1c0e:	d1 f0       	breq	.+52     	; 0x1c44 <init_ds18b20+0x186>
            DS18x20_SetResolution(pDS18x20,CONF_RES_9b);
            DS18x20_WriteScratchpad(pDS18x20);
            break;
        }
    }
}
    1c10:	df 91       	pop	r29
    1c12:	cf 91       	pop	r28
    1c14:	1f 91       	pop	r17
    1c16:	0f 91       	pop	r16
    1c18:	ff 90       	pop	r15
    1c1a:	ef 90       	pop	r14
    1c1c:	df 90       	pop	r13
    1c1e:	cf 90       	pop	r12
    1c20:	bf 90       	pop	r11
    1c22:	af 90       	pop	r10
    1c24:	9f 90       	pop	r9
    1c26:	8f 90       	pop	r8
    1c28:	7f 90       	pop	r7
    1c2a:	6f 90       	pop	r6
    1c2c:	5f 90       	pop	r5
    1c2e:	4f 90       	pop	r4
    1c30:	08 95       	ret
        pDS18x20->SensorModel=DS18S20Sensor;
    1c32:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <DS18x20+0x15>
    1c36:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <DS18x20+0x14>
        break;
    1c3a:	c4 cf       	rjmp	.-120    	; 0x1bc4 <init_ds18b20+0x106>
        pDS18x20->scratchpad[4]=CONF_REG;
    1c3c:	8f e1       	ldi	r24, 0x1F	; 31
    1c3e:	80 93 52 03 	sts	0x0352, r24	; 0x800352 <DS18x20+0xf>
    1c42:	ca cf       	rjmp	.-108    	; 0x1bd8 <init_ds18b20+0x11a>
        OWWriteByte(pDS18x20,pDS18x20->scratchpad[4]);
    1c44:	60 91 52 03 	lds	r22, 0x0352	; 0x800352 <DS18x20+0xf>
    1c48:	ce 01       	movw	r24, r28
    1c4a:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <OWWriteByte>
}
    1c4e:	e0 cf       	rjmp	.-64     	; 0x1c10 <init_ds18b20+0x152>

00001c50 <get_18b20>:

//**************************************************************************
int8_t get_18b20(void)
{
    1c50:	bf 92       	push	r11
    1c52:	cf 92       	push	r12
    1c54:	df 92       	push	r13
    1c56:	ef 92       	push	r14
    1c58:	ff 92       	push	r15
    1c5a:	0f 93       	push	r16
    1c5c:	1f 93       	push	r17
    1c5e:	cf 93       	push	r28
    1c60:	df 93       	push	r29
    1c62:	00 d0       	rcall	.+0      	; 0x1c64 <get_18b20+0x14>
    1c64:	00 d0       	rcall	.+0      	; 0x1c66 <get_18b20+0x16>
    1c66:	00 d0       	rcall	.+0      	; 0x1c68 <get_18b20+0x18>
    1c68:	cd b7       	in	r28, 0x3d	; 61
    1c6a:	de b7       	in	r29, 0x3e	; 62
    1c6c:	68 94       	set
    1c6e:	bb 24       	eor	r11, r11
    1c70:	b2 f8       	bld	r11, 2
    1c72:	0f 2e       	mov	r0, r31
    1c74:	f7 e5       	ldi	r31, 0x57	; 87
    1c76:	cf 2e       	mov	r12, r31
    1c78:	f3 e0       	ldi	r31, 0x03	; 3
    1c7a:	df 2e       	mov	r13, r31
    1c7c:	f0 2d       	mov	r31, r0
    1c7e:	5e c0       	rjmp	.+188    	; 0x1d3c <get_18b20+0xec>
	__builtin_avr_delay_cycles(__ticks_dc);
    1c80:	2f ef       	ldi	r18, 0xFF	; 255
    1c82:	36 e9       	ldi	r19, 0x96	; 150
    1c84:	44 e0       	ldi	r20, 0x04	; 4
    1c86:	21 50       	subi	r18, 0x01	; 1
    1c88:	30 40       	sbci	r19, 0x00	; 0
    1c8a:	40 40       	sbci	r20, 0x00	; 0
    1c8c:	e1 f7       	brne	.-8      	; 0x1c86 <get_18b20+0x36>
    1c8e:	00 c0       	rjmp	.+0      	; 0x1c90 <get_18b20+0x40>
    1c90:	00 00       	nop
    OWReset(pDS18x20);
    1c92:	83 e4       	ldi	r24, 0x43	; 67
    1c94:	93 e0       	ldi	r25, 0x03	; 3
    1c96:	0e 94 9f 0c 	call	0x193e	; 0x193e <OWReset>
    OWWriteByte(pDS18x20,SKIP_ROM);
    1c9a:	6c ec       	ldi	r22, 0xCC	; 204
    1c9c:	83 e4       	ldi	r24, 0x43	; 67
    1c9e:	93 e0       	ldi	r25, 0x03	; 3
    1ca0:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <OWWriteByte>
    OWWriteByte(pDS18x20,READ_SCRATCHPAD);
    1ca4:	6e eb       	ldi	r22, 0xBE	; 190
    1ca6:	83 e4       	ldi	r24, 0x43	; 67
    1ca8:	93 e0       	ldi	r25, 0x03	; 3
    1caa:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <OWWriteByte>
    for(i=0; i<9; i++)
    1cae:	0f 2e       	mov	r0, r31
    1cb0:	fe e4       	ldi	r31, 0x4E	; 78
    1cb2:	ef 2e       	mov	r14, r31
    1cb4:	f3 e0       	ldi	r31, 0x03	; 3
    1cb6:	ff 2e       	mov	r15, r31
    1cb8:	f0 2d       	mov	r31, r0
    1cba:	2a c0       	rjmp	.+84     	; 0x1d10 <get_18b20+0xc0>
    1cbc:	5f ef       	ldi	r21, 0xFF	; 255
    1cbe:	8d e2       	ldi	r24, 0x2D	; 45
    1cc0:	99 e0       	ldi	r25, 0x09	; 9
    1cc2:	51 50       	subi	r21, 0x01	; 1
    1cc4:	80 40       	sbci	r24, 0x00	; 0
    1cc6:	90 40       	sbci	r25, 0x00	; 0
    1cc8:	e1 f7       	brne	.-8      	; 0x1cc2 <get_18b20+0x72>
    1cca:	00 c0       	rjmp	.+0      	; 0x1ccc <get_18b20+0x7c>
    1ccc:	00 00       	nop
}
    1cce:	e1 cf       	rjmp	.-62     	; 0x1c92 <get_18b20+0x42>
	__builtin_avr_delay_cycles(__ticks_dc);
    1cd0:	af e7       	ldi	r26, 0x7F	; 127
    1cd2:	bf e4       	ldi	r27, 0x4F	; 79
    1cd4:	e2 e1       	ldi	r30, 0x12	; 18
    1cd6:	a1 50       	subi	r26, 0x01	; 1
    1cd8:	b0 40       	sbci	r27, 0x00	; 0
    1cda:	e0 40       	sbci	r30, 0x00	; 0
    1cdc:	e1 f7       	brne	.-8      	; 0x1cd6 <get_18b20+0x86>
    1cde:	00 c0       	rjmp	.+0      	; 0x1ce0 <get_18b20+0x90>
    1ce0:	00 00       	nop
}
    1ce2:	d7 cf       	rjmp	.-82     	; 0x1c92 <get_18b20+0x42>
        mask <<= 1;
    1ce4:	11 0f       	add	r17, r17
    while(mask)
    1ce6:	89 81       	ldd	r24, Y+1	; 0x01
    1ce8:	9a 81       	ldd	r25, Y+2	; 0x02
    1cea:	01 97       	sbiw	r24, 0x01	; 1
    1cec:	9a 83       	std	Y+2, r25	; 0x02
    1cee:	89 83       	std	Y+1, r24	; 0x01
    1cf0:	89 2b       	or	r24, r25
    1cf2:	41 f0       	breq	.+16     	; 0x1d04 <get_18b20+0xb4>
        if (OWReadBit(pDS18x20))
    1cf4:	83 e4       	ldi	r24, 0x43	; 67
    1cf6:	93 e0       	ldi	r25, 0x03	; 3
    1cf8:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <OWReadBit>
    1cfc:	88 23       	and	r24, r24
    1cfe:	91 f3       	breq	.-28     	; 0x1ce4 <get_18b20+0x94>
            data |= mask;
    1d00:	01 2b       	or	r16, r17
    1d02:	f0 cf       	rjmp	.-32     	; 0x1ce4 <get_18b20+0x94>
        pDS18x20->scratchpad[i]=OWReadByte(pDS18x20);
    1d04:	d7 01       	movw	r26, r14
    1d06:	0d 93       	st	X+, r16
    1d08:	7d 01       	movw	r14, r26
    for(i=0; i<9; i++)
    1d0a:	ca 16       	cp	r12, r26
    1d0c:	db 06       	cpc	r13, r27
    1d0e:	39 f0       	breq	.+14     	; 0x1d1e <get_18b20+0xce>
{
    1d10:	48 e0       	ldi	r20, 0x08	; 8
    1d12:	50 e0       	ldi	r21, 0x00	; 0
    1d14:	5a 83       	std	Y+2, r21	; 0x02
    1d16:	49 83       	std	Y+1, r20	; 0x01
    uint8_t mask = 0x01;
    1d18:	11 e0       	ldi	r17, 0x01	; 1
    uint8_t data = 0x00;
    1d1a:	00 e0       	ldi	r16, 0x00	; 0
    1d1c:	eb cf       	rjmp	.-42     	; 0x1cf4 <get_18b20+0xa4>
    if (OWCheckCRC(pDS18x20->scratchpad,8)==pDS18x20->scratchpad[8])
    1d1e:	68 e0       	ldi	r22, 0x08	; 8
    1d20:	8e e4       	ldi	r24, 0x4E	; 78
    1d22:	93 e0       	ldi	r25, 0x03	; 3
    1d24:	0e 94 86 0c 	call	0x190c	; 0x190c <OWCheckCRC>
    for(uint8_t i = 0; i <= 3; i++)
    {
        if (DS18x20_MeasureTemperature(pDS18x20))
    1d28:	90 91 56 03 	lds	r25, 0x0356	; 0x800356 <DS18x20+0x13>
    1d2c:	89 17       	cp	r24, r25
    1d2e:	49 f1       	breq	.+82     	; 0x1d82 <get_18b20+0x132>
        {
            return DS18x20_TemperatureValue(pDS18x20);
        }
        else
        {
            init_ds18b20();
    1d30:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <init_ds18b20>
    for(uint8_t i = 0; i <= 3; i++)
    1d34:	ba 94       	dec	r11
    1d36:	bb 20       	and	r11, r11
    1d38:	09 f4       	brne	.+2      	; 0x1d3c <get_18b20+0xec>
    1d3a:	74 c1       	rjmp	.+744    	; 0x2024 <get_18b20+0x3d4>
    OWReset(pDS18x20);
    1d3c:	83 e4       	ldi	r24, 0x43	; 67
    1d3e:	93 e0       	ldi	r25, 0x03	; 3
    1d40:	0e 94 9f 0c 	call	0x193e	; 0x193e <OWReset>
    OWWriteByte(pDS18x20,SKIP_ROM);
    1d44:	6c ec       	ldi	r22, 0xCC	; 204
    1d46:	83 e4       	ldi	r24, 0x43	; 67
    1d48:	93 e0       	ldi	r25, 0x03	; 3
    1d4a:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <OWWriteByte>
    OWWriteByte(pDS18x20,CONVERT_T);
    1d4e:	64 e4       	ldi	r22, 0x44	; 68
    1d50:	83 e4       	ldi	r24, 0x43	; 67
    1d52:	93 e0       	ldi	r25, 0x03	; 3
    1d54:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <OWWriteByte>
    switch(pDS18x20->scratchpad[4])
    1d58:	80 91 52 03 	lds	r24, 0x0352	; 0x800352 <DS18x20+0xf>
    1d5c:	8f 33       	cpi	r24, 0x3F	; 63
    1d5e:	09 f4       	brne	.+2      	; 0x1d62 <get_18b20+0x112>
    1d60:	ad cf       	rjmp	.-166    	; 0x1cbc <get_18b20+0x6c>
    1d62:	8f 35       	cpi	r24, 0x5F	; 95
    1d64:	09 f4       	brne	.+2      	; 0x1d68 <get_18b20+0x118>
    1d66:	b4 cf       	rjmp	.-152    	; 0x1cd0 <get_18b20+0x80>
    1d68:	8f 31       	cpi	r24, 0x1F	; 31
    1d6a:	09 f4       	brne	.+2      	; 0x1d6e <get_18b20+0x11e>
    1d6c:	89 cf       	rjmp	.-238    	; 0x1c80 <get_18b20+0x30>
	__builtin_avr_delay_cycles(__ticks_dc);
    1d6e:	ff ef       	ldi	r31, 0xFF	; 255
    1d70:	2e e9       	ldi	r18, 0x9E	; 158
    1d72:	34 e2       	ldi	r19, 0x24	; 36
    1d74:	f1 50       	subi	r31, 0x01	; 1
    1d76:	20 40       	sbci	r18, 0x00	; 0
    1d78:	30 40       	sbci	r19, 0x00	; 0
    1d7a:	e1 f7       	brne	.-8      	; 0x1d74 <get_18b20+0x124>
    1d7c:	00 c0       	rjmp	.+0      	; 0x1d7e <get_18b20+0x12e>
    1d7e:	00 00       	nop
}
    1d80:	88 cf       	rjmp	.-240    	; 0x1c92 <get_18b20+0x42>
    Temperature = pDS18x20->scratchpad[1];
    1d82:	e3 e4       	ldi	r30, 0x43	; 67
    1d84:	f3 e0       	ldi	r31, 0x03	; 3
    1d86:	24 85       	ldd	r18, Z+12	; 0x0c
    Temperature |= pDS18x20->scratchpad[0];
    1d88:	83 85       	ldd	r24, Z+11	; 0x0b
    1d8a:	92 2f       	mov	r25, r18
    if (Temperature<0)
    1d8c:	22 23       	and	r18, r18
    1d8e:	0c f4       	brge	.+2      	; 0x1d92 <get_18b20+0x142>
    1d90:	4f c0       	rjmp	.+158    	; 0x1e30 <get_18b20+0x1e0>
    int8_t sign=1;
    1d92:	e1 e0       	ldi	r30, 0x01	; 1
    1d94:	ed 83       	std	Y+5, r30	; 0x05
    if (pDS18x20->SensorModel==DS18S20Sensor)
    1d96:	20 91 57 03 	lds	r18, 0x0357	; 0x800357 <DS18x20+0x14>
    1d9a:	30 91 58 03 	lds	r19, 0x0358	; 0x800358 <DS18x20+0x15>
    1d9e:	23 2b       	or	r18, r19
    1da0:	09 f4       	brne	.+2      	; 0x1da4 <get_18b20+0x154>
    1da2:	49 c0       	rjmp	.+146    	; 0x1e36 <get_18b20+0x1e6>
    switch(pDS18x20->scratchpad[4])
    1da4:	20 91 52 03 	lds	r18, 0x0352	; 0x800352 <DS18x20+0xf>
    1da8:	2f 35       	cpi	r18, 0x5F	; 95
    1daa:	09 f4       	brne	.+2      	; 0x1dae <get_18b20+0x15e>
    1dac:	9f c0       	rjmp	.+318    	; 0x1eec <get_18b20+0x29c>
    1dae:	08 f0       	brcs	.+2      	; 0x1db2 <get_18b20+0x162>
    1db0:	6b c0       	rjmp	.+214    	; 0x1e88 <get_18b20+0x238>
    1db2:	2f 31       	cpi	r18, 0x1F	; 31
    1db4:	09 f4       	brne	.+2      	; 0x1db8 <get_18b20+0x168>
    1db6:	d6 c0       	rjmp	.+428    	; 0x1f64 <get_18b20+0x314>
    1db8:	2f 33       	cpi	r18, 0x3F	; 63
    1dba:	09 f0       	breq	.+2      	; 0x1dbe <get_18b20+0x16e>
    1dbc:	63 c0       	rjmp	.+198    	; 0x1e84 <get_18b20+0x234>
        return sign*(abs(Temperature)/4) * 0.25;
    1dbe:	9c 01       	movw	r18, r24
    1dc0:	99 23       	and	r25, r25
    1dc2:	0c f4       	brge	.+2      	; 0x1dc6 <get_18b20+0x176>
    1dc4:	8c c0       	rjmp	.+280    	; 0x1ede <get_18b20+0x28e>
    1dc6:	c9 01       	movw	r24, r18
    1dc8:	99 23       	and	r25, r25
    1dca:	0c f4       	brge	.+2      	; 0x1dce <get_18b20+0x17e>
    1dcc:	8d c0       	rjmp	.+282    	; 0x1ee8 <get_18b20+0x298>
    1dce:	3d 81       	ldd	r19, Y+5	; 0x05
    1dd0:	63 2f       	mov	r22, r19
    1dd2:	33 0f       	add	r19, r19
    1dd4:	77 0b       	sbc	r23, r23
    1dd6:	95 95       	asr	r25
    1dd8:	87 95       	ror	r24
    1dda:	95 95       	asr	r25
    1ddc:	87 95       	ror	r24
    1dde:	0e 94 05 2f 	call	0x5e0a	; 0x5e0a <__mulvhi3>
    1de2:	9c 01       	movw	r18, r24
    1de4:	99 0f       	add	r25, r25
    1de6:	44 0b       	sbc	r20, r20
    1de8:	55 0b       	sbc	r21, r21
    1dea:	29 83       	std	Y+1, r18	; 0x01
    1dec:	3a 83       	std	Y+2, r19	; 0x02
    1dee:	4b 83       	std	Y+3, r20	; 0x03
    1df0:	5c 83       	std	Y+4, r21	; 0x04
    1df2:	ca 01       	movw	r24, r20
    1df4:	b9 01       	movw	r22, r18
    1df6:	0e 94 ff 2f 	call	0x5ffe	; 0x5ffe <__floatsisf>
    1dfa:	e6 2f       	mov	r30, r22
    1dfc:	20 e0       	ldi	r18, 0x00	; 0
    1dfe:	30 e0       	ldi	r19, 0x00	; 0
    1e00:	40 e8       	ldi	r20, 0x80	; 128
    1e02:	5e e3       	ldi	r21, 0x3E	; 62
    1e04:	e9 83       	std	Y+1, r30	; 0x01
    1e06:	7a 83       	std	Y+2, r23	; 0x02
    1e08:	8b 83       	std	Y+3, r24	; 0x03
    1e0a:	9c 83       	std	Y+4, r25	; 0x04
    1e0c:	69 81       	ldd	r22, Y+1	; 0x01
    1e0e:	7a 81       	ldd	r23, Y+2	; 0x02
    1e10:	8b 81       	ldd	r24, Y+3	; 0x03
    1e12:	9c 81       	ldd	r25, Y+4	; 0x04
    1e14:	0e 94 63 30 	call	0x60c6	; 0x60c6 <__mulsf3>
    1e18:	69 83       	std	Y+1, r22	; 0x01
    1e1a:	7a 83       	std	Y+2, r23	; 0x02
    1e1c:	8b 83       	std	Y+3, r24	; 0x03
    1e1e:	9c 83       	std	Y+4, r25	; 0x04
    1e20:	69 81       	ldd	r22, Y+1	; 0x01
    1e22:	7a 81       	ldd	r23, Y+2	; 0x02
    1e24:	8b 81       	ldd	r24, Y+3	; 0x03
    1e26:	9c 81       	ldd	r25, Y+4	; 0x04
    1e28:	0e 94 c7 2f 	call	0x5f8e	; 0x5f8e <__fixsfsi>
    1e2c:	86 2f       	mov	r24, r22
    1e2e:	fb c0       	rjmp	.+502    	; 0x2026 <get_18b20+0x3d6>
        sign=-1;
    1e30:	bf ef       	ldi	r27, 0xFF	; 255
    1e32:	bd 83       	std	Y+5, r27	; 0x05
    1e34:	b0 cf       	rjmp	.-160    	; 0x1d96 <get_18b20+0x146>
        return Temperature * 0.5;
    1e36:	9c 01       	movw	r18, r24
    1e38:	99 0f       	add	r25, r25
    1e3a:	44 0b       	sbc	r20, r20
    1e3c:	55 0b       	sbc	r21, r21
    1e3e:	29 83       	std	Y+1, r18	; 0x01
    1e40:	3a 83       	std	Y+2, r19	; 0x02
    1e42:	4b 83       	std	Y+3, r20	; 0x03
    1e44:	5c 83       	std	Y+4, r21	; 0x04
    1e46:	ca 01       	movw	r24, r20
    1e48:	b9 01       	movw	r22, r18
    1e4a:	0e 94 ff 2f 	call	0x5ffe	; 0x5ffe <__floatsisf>
    1e4e:	e6 2f       	mov	r30, r22
    1e50:	20 e0       	ldi	r18, 0x00	; 0
    1e52:	30 e0       	ldi	r19, 0x00	; 0
    1e54:	40 e0       	ldi	r20, 0x00	; 0
    1e56:	5f e3       	ldi	r21, 0x3F	; 63
    1e58:	e9 83       	std	Y+1, r30	; 0x01
    1e5a:	7a 83       	std	Y+2, r23	; 0x02
    1e5c:	8b 83       	std	Y+3, r24	; 0x03
    1e5e:	9c 83       	std	Y+4, r25	; 0x04
    1e60:	69 81       	ldd	r22, Y+1	; 0x01
    1e62:	7a 81       	ldd	r23, Y+2	; 0x02
    1e64:	8b 81       	ldd	r24, Y+3	; 0x03
    1e66:	9c 81       	ldd	r25, Y+4	; 0x04
    1e68:	0e 94 63 30 	call	0x60c6	; 0x60c6 <__mulsf3>
    1e6c:	69 83       	std	Y+1, r22	; 0x01
    1e6e:	7a 83       	std	Y+2, r23	; 0x02
    1e70:	8b 83       	std	Y+3, r24	; 0x03
    1e72:	9c 83       	std	Y+4, r25	; 0x04
    1e74:	69 81       	ldd	r22, Y+1	; 0x01
    1e76:	7a 81       	ldd	r23, Y+2	; 0x02
    1e78:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e7c:	0e 94 c7 2f 	call	0x5f8e	; 0x5f8e <__fixsfsi>
    1e80:	86 2f       	mov	r24, r22
    1e82:	d1 c0       	rjmp	.+418    	; 0x2026 <get_18b20+0x3d6>
    switch(pDS18x20->scratchpad[4])
    1e84:	80 e0       	ldi	r24, 0x00	; 0
    1e86:	cf c0       	rjmp	.+414    	; 0x2026 <get_18b20+0x3d6>
    1e88:	2f 37       	cpi	r18, 0x7F	; 127
    1e8a:	39 f5       	brne	.+78     	; 0x1eda <get_18b20+0x28a>
        return Temperature * 0.0625;
    1e8c:	9c 01       	movw	r18, r24
    1e8e:	99 0f       	add	r25, r25
    1e90:	44 0b       	sbc	r20, r20
    1e92:	55 0b       	sbc	r21, r21
    1e94:	29 83       	std	Y+1, r18	; 0x01
    1e96:	3a 83       	std	Y+2, r19	; 0x02
    1e98:	4b 83       	std	Y+3, r20	; 0x03
    1e9a:	5c 83       	std	Y+4, r21	; 0x04
    1e9c:	ca 01       	movw	r24, r20
    1e9e:	b9 01       	movw	r22, r18
    1ea0:	0e 94 ff 2f 	call	0x5ffe	; 0x5ffe <__floatsisf>
    1ea4:	e6 2f       	mov	r30, r22
    1ea6:	20 e0       	ldi	r18, 0x00	; 0
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	40 e8       	ldi	r20, 0x80	; 128
    1eac:	5d e3       	ldi	r21, 0x3D	; 61
    1eae:	e9 83       	std	Y+1, r30	; 0x01
    1eb0:	7a 83       	std	Y+2, r23	; 0x02
    1eb2:	8b 83       	std	Y+3, r24	; 0x03
    1eb4:	9c 83       	std	Y+4, r25	; 0x04
    1eb6:	69 81       	ldd	r22, Y+1	; 0x01
    1eb8:	7a 81       	ldd	r23, Y+2	; 0x02
    1eba:	8b 81       	ldd	r24, Y+3	; 0x03
    1ebc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ebe:	0e 94 63 30 	call	0x60c6	; 0x60c6 <__mulsf3>
    1ec2:	69 83       	std	Y+1, r22	; 0x01
    1ec4:	7a 83       	std	Y+2, r23	; 0x02
    1ec6:	8b 83       	std	Y+3, r24	; 0x03
    1ec8:	9c 83       	std	Y+4, r25	; 0x04
    1eca:	69 81       	ldd	r22, Y+1	; 0x01
    1ecc:	7a 81       	ldd	r23, Y+2	; 0x02
    1ece:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ed2:	0e 94 c7 2f 	call	0x5f8e	; 0x5f8e <__fixsfsi>
    1ed6:	86 2f       	mov	r24, r22
    1ed8:	a6 c0       	rjmp	.+332    	; 0x2026 <get_18b20+0x3d6>
    switch(pDS18x20->scratchpad[4])
    1eda:	80 e0       	ldi	r24, 0x00	; 0
    1edc:	a4 c0       	rjmp	.+328    	; 0x2026 <get_18b20+0x3d6>
        return sign*(abs(Temperature)/4) * 0.25;
    1ede:	0e 94 27 2f 	call	0x5e4e	; 0x5e4e <__negvhi2>
    1ee2:	28 2f       	mov	r18, r24
    1ee4:	39 2f       	mov	r19, r25
    1ee6:	6f cf       	rjmp	.-290    	; 0x1dc6 <get_18b20+0x176>
    1ee8:	03 96       	adiw	r24, 0x03	; 3
    1eea:	71 cf       	rjmp	.-286    	; 0x1dce <get_18b20+0x17e>
        return sign*(abs(Temperature)/2) * 0.125;
    1eec:	9c 01       	movw	r18, r24
    1eee:	99 23       	and	r25, r25
    1ef0:	94 f1       	brlt	.+100    	; 0x1f56 <get_18b20+0x306>
    1ef2:	c9 01       	movw	r24, r18
    1ef4:	99 23       	and	r25, r25
    1ef6:	a4 f1       	brlt	.+104    	; 0x1f60 <get_18b20+0x310>
    1ef8:	3d 81       	ldd	r19, Y+5	; 0x05
    1efa:	63 2f       	mov	r22, r19
    1efc:	33 0f       	add	r19, r19
    1efe:	77 0b       	sbc	r23, r23
    1f00:	95 95       	asr	r25
    1f02:	87 95       	ror	r24
    1f04:	0e 94 05 2f 	call	0x5e0a	; 0x5e0a <__mulvhi3>
    1f08:	9c 01       	movw	r18, r24
    1f0a:	99 0f       	add	r25, r25
    1f0c:	44 0b       	sbc	r20, r20
    1f0e:	55 0b       	sbc	r21, r21
    1f10:	29 83       	std	Y+1, r18	; 0x01
    1f12:	3a 83       	std	Y+2, r19	; 0x02
    1f14:	4b 83       	std	Y+3, r20	; 0x03
    1f16:	5c 83       	std	Y+4, r21	; 0x04
    1f18:	ca 01       	movw	r24, r20
    1f1a:	b9 01       	movw	r22, r18
    1f1c:	0e 94 ff 2f 	call	0x5ffe	; 0x5ffe <__floatsisf>
    1f20:	e6 2f       	mov	r30, r22
    1f22:	20 e0       	ldi	r18, 0x00	; 0
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	40 e0       	ldi	r20, 0x00	; 0
    1f28:	5e e3       	ldi	r21, 0x3E	; 62
    1f2a:	e9 83       	std	Y+1, r30	; 0x01
    1f2c:	7a 83       	std	Y+2, r23	; 0x02
    1f2e:	8b 83       	std	Y+3, r24	; 0x03
    1f30:	9c 83       	std	Y+4, r25	; 0x04
    1f32:	69 81       	ldd	r22, Y+1	; 0x01
    1f34:	7a 81       	ldd	r23, Y+2	; 0x02
    1f36:	8b 81       	ldd	r24, Y+3	; 0x03
    1f38:	9c 81       	ldd	r25, Y+4	; 0x04
    1f3a:	0e 94 63 30 	call	0x60c6	; 0x60c6 <__mulsf3>
    1f3e:	69 83       	std	Y+1, r22	; 0x01
    1f40:	7a 83       	std	Y+2, r23	; 0x02
    1f42:	8b 83       	std	Y+3, r24	; 0x03
    1f44:	9c 83       	std	Y+4, r25	; 0x04
    1f46:	69 81       	ldd	r22, Y+1	; 0x01
    1f48:	7a 81       	ldd	r23, Y+2	; 0x02
    1f4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f4e:	0e 94 c7 2f 	call	0x5f8e	; 0x5f8e <__fixsfsi>
    1f52:	86 2f       	mov	r24, r22
    1f54:	68 c0       	rjmp	.+208    	; 0x2026 <get_18b20+0x3d6>
    1f56:	0e 94 27 2f 	call	0x5e4e	; 0x5e4e <__negvhi2>
    1f5a:	28 2f       	mov	r18, r24
    1f5c:	39 2f       	mov	r19, r25
    1f5e:	c9 cf       	rjmp	.-110    	; 0x1ef2 <get_18b20+0x2a2>
    1f60:	01 96       	adiw	r24, 0x01	; 1
    1f62:	ca cf       	rjmp	.-108    	; 0x1ef8 <get_18b20+0x2a8>
        return (int8_t)(sign*(abs(Temperature)*0.125) * 0.5);
    1f64:	9c 01       	movw	r18, r24
    1f66:	99 23       	and	r25, r25
    1f68:	0c f4       	brge	.+2      	; 0x1f6c <get_18b20+0x31c>
    1f6a:	57 c0       	rjmp	.+174    	; 0x201a <get_18b20+0x3ca>
    1f6c:	c9 01       	movw	r24, r18
    1f6e:	33 0f       	add	r19, r19
    1f70:	aa 0b       	sbc	r26, r26
    1f72:	bb 0b       	sbc	r27, r27
    1f74:	89 83       	std	Y+1, r24	; 0x01
    1f76:	9a 83       	std	Y+2, r25	; 0x02
    1f78:	ab 83       	std	Y+3, r26	; 0x03
    1f7a:	bc 83       	std	Y+4, r27	; 0x04
    1f7c:	bc 01       	movw	r22, r24
    1f7e:	cd 01       	movw	r24, r26
    1f80:	0e 94 ff 2f 	call	0x5ffe	; 0x5ffe <__floatsisf>
    1f84:	e6 2f       	mov	r30, r22
    1f86:	20 e0       	ldi	r18, 0x00	; 0
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	40 e0       	ldi	r20, 0x00	; 0
    1f8c:	5e e3       	ldi	r21, 0x3E	; 62
    1f8e:	e9 83       	std	Y+1, r30	; 0x01
    1f90:	7a 83       	std	Y+2, r23	; 0x02
    1f92:	8b 83       	std	Y+3, r24	; 0x03
    1f94:	9c 83       	std	Y+4, r25	; 0x04
    1f96:	69 81       	ldd	r22, Y+1	; 0x01
    1f98:	7a 81       	ldd	r23, Y+2	; 0x02
    1f9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f9e:	0e 94 63 30 	call	0x60c6	; 0x60c6 <__mulsf3>
    1fa2:	f6 2e       	mov	r15, r22
    1fa4:	07 2f       	mov	r16, r23
    1fa6:	18 2f       	mov	r17, r24
    1fa8:	9e 83       	std	Y+6, r25	; 0x06
    1faa:	2d 81       	ldd	r18, Y+5	; 0x05
    1fac:	02 2e       	mov	r0, r18
    1fae:	00 0c       	add	r0, r0
    1fb0:	33 0b       	sbc	r19, r19
    1fb2:	44 0b       	sbc	r20, r20
    1fb4:	55 0b       	sbc	r21, r21
    1fb6:	29 83       	std	Y+1, r18	; 0x01
    1fb8:	3a 83       	std	Y+2, r19	; 0x02
    1fba:	4b 83       	std	Y+3, r20	; 0x03
    1fbc:	5c 83       	std	Y+4, r21	; 0x04
    1fbe:	ca 01       	movw	r24, r20
    1fc0:	b9 01       	movw	r22, r18
    1fc2:	0e 94 ff 2f 	call	0x5ffe	; 0x5ffe <__floatsisf>
    1fc6:	26 2f       	mov	r18, r22
    1fc8:	37 2f       	mov	r19, r23
    1fca:	48 2f       	mov	r20, r24
    1fcc:	59 2f       	mov	r21, r25
    1fce:	f9 82       	std	Y+1, r15	; 0x01
    1fd0:	0a 83       	std	Y+2, r16	; 0x02
    1fd2:	1b 83       	std	Y+3, r17	; 0x03
    1fd4:	8e 81       	ldd	r24, Y+6	; 0x06
    1fd6:	8c 83       	std	Y+4, r24	; 0x04
    1fd8:	69 81       	ldd	r22, Y+1	; 0x01
    1fda:	7a 81       	ldd	r23, Y+2	; 0x02
    1fdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1fde:	9c 81       	ldd	r25, Y+4	; 0x04
    1fe0:	0e 94 63 30 	call	0x60c6	; 0x60c6 <__mulsf3>
    1fe4:	e6 2f       	mov	r30, r22
    1fe6:	20 e0       	ldi	r18, 0x00	; 0
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	40 e0       	ldi	r20, 0x00	; 0
    1fec:	5f e3       	ldi	r21, 0x3F	; 63
    1fee:	e9 83       	std	Y+1, r30	; 0x01
    1ff0:	7a 83       	std	Y+2, r23	; 0x02
    1ff2:	8b 83       	std	Y+3, r24	; 0x03
    1ff4:	9c 83       	std	Y+4, r25	; 0x04
    1ff6:	69 81       	ldd	r22, Y+1	; 0x01
    1ff8:	7a 81       	ldd	r23, Y+2	; 0x02
    1ffa:	8b 81       	ldd	r24, Y+3	; 0x03
    1ffc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ffe:	0e 94 63 30 	call	0x60c6	; 0x60c6 <__mulsf3>
    2002:	69 83       	std	Y+1, r22	; 0x01
    2004:	7a 83       	std	Y+2, r23	; 0x02
    2006:	8b 83       	std	Y+3, r24	; 0x03
    2008:	9c 83       	std	Y+4, r25	; 0x04
    200a:	69 81       	ldd	r22, Y+1	; 0x01
    200c:	7a 81       	ldd	r23, Y+2	; 0x02
    200e:	8b 81       	ldd	r24, Y+3	; 0x03
    2010:	9c 81       	ldd	r25, Y+4	; 0x04
    2012:	0e 94 c7 2f 	call	0x5f8e	; 0x5f8e <__fixsfsi>
    2016:	86 2f       	mov	r24, r22
    2018:	06 c0       	rjmp	.+12     	; 0x2026 <get_18b20+0x3d6>
    201a:	0e 94 27 2f 	call	0x5e4e	; 0x5e4e <__negvhi2>
    201e:	28 2f       	mov	r18, r24
    2020:	39 2f       	mov	r19, r25
    2022:	a4 cf       	rjmp	.-184    	; 0x1f6c <get_18b20+0x31c>
        }
    }
    return 0;
    2024:	80 e0       	ldi	r24, 0x00	; 0
}
    2026:	26 96       	adiw	r28, 0x06	; 6
    2028:	0f b6       	in	r0, 0x3f	; 63
    202a:	f8 94       	cli
    202c:	de bf       	out	0x3e, r29	; 62
    202e:	0f be       	out	0x3f, r0	; 63
    2030:	cd bf       	out	0x3d, r28	; 61
    2032:	df 91       	pop	r29
    2034:	cf 91       	pop	r28
    2036:	1f 91       	pop	r17
    2038:	0f 91       	pop	r16
    203a:	ff 90       	pop	r15
    203c:	ef 90       	pop	r14
    203e:	df 90       	pop	r13
    2040:	cf 90       	pop	r12
    2042:	bf 90       	pop	r11
    2044:	08 95       	ret

00002046 <eeprom_save_config>:

//*******************************************************************************************************************
void eeprom_save_config(void)
{
    //softuart_puts_p(PSTR("eeprom_save_config"));
    config.time_from_motion_s = get_time_from_motion_s();
    2046:	0e 94 db 2d 	call	0x5bb6	; 0x5bb6 <get_time_from_motion_s>
    204a:	60 93 59 03 	sts	0x0359, r22	; 0x800359 <config>
    204e:	70 93 5a 03 	sts	0x035A, r23	; 0x80035a <config+0x1>
    2052:	80 93 5b 03 	sts	0x035B, r24	; 0x80035b <config+0x2>
    2056:	90 93 5c 03 	sts	0x035C, r25	; 0x80035c <config+0x3>
    eeprom_write_block((void*)&config, 0, sizeof(config_t));
    205a:	4e e5       	ldi	r20, 0x5E	; 94
    205c:	50 e0       	ldi	r21, 0x00	; 0
    205e:	70 e0       	ldi	r23, 0x00	; 0
    2060:	60 e0       	ldi	r22, 0x00	; 0
    2062:	89 e5       	ldi	r24, 0x59	; 89
    2064:	93 e0       	ldi	r25, 0x03	; 3
    2066:	0e 94 50 37 	call	0x6ea0	; 0x6ea0 <eeprom_write_block>
}
    206a:	08 95       	ret

0000206c <eeprom_read_config>:
{
    206c:	1f 93       	push	r17
    206e:	cf 93       	push	r28
    2070:	df 93       	push	r29
    2072:	18 2f       	mov	r17, r24
    eeprom_read_block((void*)&config, 0, sizeof(config_t));
    2074:	4e e5       	ldi	r20, 0x5E	; 94
    2076:	50 e0       	ldi	r21, 0x00	; 0
    2078:	70 e0       	ldi	r23, 0x00	; 0
    207a:	60 e0       	ldi	r22, 0x00	; 0
    207c:	89 e5       	ldi	r24, 0x59	; 89
    207e:	93 e0       	ldi	r25, 0x03	; 3
    2080:	0e 94 1e 37 	call	0x6e3c	; 0x6e3c <eeprom_read_block>
    if(config.first_usage != 0xAB)
    2084:	80 91 b3 03 	lds	r24, 0x03B3	; 0x8003b3 <config+0x5a>
    2088:	8b 3a       	cpi	r24, 0xAB	; 171
    208a:	31 f4       	brne	.+12     	; 0x2098 <eeprom_read_config+0x2c>
    if(start)
    208c:	11 11       	cpse	r17, r1
    208e:	34 c0       	rjmp	.+104    	; 0x20f8 <eeprom_read_config+0x8c>
}
    2090:	df 91       	pop	r29
    2092:	cf 91       	pop	r28
    2094:	1f 91       	pop	r17
    2096:	08 95       	ret
        memset(&config, 0, sizeof(config_t));
    2098:	c9 e5       	ldi	r28, 0x59	; 89
    209a:	d3 e0       	ldi	r29, 0x03	; 3
    209c:	8e e5       	ldi	r24, 0x5E	; 94
    209e:	fe 01       	movw	r30, r28
    20a0:	11 92       	st	Z+, r1
    20a2:	8a 95       	dec	r24
    20a4:	e9 f7       	brne	.-6      	; 0x20a0 <eeprom_read_config+0x34>
        softuart_puts_p(PSTR("eeprom_first_set"));
    20a6:	8d e2       	ldi	r24, 0x2D	; 45
    20a8:	91 e0       	ldi	r25, 0x01	; 1
    20aa:	0e 94 45 28 	call	0x508a	; 0x508a <softuart_puts_p>
        config.interval_after_button_m = 3;
    20ae:	83 e0       	ldi	r24, 0x03	; 3
    20b0:	90 e0       	ldi	r25, 0x00	; 0
    20b2:	9e 83       	std	Y+6, r25	; 0x06
    20b4:	8d 83       	std	Y+5, r24	; 0x05
        config.interval_after_motion_m = 60;
    20b6:	8c e3       	ldi	r24, 0x3C	; 60
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	98 87       	std	Y+8, r25	; 0x08
    20bc:	8f 83       	std	Y+7, r24	; 0x07
{
    return p_config->interval_power_off_report_m;
}
void set_interval_power_off_report(uint8_t minute)
{
    p_config->interval_power_off_report_m = minute;
    20be:	81 e0       	ldi	r24, 0x01	; 1
    20c0:	89 87       	std	Y+9, r24	; 0x09
{
    return p_config->interval_power_on_report_m;
}
void set_interval_power_on_report(uint8_t minute)
{
    p_config->interval_power_on_report_m = minute;
    20c2:	92 e0       	ldi	r25, 0x02	; 2
    20c4:	9a 87       	std	Y+10, r25	; 0x0a
        config.autoguard = 1;
    20c6:	80 93 b1 03 	sts	0x03B1, r24	; 0x8003b1 <config+0x58>
        config.zone_mask = 0xF0;
    20ca:	80 ef       	ldi	r24, 0xF0	; 240
    20cc:	80 93 b2 03 	sts	0x03B2, r24	; 0x8003b2 <config+0x59>
        config.mtime_sens = 7000;
    20d0:	88 e5       	ldi	r24, 0x58	; 88
    20d2:	9b e1       	ldi	r25, 0x1B	; 27
    20d4:	9e 87       	std	Y+14, r25	; 0x0e
    20d6:	8d 87       	std	Y+13, r24	; 0x0d
        config.pause_alarm_report_s = 5;
    20d8:	85 e0       	ldi	r24, 0x05	; 5
    20da:	8b 87       	std	Y+11, r24	; 0x0b
        config.first_usage = 0xAB;
    20dc:	8b ea       	ldi	r24, 0xAB	; 171
    20de:	80 93 b3 03 	sts	0x03B3, r24	; 0x8003b3 <config+0x5a>
        memcpy_P(p_config->admin_phone[0], PSTR("+380713318090"), 13);
    20e2:	4d e0       	ldi	r20, 0x0D	; 13
    20e4:	50 e0       	ldi	r21, 0x00	; 0
    20e6:	6f e1       	ldi	r22, 0x1F	; 31
    20e8:	71 e0       	ldi	r23, 0x01	; 1
    20ea:	89 e6       	ldi	r24, 0x69	; 105
    20ec:	93 e0       	ldi	r25, 0x03	; 3
    20ee:	0e 94 a1 33 	call	0x6742	; 0x6742 <memcpy_P>
        eeprom_save_config();
    20f2:	0e 94 23 10 	call	0x2046	; 0x2046 <eeprom_save_config>
    20f6:	ca cf       	rjmp	.-108    	; 0x208c <eeprom_read_config+0x20>
        set_time_from_motion_s(config.time_from_motion_s);
    20f8:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <config>
    20fc:	0e 94 cc 2d 	call	0x5b98	; 0x5b98 <set_time_from_motion_s>
}
    2100:	c7 cf       	rjmp	.-114    	; 0x2090 <eeprom_read_config+0x24>

00002102 <EEPROM_update>:
    eeprom_update_block((void*)&config, 0, sizeof(config_t));
    2102:	4e e5       	ldi	r20, 0x5E	; 94
    2104:	50 e0       	ldi	r21, 0x00	; 0
    2106:	70 e0       	ldi	r23, 0x00	; 0
    2108:	60 e0       	ldi	r22, 0x00	; 0
    210a:	89 e5       	ldi	r24, 0x59	; 89
    210c:	93 e0       	ldi	r25, 0x03	; 3
    210e:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <eeprom_update_block>
}
    2112:	08 95       	ret

00002114 <set_accept_calls>:
    p_config->accept_calls = on_off;
    2114:	80 93 b5 03 	sts	0x03B5, r24	; 0x8003b5 <config+0x5c>
}
    2118:	08 95       	ret

0000211a <get_accept_calls>:
}
    211a:	80 91 b5 03 	lds	r24, 0x03B5	; 0x8003b5 <config+0x5c>
    211e:	08 95       	ret

00002120 <set_accept_sms>:
    p_config->accept_sms = on_off;
    2120:	80 93 b6 03 	sts	0x03B6, r24	; 0x8003b6 <config+0x5d>
}
    2124:	08 95       	ret

00002126 <get_accept_sms>:
}
    2126:	80 91 b6 03 	lds	r24, 0x03B6	; 0x8003b6 <config+0x5d>
    212a:	08 95       	ret

0000212c <get_interval_power_off_report>:
}
    212c:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <config+0x9>
    2130:	08 95       	ret

00002132 <set_interval_power_off_report>:
    p_config->interval_power_off_report_m = minute;
    2132:	80 93 62 03 	sts	0x0362, r24	; 0x800362 <config+0x9>
}
    2136:	08 95       	ret

00002138 <get_interval_power_on_report>:
}
    2138:	80 91 63 03 	lds	r24, 0x0363	; 0x800363 <config+0xa>
    213c:	08 95       	ret

0000213e <set_interval_power_on_report>:
    p_config->interval_power_on_report_m = minute;
    213e:	80 93 63 03 	sts	0x0363, r24	; 0x800363 <config+0xa>
}
    2142:	08 95       	ret

00002144 <get_guard>:

//***********************************************
uint8_t get_guard(void)
{
    return p_config->guard;
}
    2144:	80 91 af 03 	lds	r24, 0x03AF	; 0x8003af <config+0x56>
    2148:	08 95       	ret

0000214a <set_guard>:
void set_guard(uint8_t state)
{
    p_config->guard = state;
    214a:	80 93 af 03 	sts	0x03AF, r24	; 0x8003af <config+0x56>
}
    214e:	08 95       	ret

00002150 <get_local_guard>:

//***********************************************
uint8_t get_local_guard(void)
{
    return p_config->local_guard;
}
    2150:	80 91 b0 03 	lds	r24, 0x03B0	; 0x8003b0 <config+0x57>
    2154:	08 95       	ret

00002156 <set_local_guard>:
void set_local_guard(uint8_t state)
{
    p_config->local_guard = state;
    2156:	80 93 b0 03 	sts	0x03B0, r24	; 0x8003b0 <config+0x57>
}
    215a:	08 95       	ret

0000215c <get_phones>:

//**********************************************************************
char* get_phones(uint8_t  i)
{
    char *ptr = p_config->admin_phone[i];
    215c:	27 e0       	ldi	r18, 0x07	; 7
    215e:	82 9f       	mul	r24, r18
    2160:	c0 01       	movw	r24, r0
    2162:	11 24       	eor	r1, r1
    2164:	88 0f       	add	r24, r24
    2166:	99 1f       	adc	r25, r25
    return ptr;
}
    2168:	87 59       	subi	r24, 0x97	; 151
    216a:	9c 4f       	sbci	r25, 0xFC	; 252
    216c:	08 95       	ret

0000216e <set_reset_count_mcu>:

//**********************************************************************
void set_reset_count_mcu(uint8_t cnt)
{
    p_config->reset_count_mcu = cnt;
    216e:	80 93 5d 03 	sts	0x035D, r24	; 0x80035d <config+0x4>
}
    2172:	08 95       	ret

00002174 <get_reset_count_mcu>:
uint8_t get_reset_count_mcu(void)
{
   return p_config->reset_count_mcu;
}
    2174:	80 91 5d 03 	lds	r24, 0x035D	; 0x80035d <config+0x4>
    2178:	08 95       	ret

0000217a <inc_reset_count_mcu>:
void inc_reset_count_mcu(void)
{
    p_config->reset_count_mcu++;
    217a:	e9 e5       	ldi	r30, 0x59	; 89
    217c:	f3 e0       	ldi	r31, 0x03	; 3
    217e:	84 81       	ldd	r24, Z+4	; 0x04
    2180:	8f 5f       	subi	r24, 0xFF	; 255
    2182:	84 83       	std	Z+4, r24	; 0x04
}
    2184:	08 95       	ret

00002186 <get_first_m>:

//***********************************************
uint8_t get_first_m(void)
{
    return p_config->first_m;
}
    2186:	80 91 b4 03 	lds	r24, 0x03B4	; 0x8003b4 <config+0x5b>
    218a:	08 95       	ret

0000218c <set_first_m>:
void set_first_m(uint8_t state)
{
    p_config->first_m = state;
    218c:	80 93 b4 03 	sts	0x03B4, r24	; 0x8003b4 <config+0x5b>
}
    2190:	08 95       	ret

00002192 <get_zone_mask>:

//***********************************************
char get_zone_mask(void)
{
    return p_config->zone_mask;
}
    2192:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <config+0x59>
    2196:	08 95       	ret

00002198 <set_zone_mask>:
void set_zone_mask(char state)
{
    p_config->zone_mask = state;
    2198:	80 93 b2 03 	sts	0x03B2, r24	; 0x8003b2 <config+0x59>
}
    219c:	08 95       	ret

0000219e <get_mtime_sens>:

//***********************************************
uint16_t get_mtime_sens(void)
{
    return p_config->mtime_sens;
}
    219e:	80 91 66 03 	lds	r24, 0x0366	; 0x800366 <config+0xd>
    21a2:	90 91 67 03 	lds	r25, 0x0367	; 0x800367 <config+0xe>
    21a6:	08 95       	ret

000021a8 <set_mtime_sens>:
void set_mtime_sens(uint16_t time)
{
    p_config->mtime_sens = time;
    21a8:	90 93 67 03 	sts	0x0367, r25	; 0x800367 <config+0xe>
    21ac:	80 93 66 03 	sts	0x0366, r24	; 0x800366 <config+0xd>
}
    21b0:	08 95       	ret

000021b2 <get_interval_after_motion_m>:

//***********************************************
uint16_t get_interval_after_motion_m(void)
{
    return p_config->interval_after_motion_m;
}
    21b2:	80 91 60 03 	lds	r24, 0x0360	; 0x800360 <config+0x7>
    21b6:	90 91 61 03 	lds	r25, 0x0361	; 0x800361 <config+0x8>
    21ba:	08 95       	ret

000021bc <set_interval_after_motion_m>:
void set_interval_after_motion_m(uint16_t time)
{
    p_config->interval_after_motion_m = time;
    21bc:	90 93 61 03 	sts	0x0361, r25	; 0x800361 <config+0x8>
    21c0:	80 93 60 03 	sts	0x0360, r24	; 0x800360 <config+0x7>
}
    21c4:	08 95       	ret

000021c6 <get_autoguard>:

//***********************************************
uint8_t get_autoguard(void)
{
    return p_config->autoguard;
}
    21c6:	80 91 b1 03 	lds	r24, 0x03B1	; 0x8003b1 <config+0x58>
    21ca:	08 95       	ret

000021cc <set_autoguard>:
void set_autoguard(uint8_t state)
{
    p_config->autoguard = state;
    21cc:	80 93 b1 03 	sts	0x03B1, r24	; 0x8003b1 <config+0x58>
}
    21d0:	08 95       	ret

000021d2 <get_interval_after_button_m>:

//***********************************************
uint16_t get_interval_after_button_m(void)
{
    return p_config->interval_after_button_m;
}
    21d2:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <config+0x5>
    21d6:	90 91 5f 03 	lds	r25, 0x035F	; 0x80035f <config+0x6>
    21da:	08 95       	ret

000021dc <set_interval_after_button_m>:
void set_interval_after_button_m(uint16_t time)
{
    p_config->interval_after_button_m = time;
    21dc:	90 93 5f 03 	sts	0x035F, r25	; 0x80035f <config+0x6>
    21e0:	80 93 5e 03 	sts	0x035E, r24	; 0x80035e <config+0x5>
}
    21e4:	08 95       	ret

000021e6 <get_first_usage>:

//***********************************************
uint8_t get_first_usage(void)
{
    return p_config->first_usage;
}
    21e6:	80 91 b3 03 	lds	r24, 0x03B3	; 0x8003b3 <config+0x5a>
    21ea:	08 95       	ret

000021ec <set_first_usage>:
void set_first_usage(uint8_t state)
{
    p_config->first_usage = state;
    21ec:	80 93 b3 03 	sts	0x03B3, r24	; 0x8003b3 <config+0x5a>
}
    21f0:	08 95       	ret

000021f2 <get_admin_mode>:

//***********************************************
uint8_t get_admin_mode(void)
{
    return p_config->admin_mode;
}
    21f2:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <config+0xf>
    21f6:	08 95       	ret

000021f8 <set_admin_mode>:
void set_admin_mode(uint8_t state)
{
    p_config->admin_mode = state;
    21f8:	80 93 68 03 	sts	0x0368, r24	; 0x800368 <config+0xf>
}
    21fc:	08 95       	ret

000021fe <get_pause_alarm_report_s>:

//***********************************************
uint8_t get_pause_alarm_report_s(void)
{
    return p_config->pause_alarm_report_s;
}
    21fe:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <config+0xb>
    2202:	08 95       	ret

00002204 <set_pause_alarm_report_s>:
void set_pause_alarm_report_s(uint8_t state)
{
    p_config->pause_alarm_report_s = state;
    2204:	80 93 64 03 	sts	0x0364, r24	; 0x800364 <config+0xb>
}
    2208:	08 95       	ret

0000220a <get_single_sensor>:

//***********************************************
uint8_t get_single_sensor(void)
{
    return p_config->single_sensor;
}
    220a:	80 91 65 03 	lds	r24, 0x0365	; 0x800365 <config+0xc>
    220e:	08 95       	ret

00002210 <set_single_sensor>:
void set_single_sensor(uint8_t state)
{
    p_config->single_sensor = state;
    2210:	80 93 65 03 	sts	0x0365, r24	; 0x800365 <config+0xc>
}
    2214:	08 95       	ret

00002216 <hex_to_char>:
}


/////////////////////////////
static unsigned char hex_to_char(char c)
{
    2216:	98 2f       	mov	r25, r24
    uint8_t i = (uint8_t)c;
    if ( (i>=0x30) && (i<=0x39) )
    2218:	80 ed       	ldi	r24, 0xD0	; 208
    221a:	89 0f       	add	r24, r25
    221c:	8a 30       	cpi	r24, 0x0A	; 10
    221e:	78 f0       	brcs	.+30     	; 0x223e <hex_to_char+0x28>
    {
        return i-0x30;
    }
    else if ( (i>=0x41) && (i<=0x46) )
    2220:	8f eb       	ldi	r24, 0xBF	; 191
    2222:	89 0f       	add	r24, r25
    2224:	86 30       	cpi	r24, 0x06	; 6
    2226:	38 f0       	brcs	.+14     	; 0x2236 <hex_to_char+0x20>
    {
        return i-0x37;
    }
    else if ( (i>=0x61) && (i<=0x66) )
    2228:	8f e9       	ldi	r24, 0x9F	; 159
    222a:	89 0f       	add	r24, r25
    222c:	86 30       	cpi	r24, 0x06	; 6
    222e:	30 f4       	brcc	.+12     	; 0x223c <hex_to_char+0x26>
    {
        return i-0x57;
    2230:	89 ea       	ldi	r24, 0xA9	; 169
    2232:	89 0f       	add	r24, r25
    2234:	08 95       	ret
        return i-0x37;
    2236:	89 ec       	ldi	r24, 0xC9	; 201
    2238:	89 0f       	add	r24, r25
    223a:	08 95       	ret
    }
    else
    {
        return      0;
    223c:	80 e0       	ldi	r24, 0x00	; 0
    }
}
    223e:	08 95       	ret

00002240 <gsm_poll_for_string>:
{
    2240:	cf 93       	push	r28
    2242:	df 93       	push	r29
    2244:	00 d0       	rcall	.+0      	; 0x2246 <gsm_poll_for_string+0x6>
    2246:	00 d0       	rcall	.+0      	; 0x2248 <gsm_poll_for_string+0x8>
    2248:	cd b7       	in	r28, 0x3d	; 61
    224a:	de b7       	in	r29, 0x3e	; 62
    if((get_time_s() - time_stamp) > 10)
    224c:	0e 94 29 2c 	call	0x5852	; 0x5852 <get_time_s>
    2250:	69 83       	std	Y+1, r22	; 0x01
    2252:	7a 83       	std	Y+2, r23	; 0x02
    2254:	8b 83       	std	Y+3, r24	; 0x03
    2256:	9c 83       	std	Y+4, r25	; 0x04
    2258:	80 91 bf 03 	lds	r24, 0x03BF	; 0x8003bf <time_stamp.25>
    225c:	90 91 c0 03 	lds	r25, 0x03C0	; 0x8003c0 <time_stamp.25+0x1>
    2260:	a0 91 c1 03 	lds	r26, 0x03C1	; 0x8003c1 <time_stamp.25+0x2>
    2264:	b0 91 c2 03 	lds	r27, 0x03C2	; 0x8003c2 <time_stamp.25+0x3>
    2268:	29 81       	ldd	r18, Y+1	; 0x01
    226a:	3a 81       	ldd	r19, Y+2	; 0x02
    226c:	4b 81       	ldd	r20, Y+3	; 0x03
    226e:	5c 81       	ldd	r21, Y+4	; 0x04
    2270:	28 1b       	sub	r18, r24
    2272:	39 0b       	sbc	r19, r25
    2274:	4a 0b       	sbc	r20, r26
    2276:	5b 0b       	sbc	r21, r27
    2278:	da 01       	movw	r26, r20
    227a:	c9 01       	movw	r24, r18
    227c:	0b 97       	sbiw	r24, 0x0b	; 11
    227e:	a1 05       	cpc	r26, r1
    2280:	b1 05       	cpc	r27, r1
    2282:	40 f0       	brcs	.+16     	; 0x2294 <gsm_poll_for_string+0x54>
        if(state)
    2284:	80 91 be 03 	lds	r24, 0x03BE	; 0x8003be <state.24>
    2288:	88 23       	and	r24, r24
    228a:	21 f0       	breq	.+8      	; 0x2294 <gsm_poll_for_string+0x54>
            error_code1 = state;
    228c:	80 93 dd 03 	sts	0x03DD, r24	; 0x8003dd <error_code1>
            state = 0;
    2290:	10 92 be 03 	sts	0x03BE, r1	; 0x8003be <state.24>
    if(is_queue_not_empty())
    2294:	0e 94 51 2e 	call	0x5ca2	; 0x5ca2 <is_queue_not_empty>
    2298:	88 23       	and	r24, r24
    229a:	09 f4       	brne	.+2      	; 0x229e <gsm_poll_for_string+0x5e>
    229c:	6c c0       	rjmp	.+216    	; 0x2376 <gsm_poll_for_string+0x136>
        time_stamp = get_time_s();
    229e:	0e 94 29 2c 	call	0x5852	; 0x5852 <get_time_s>
    22a2:	60 93 bf 03 	sts	0x03BF, r22	; 0x8003bf <time_stamp.25>
    22a6:	70 93 c0 03 	sts	0x03C0, r23	; 0x8003c0 <time_stamp.25+0x1>
    22aa:	80 93 c1 03 	sts	0x03C1, r24	; 0x8003c1 <time_stamp.25+0x2>
    22ae:	90 93 c2 03 	sts	0x03C2, r25	; 0x8003c2 <time_stamp.25+0x3>
        ch = get_byte_from_queue();
    22b2:	0e 94 46 2e 	call	0x5c8c	; 0x5c8c <get_byte_from_queue>
        switch(state)
    22b6:	90 91 be 03 	lds	r25, 0x03BE	; 0x8003be <state.24>
    22ba:	99 23       	and	r25, r25
    22bc:	29 f0       	breq	.+10     	; 0x22c8 <gsm_poll_for_string+0x88>
    22be:	93 30       	cpi	r25, 0x03	; 3
    22c0:	21 f1       	breq	.+72     	; 0x230a <gsm_poll_for_string+0xca>
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	80 e0       	ldi	r24, 0x00	; 0
    22c6:	59 c0       	rjmp	.+178    	; 0x237a <gsm_poll_for_string+0x13a>
        ch = get_byte_from_queue();
    22c8:	98 2f       	mov	r25, r24
            if((ch != 0) && (ch != '\r') && (ch != '\n'))
    22ca:	88 23       	and	r24, r24
    22cc:	09 f4       	brne	.+2      	; 0x22d0 <gsm_poll_for_string+0x90>
    22ce:	5c c0       	rjmp	.+184    	; 0x2388 <gsm_poll_for_string+0x148>
    22d0:	8d 30       	cpi	r24, 0x0D	; 13
    22d2:	09 f4       	brne	.+2      	; 0x22d6 <gsm_poll_for_string+0x96>
    22d4:	5c c0       	rjmp	.+184    	; 0x238e <gsm_poll_for_string+0x14e>
    22d6:	8a 30       	cpi	r24, 0x0A	; 10
    22d8:	09 f4       	brne	.+2      	; 0x22dc <gsm_poll_for_string+0x9c>
    22da:	5c c0       	rjmp	.+184    	; 0x2394 <gsm_poll_for_string+0x154>
                mdm_data[0] = ch;
    22dc:	80 93 f0 03 	sts	0x03F0, r24	; 0x8003f0 <mdm_data>
                i = 1;
    22e0:	21 e0       	ldi	r18, 0x01	; 1
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	30 93 bd 03 	sts	0x03BD, r19	; 0x8003bd <i.23+0x1>
    22e8:	20 93 bc 03 	sts	0x03BC, r18	; 0x8003bc <i.23>
                state = 3;
    22ec:	83 e0       	ldi	r24, 0x03	; 3
    22ee:	80 93 be 03 	sts	0x03BE, r24	; 0x8003be <state.24>
                if(ch == '>')
    22f2:	9e 33       	cpi	r25, 0x3E	; 62
    22f4:	19 f0       	breq	.+6      	; 0x22fc <gsm_poll_for_string+0xbc>
    return 0;
    22f6:	90 e0       	ldi	r25, 0x00	; 0
    22f8:	80 e0       	ldi	r24, 0x00	; 0
    22fa:	3f c0       	rjmp	.+126    	; 0x237a <gsm_poll_for_string+0x13a>
                    mdm_data[1] = 0;
    22fc:	10 92 f1 03 	sts	0x03F1, r1	; 0x8003f1 <mdm_data+0x1>
                    state = 0;
    2300:	10 92 be 03 	sts	0x03BE, r1	; 0x8003be <state.24>
                    return mdm_data;
    2304:	80 ef       	ldi	r24, 0xF0	; 240
    2306:	93 e0       	ldi	r25, 0x03	; 3
    2308:	38 c0       	rjmp	.+112    	; 0x237a <gsm_poll_for_string+0x13a>
            mdm_data[i] = ch;
    230a:	20 91 bc 03 	lds	r18, 0x03BC	; 0x8003bc <i.23>
    230e:	30 91 bd 03 	lds	r19, 0x03BD	; 0x8003bd <i.23+0x1>
    2312:	f9 01       	movw	r30, r18
    2314:	e0 51       	subi	r30, 0x10	; 16
    2316:	fc 4f       	sbci	r31, 0xFC	; 252
    2318:	80 83       	st	Z, r24
            i++;
    231a:	a9 01       	movw	r20, r18
    231c:	4f 5f       	subi	r20, 0xFF	; 255
    231e:	5f 4f       	sbci	r21, 0xFF	; 255
    2320:	50 93 bd 03 	sts	0x03BD, r21	; 0x8003bd <i.23+0x1>
    2324:	40 93 bc 03 	sts	0x03BC, r20	; 0x8003bc <i.23>
            if(i>=NET_BUF_SIZE)
    2328:	40 34       	cpi	r20, 0x40	; 64
    232a:	91 e0       	ldi	r25, 0x01	; 1
    232c:	59 07       	cpc	r21, r25
    232e:	88 f4       	brcc	.+34     	; 0x2352 <gsm_poll_for_string+0x112>
            if(i>=2)
    2330:	42 30       	cpi	r20, 0x02	; 2
    2332:	51 05       	cpc	r21, r1
    2334:	90 f1       	brcs	.+100    	; 0x239a <gsm_poll_for_string+0x15a>
                if((mdm_data[i-2] == '\r')&&(mdm_data[i-1] == '\n'))
    2336:	a9 01       	movw	r20, r18
    2338:	41 50       	subi	r20, 0x01	; 1
    233a:	51 09       	sbc	r21, r1
    233c:	21 51       	subi	r18, 0x11	; 17
    233e:	3c 4f       	sbci	r19, 0xFC	; 252
    2340:	d9 01       	movw	r26, r18
    2342:	9c 91       	ld	r25, X
    2344:	9d 30       	cpi	r25, 0x0D	; 13
    2346:	61 f5       	brne	.+88     	; 0x23a0 <gsm_poll_for_string+0x160>
    2348:	8a 30       	cpi	r24, 0x0A	; 10
    234a:	61 f0       	breq	.+24     	; 0x2364 <gsm_poll_for_string+0x124>
    return 0;
    234c:	90 e0       	ldi	r25, 0x00	; 0
    234e:	80 e0       	ldi	r24, 0x00	; 0
    2350:	14 c0       	rjmp	.+40     	; 0x237a <gsm_poll_for_string+0x13a>
                i=0;
    2352:	10 92 bd 03 	sts	0x03BD, r1	; 0x8003bd <i.23+0x1>
    2356:	10 92 bc 03 	sts	0x03BC, r1	; 0x8003bc <i.23>
                state = 0; // переполнение входного буфера
    235a:	10 92 be 03 	sts	0x03BE, r1	; 0x8003be <state.24>
    return 0;
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	80 e0       	ldi	r24, 0x00	; 0
                break;
    2362:	0b c0       	rjmp	.+22     	; 0x237a <gsm_poll_for_string+0x13a>
                    mdm_data[i-2] = 0;
    2364:	40 51       	subi	r20, 0x10	; 16
    2366:	5c 4f       	sbci	r21, 0xFC	; 252
    2368:	fa 01       	movw	r30, r20
    236a:	10 82       	st	Z, r1
                    state = 0;
    236c:	10 92 be 03 	sts	0x03BE, r1	; 0x8003be <state.24>
                    return mdm_data;
    2370:	80 ef       	ldi	r24, 0xF0	; 240
    2372:	93 e0       	ldi	r25, 0x03	; 3
    2374:	02 c0       	rjmp	.+4      	; 0x237a <gsm_poll_for_string+0x13a>
    return 0;
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	80 e0       	ldi	r24, 0x00	; 0
}
    237a:	0f 90       	pop	r0
    237c:	0f 90       	pop	r0
    237e:	0f 90       	pop	r0
    2380:	0f 90       	pop	r0
    2382:	df 91       	pop	r29
    2384:	cf 91       	pop	r28
    2386:	08 95       	ret
    return 0;
    2388:	90 e0       	ldi	r25, 0x00	; 0
    238a:	80 e0       	ldi	r24, 0x00	; 0
    238c:	f6 cf       	rjmp	.-20     	; 0x237a <gsm_poll_for_string+0x13a>
    238e:	90 e0       	ldi	r25, 0x00	; 0
    2390:	80 e0       	ldi	r24, 0x00	; 0
    2392:	f3 cf       	rjmp	.-26     	; 0x237a <gsm_poll_for_string+0x13a>
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	80 e0       	ldi	r24, 0x00	; 0
    2398:	f0 cf       	rjmp	.-32     	; 0x237a <gsm_poll_for_string+0x13a>
    239a:	90 e0       	ldi	r25, 0x00	; 0
    239c:	80 e0       	ldi	r24, 0x00	; 0
    239e:	ed cf       	rjmp	.-38     	; 0x237a <gsm_poll_for_string+0x13a>
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	80 e0       	ldi	r24, 0x00	; 0
    23a4:	ea cf       	rjmp	.-44     	; 0x237a <gsm_poll_for_string+0x13a>

000023a6 <map_s>:
{
    23a6:	cf 92       	push	r12
    23a8:	df 92       	push	r13
    23aa:	ef 92       	push	r14
    23ac:	ff 92       	push	r15
    23ae:	0f 93       	push	r16
    23b0:	1f 93       	push	r17
    23b2:	cf 93       	push	r28
    23b4:	df 93       	push	r29
    23b6:	e6 2e       	mov	r14, r22
    23b8:	f7 2e       	mov	r15, r23
    23ba:	c4 2f       	mov	r28, r20
    23bc:	d5 2f       	mov	r29, r21
    23be:	12 2f       	mov	r17, r18
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    23c0:	6c 01       	movw	r12, r24
    23c2:	ce 18       	sub	r12, r14
    23c4:	df 08       	sbc	r13, r15
    23c6:	62 2f       	mov	r22, r18
    23c8:	70 e0       	ldi	r23, 0x00	; 0
    23ca:	80 2f       	mov	r24, r16
    23cc:	90 e0       	ldi	r25, 0x00	; 0
    23ce:	0e 94 f7 2e 	call	0x5dee	; 0x5dee <__subvhi3>
    23d2:	9c 01       	movw	r18, r24
    23d4:	c2 9e       	mul	r12, r18
    23d6:	c0 01       	movw	r24, r0
    23d8:	c3 9e       	mul	r12, r19
    23da:	90 0d       	add	r25, r0
    23dc:	d2 9e       	mul	r13, r18
    23de:	90 0d       	add	r25, r0
    23e0:	11 24       	eor	r1, r1
    23e2:	be 01       	movw	r22, r28
    23e4:	6e 19       	sub	r22, r14
    23e6:	7f 09       	sbc	r23, r15
    23e8:	0e 94 36 2f 	call	0x5e6c	; 0x5e6c <__udivmodhi4>
}
    23ec:	81 2f       	mov	r24, r17
    23ee:	86 0f       	add	r24, r22
    23f0:	df 91       	pop	r29
    23f2:	cf 91       	pop	r28
    23f4:	1f 91       	pop	r17
    23f6:	0f 91       	pop	r16
    23f8:	ff 90       	pop	r15
    23fa:	ef 90       	pop	r14
    23fc:	df 90       	pop	r13
    23fe:	cf 90       	pop	r12
    2400:	08 95       	ret

00002402 <get_message_from_mdm>:
{
    2402:	cf 93       	push	r28
    2404:	df 93       	push	r29
    ptr = gsm_poll_for_string();
    2406:	0e 94 20 11 	call	0x2240	; 0x2240 <gsm_poll_for_string>
    240a:	c8 2f       	mov	r28, r24
    240c:	d9 2f       	mov	r29, r25
    return 0;
    240e:	80 e0       	ldi	r24, 0x00	; 0
    if(ptr)
    2410:	20 97       	sbiw	r28, 0x00	; 0
    2412:	51 f0       	breq	.+20     	; 0x2428 <get_message_from_mdm+0x26>
        if(strstr_P(ptr, PSTR("+CMTI:"))) // пришла асинхронная индикация о принятой СМСке
    2414:	60 e5       	ldi	r22, 0x50	; 80
    2416:	72 e0       	ldi	r23, 0x02	; 2
    2418:	ce 01       	movw	r24, r28
    241a:	0e 94 aa 33 	call	0x6754	; 0x6754 <strstr_P>
    241e:	89 2b       	or	r24, r25
    2420:	31 f0       	breq	.+12     	; 0x242e <get_message_from_mdm+0x2c>
            unread_sms = 1;
    2422:	81 e0       	ldi	r24, 0x01	; 1
    2424:	80 93 e0 03 	sts	0x03E0, r24	; 0x8003e0 <unread_sms>
}
    2428:	df 91       	pop	r29
    242a:	cf 91       	pop	r28
    242c:	08 95       	ret
        else if(strstr_P(ptr, PSTR("+CLIP:")))   // пришла асинхронная индикация о звонке
    242e:	69 e4       	ldi	r22, 0x49	; 73
    2430:	72 e0       	ldi	r23, 0x02	; 2
    2432:	ce 01       	movw	r24, r28
    2434:	0e 94 aa 33 	call	0x6754	; 0x6754 <strstr_P>
    2438:	89 2b       	or	r24, r25
    243a:	f1 f0       	breq	.+60     	; 0x2478 <get_message_from_mdm+0x76>
            ptr = strchr(ptr, '+');
    243c:	6b e2       	ldi	r22, 0x2B	; 43
    243e:	70 e0       	ldi	r23, 0x00	; 0
    2440:	ce 01       	movw	r24, r28
    2442:	06 96       	adiw	r24, 0x06	; 6
    2444:	0e 94 ef 33 	call	0x67de	; 0x67de <strchr>
    2448:	d8 2f       	mov	r29, r24
    244a:	c9 2f       	mov	r28, r25
            if(find_phone_in_phone_list(ptr, ADMIN_LIST)) // ищем телефон в списке юзеров
    244c:	61 e0       	ldi	r22, 0x01	; 1
    244e:	0e 94 e3 21 	call	0x43c6	; 0x43c6 <find_phone_in_phone_list>
    2452:	81 11       	cpse	r24, r1
    2454:	04 c0       	rjmp	.+8      	; 0x245e <get_message_from_mdm+0x5c>
            incoming_call = 1; // вызов будет сброшен в основном цикле программы
    2456:	81 e0       	ldi	r24, 0x01	; 1
    2458:	80 93 de 03 	sts	0x03DE, r24	; 0x8003de <incoming_call>
            return 1;
    245c:	e5 cf       	rjmp	.-54     	; 0x2428 <get_message_from_mdm+0x26>
                call_from_user = 1;
    245e:	81 e0       	ldi	r24, 0x01	; 1
    2460:	80 93 df 03 	sts	0x03DF, r24	; 0x8003df <call_from_user>
                memcpy(rec_phone_number, ptr, 13); // сохраняем номер телефона, с которого произошел звонок
    2464:	8d e0       	ldi	r24, 0x0D	; 13
    2466:	ed 2f       	mov	r30, r29
    2468:	fc 2f       	mov	r31, r28
    246a:	a2 ee       	ldi	r26, 0xE2	; 226
    246c:	b3 e0       	ldi	r27, 0x03	; 3
    246e:	01 90       	ld	r0, Z+
    2470:	0d 92       	st	X+, r0
    2472:	8a 95       	dec	r24
    2474:	e1 f7       	brne	.-8      	; 0x246e <get_message_from_mdm+0x6c>
    2476:	ef cf       	rjmp	.-34     	; 0x2456 <get_message_from_mdm+0x54>
        else if(strstr_P(ptr, PSTR("+DTMF:")))   // DTFM msg
    2478:	62 e4       	ldi	r22, 0x42	; 66
    247a:	72 e0       	ldi	r23, 0x02	; 2
    247c:	ce 01       	movw	r24, r28
    247e:	0e 94 aa 33 	call	0x6754	; 0x6754 <strstr_P>
    2482:	89 2b       	or	r24, r25
    2484:	09 f4       	brne	.+2      	; 0x2488 <get_message_from_mdm+0x86>
    2486:	87 c0       	rjmp	.+270    	; 0x2596 <get_message_from_mdm+0x194>
//*******************************************************************************************
static uint8_t parse_DTFM(char *ptr)
{
    ptr += 6;

    if(isdigit(*++ptr))
    2488:	ef 81       	ldd	r30, Y+7	; 0x07
    248a:	8e 2f       	mov	r24, r30
    248c:	0e 2e       	mov	r0, r30
    248e:	00 0c       	add	r0, r0
    2490:	99 0b       	sbc	r25, r25
    2492:	c0 97       	sbiw	r24, 0x30	; 48
    2494:	0a 97       	sbiw	r24, 0x0a	; 10
    2496:	10 f0       	brcs	.+4      	; 0x249c <get_message_from_mdm+0x9a>
        return 1;
    2498:	81 e0       	ldi	r24, 0x01	; 1
    249a:	c6 cf       	rjmp	.-116    	; 0x2428 <get_message_from_mdm+0x26>
    {
        switch( ptr[0]) 																													//	Получаем значение состояния вызова.
    249c:	e0 53       	subi	r30, 0x30	; 48
    249e:	81 e0       	ldi	r24, 0x01	; 1
    24a0:	e7 30       	cpi	r30, 0x07	; 7
    24a2:	10 f6       	brcc	.-124    	; 0x2428 <get_message_from_mdm+0x26>
    24a4:	0e 2e       	mov	r0, r30
    24a6:	00 0c       	add	r0, r0
    24a8:	ff 0b       	sbc	r31, r31
    24aa:	eb 56       	subi	r30, 0x6B	; 107
    24ac:	f8 4c       	sbci	r31, 0xC8	; 200
    24ae:	0c 94 6c 2f 	jmp	0x5ed8	; 0x5ed8 <__tablejump2__>
        {
        case '0':
            hang_up_call();
    24b2:	0e 94 1c 13 	call	0x2638	; 0x2638 <hang_up_call>
        return 1;
    24b6:	81 e0       	ldi	r24, 0x01	; 1
            break;
    24b8:	b7 cf       	rjmp	.-146    	; 0x2428 <get_message_from_mdm+0x26>
        case '1':
            delay_ms(500);
    24ba:	84 ef       	ldi	r24, 0xF4	; 244
    24bc:	91 e0       	ldi	r25, 0x01	; 1
    24be:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
            set_guard(1);
    24c2:	81 e0       	ldi	r24, 0x01	; 1
    24c4:	0e 94 a5 10 	call	0x214a	; 0x214a <set_guard>
            set_flg_rst(1);
    24c8:	81 e0       	ldi	r24, 0x01	; 1
    24ca:	0e 94 38 0b 	call	0x1670	; 0x1670 <set_flg_rst>
            EEPROM_update();
    24ce:	0e 94 81 10 	call	0x2102	; 0x2102 <EEPROM_update>
            play_amr(AUDIO_GUARD_ON,'0');
    24d2:	60 e3       	ldi	r22, 0x30	; 48
    24d4:	86 e8       	ldi	r24, 0x86	; 134
    24d6:	92 e0       	ldi	r25, 0x02	; 2
    24d8:	0e 94 7d 13 	call	0x26fa	; 0x26fa <play_amr>
        return 1;
    24dc:	81 e0       	ldi	r24, 0x01	; 1
            break;
    24de:	a4 cf       	rjmp	.-184    	; 0x2428 <get_message_from_mdm+0x26>
        case '2':
            delay_ms(500);
    24e0:	84 ef       	ldi	r24, 0xF4	; 244
    24e2:	91 e0       	ldi	r25, 0x01	; 1
    24e4:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
            set_guard(0);
    24e8:	80 e0       	ldi	r24, 0x00	; 0
    24ea:	0e 94 a5 10 	call	0x214a	; 0x214a <set_guard>
            play_amr(AUDIO_GUARD_OFF,'0');
    24ee:	60 e3       	ldi	r22, 0x30	; 48
    24f0:	84 ea       	ldi	r24, 0xA4	; 164
    24f2:	92 e0       	ldi	r25, 0x02	; 2
    24f4:	0e 94 7d 13 	call	0x26fa	; 0x26fa <play_amr>
            EEPROM_update();
    24f8:	0e 94 81 10 	call	0x2102	; 0x2102 <EEPROM_update>
            set_flg_rst(1);
    24fc:	81 e0       	ldi	r24, 0x01	; 1
    24fe:	0e 94 38 0b 	call	0x1670	; 0x1670 <set_flg_rst>
        return 1;
    2502:	81 e0       	ldi	r24, 0x01	; 1
            break;
    2504:	91 cf       	rjmp	.-222    	; 0x2428 <get_message_from_mdm+0x26>
        case '3':
            delay_ms(500);
    2506:	84 ef       	ldi	r24, 0xF4	; 244
    2508:	91 e0       	ldi	r25, 0x01	; 1
    250a:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
            play_amr(AUDIO_REPORT_SEND,'0');
    250e:	60 e3       	ldi	r22, 0x30	; 48
    2510:	8e ea       	ldi	r24, 0xAE	; 174
    2512:	92 e0       	ldi	r25, 0x02	; 2
    2514:	0e 94 7d 13 	call	0x26fa	; 0x26fa <play_amr>
            delay_ms(2000);
    2518:	80 ed       	ldi	r24, 0xD0	; 208
    251a:	97 e0       	ldi	r25, 0x07	; 7
    251c:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
            hang_up_call();
    2520:	0e 94 1c 13 	call	0x2638	; 0x2638 <hang_up_call>
            delay_ms(200);
    2524:	88 ec       	ldi	r24, 0xC8	; 200
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
            send_sms_report(rec_phone_number);
    252c:	82 ee       	ldi	r24, 0xE2	; 226
    252e:	93 e0       	ldi	r25, 0x03	; 3
    2530:	0e 94 4a 0b 	call	0x1694	; 0x1694 <send_sms_report>
        return 1;
    2534:	81 e0       	ldi	r24, 0x01	; 1
            break;
    2536:	78 cf       	rjmp	.-272    	; 0x2428 <get_message_from_mdm+0x26>
        case '4':
            play_amr(AUDIO_LIGHT_ON,'0');
    2538:	60 e3       	ldi	r22, 0x30	; 48
    253a:	8f eb       	ldi	r24, 0xBF	; 191
    253c:	92 e0       	ldi	r25, 0x02	; 2
    253e:	0e 94 7d 13 	call	0x26fa	; 0x26fa <play_amr>
            delay_ms(2000);
    2542:	80 ed       	ldi	r24, 0xD0	; 208
    2544:	97 e0       	ldi	r25, 0x07	; 7
    2546:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
            set_light(1);
    254a:	81 e0       	ldi	r24, 0x01	; 1
    254c:	0e 94 18 0b 	call	0x1630	; 0x1630 <set_light>
        return 1;
    2550:	81 e0       	ldi	r24, 0x01	; 1
            break;
    2552:	6a cf       	rjmp	.-300    	; 0x2428 <get_message_from_mdm+0x26>
        case '5':
            play_amr(AUDIO_LIGHT_OFF,'0');
    2554:	60 e3       	ldi	r22, 0x30	; 48
    2556:	85 eb       	ldi	r24, 0xB5	; 181
    2558:	92 e0       	ldi	r25, 0x02	; 2
    255a:	0e 94 7d 13 	call	0x26fa	; 0x26fa <play_amr>
            delay_ms(2000);
    255e:	80 ed       	ldi	r24, 0xD0	; 208
    2560:	97 e0       	ldi	r25, 0x07	; 7
    2562:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
            set_light(0);
    2566:	80 e0       	ldi	r24, 0x00	; 0
    2568:	0e 94 18 0b 	call	0x1630	; 0x1630 <set_light>
        return 1;
    256c:	81 e0       	ldi	r24, 0x01	; 1
            break;
    256e:	5c cf       	rjmp	.-328    	; 0x2428 <get_message_from_mdm+0x26>
        case '6':
            play_amr(ALARM_LOCAL_GUARD_ON,'0');
    2570:	60 e3       	ldi	r22, 0x30	; 48
    2572:	8b eb       	ldi	r24, 0xBB	; 187
    2574:	92 e0       	ldi	r25, 0x02	; 2
    2576:	0e 94 7d 13 	call	0x26fa	; 0x26fa <play_amr>
            delay_ms(2000);
    257a:	80 ed       	ldi	r24, 0xD0	; 208
    257c:	97 e0       	ldi	r25, 0x07	; 7
    257e:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
            set_local_guard(1);
    2582:	81 e0       	ldi	r24, 0x01	; 1
    2584:	0e 94 ab 10 	call	0x2156	; 0x2156 <set_local_guard>
            set_guard(0);
    2588:	80 e0       	ldi	r24, 0x00	; 0
    258a:	0e 94 a5 10 	call	0x214a	; 0x214a <set_guard>
            EEPROM_update();
    258e:	0e 94 81 10 	call	0x2102	; 0x2102 <EEPROM_update>
        return 1;
    2592:	81 e0       	ldi	r24, 0x01	; 1
            break;
    2594:	49 cf       	rjmp	.-366    	; 0x2428 <get_message_from_mdm+0x26>
        return 1;
    2596:	81 e0       	ldi	r24, 0x01	; 1
    2598:	47 cf       	rjmp	.-370    	; 0x2428 <get_message_from_mdm+0x26>

0000259a <mdm_wait_cmd_ms>:
{
    259a:	cf 92       	push	r12
    259c:	df 92       	push	r13
    259e:	ef 92       	push	r14
    25a0:	ff 92       	push	r15
    25a2:	1f 93       	push	r17
    25a4:	cf 93       	push	r28
    25a6:	df 93       	push	r29
    25a8:	00 d0       	rcall	.+0      	; 0x25aa <mdm_wait_cmd_ms+0x10>
    25aa:	00 d0       	rcall	.+0      	; 0x25ac <mdm_wait_cmd_ms+0x12>
    25ac:	00 d0       	rcall	.+0      	; 0x25ae <mdm_wait_cmd_ms+0x14>
    25ae:	cd b7       	in	r28, 0x3d	; 61
    25b0:	de b7       	in	r29, 0x3e	; 62
    25b2:	e8 2e       	mov	r14, r24
    25b4:	f9 2e       	mov	r15, r25
    25b6:	16 2f       	mov	r17, r22
    25b8:	7e 83       	std	Y+6, r23	; 0x06
    uint32_t time_stamp = get_time_ms() + time_to_wait_ms;
    25ba:	0e 94 09 2c 	call	0x5812	; 0x5812 <get_time_ms>
    25be:	dc 01       	movw	r26, r24
    25c0:	cb 01       	movw	r24, r22
    25c2:	8e 0d       	add	r24, r14
    25c4:	9f 1d       	adc	r25, r15
    25c6:	a1 1d       	adc	r26, r1
    25c8:	b1 1d       	adc	r27, r1
    25ca:	6c 01       	movw	r12, r24
    25cc:	7d 01       	movw	r14, r26
    25ce:	07 c0       	rjmp	.+14     	; 0x25de <mdm_wait_cmd_ms+0x44>
            if((get_time_ms() > time_stamp))
    25d0:	0e 94 09 2c 	call	0x5812	; 0x5812 <get_time_ms>
    25d4:	c6 16       	cp	r12, r22
    25d6:	d7 06       	cpc	r13, r23
    25d8:	e8 06       	cpc	r14, r24
    25da:	f9 06       	cpc	r15, r25
    25dc:	b8 f0       	brcs	.+46     	; 0x260c <mdm_wait_cmd_ms+0x72>
        while(get_message_from_mdm()==0)
    25de:	0e 94 01 12 	call	0x2402	; 0x2402 <get_message_from_mdm>
    25e2:	8d 83       	std	Y+5, r24	; 0x05
    25e4:	88 23       	and	r24, r24
    25e6:	a1 f3       	breq	.-24     	; 0x25d0 <mdm_wait_cmd_ms+0x36>
        ptr = strstr(mdm_data, (const char*)_answer);
    25e8:	61 2f       	mov	r22, r17
    25ea:	7e 81       	ldd	r23, Y+6	; 0x06
    25ec:	80 ef       	ldi	r24, 0xF0	; 240
    25ee:	93 e0       	ldi	r25, 0x03	; 3
    25f0:	0e 94 fa 33 	call	0x67f4	; 0x67f4 <strstr>
        if(ptr)
    25f4:	89 2b       	or	r24, r25
    25f6:	79 f4       	brne	.+30     	; 0x2616 <mdm_wait_cmd_ms+0x7c>
        ptr = strstr_P(mdm_data, PSTR("ERROR"));
    25f8:	6d e3       	ldi	r22, 0x3D	; 61
    25fa:	73 e0       	ldi	r23, 0x03	; 3
    25fc:	80 ef       	ldi	r24, 0xF0	; 240
    25fe:	93 e0       	ldi	r25, 0x03	; 3
    2600:	0e 94 aa 33 	call	0x6754	; 0x6754 <strstr_P>
        if(ptr)
    2604:	89 2b       	or	r24, r25
    2606:	59 f3       	breq	.-42     	; 0x25de <mdm_wait_cmd_ms+0x44>
            return 0;
    2608:	1d 82       	std	Y+5, r1	; 0x05
    260a:	07 c0       	rjmp	.+14     	; 0x261a <mdm_wait_cmd_ms+0x80>
                softuart_puts_p(PSTR( "cmd time end" ));
    260c:	83 e4       	ldi	r24, 0x43	; 67
    260e:	93 e0       	ldi	r25, 0x03	; 3
    2610:	0e 94 45 28 	call	0x508a	; 0x508a <softuart_puts_p>
                return 0;
    2614:	02 c0       	rjmp	.+4      	; 0x261a <mdm_wait_cmd_ms+0x80>
            return 1;
    2616:	91 e0       	ldi	r25, 0x01	; 1
    2618:	9d 83       	std	Y+5, r25	; 0x05
}
    261a:	8d 81       	ldd	r24, Y+5	; 0x05
    261c:	26 96       	adiw	r28, 0x06	; 6
    261e:	0f b6       	in	r0, 0x3f	; 63
    2620:	f8 94       	cli
    2622:	de bf       	out	0x3e, r29	; 62
    2624:	0f be       	out	0x3f, r0	; 63
    2626:	cd bf       	out	0x3d, r28	; 61
    2628:	df 91       	pop	r29
    262a:	cf 91       	pop	r28
    262c:	1f 91       	pop	r17
    262e:	ff 90       	pop	r15
    2630:	ef 90       	pop	r14
    2632:	df 90       	pop	r13
    2634:	cf 90       	pop	r12
    2636:	08 95       	ret

00002638 <hang_up_call>:
{
    2638:	cf 93       	push	r28
    263a:	c1 e0       	ldi	r28, 0x01	; 1
    263c:	15 c0       	rjmp	.+42     	; 0x2668 <hang_up_call+0x30>
            delay_ms(200);
    263e:	88 ec       	ldi	r24, 0xC8	; 200
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
        uart_flush();
    2646:	0e 94 ac 2e 	call	0x5d58	; 0x5d58 <uart_flush>
        uart_send_str_p(PSTR("ATH\r\n"));
    264a:	84 ee       	ldi	r24, 0xE4	; 228
    264c:	92 e0       	ldi	r25, 0x02	; 2
    264e:	0e 94 94 2e 	call	0x5d28	; 0x5d28 <uart_send_str_p>
        rez = mdm_wait_cmd_ms(2000, (const char*)RESPON_OK);
    2652:	64 ec       	ldi	r22, 0xC4	; 196
    2654:	72 e0       	ldi	r23, 0x02	; 2
    2656:	80 ed       	ldi	r24, 0xD0	; 208
    2658:	97 e0       	ldi	r25, 0x07	; 7
    265a:	0e 94 cd 12 	call	0x259a	; 0x259a <mdm_wait_cmd_ms>
        if(rez)
    265e:	81 11       	cpse	r24, r1
    2660:	13 c0       	rjmp	.+38     	; 0x2688 <hang_up_call+0x50>
    for(i=0; i<5; i++)
    2662:	c5 30       	cpi	r28, 0x05	; 5
    2664:	88 f4       	brcc	.+34     	; 0x2688 <hang_up_call+0x50>
    2666:	cf 5f       	subi	r28, 0xFF	; 255
        if(i!=0)
    2668:	c1 30       	cpi	r28, 0x01	; 1
    266a:	49 f7       	brne	.-46     	; 0x263e <hang_up_call+0x6>
        uart_flush();
    266c:	0e 94 ac 2e 	call	0x5d58	; 0x5d58 <uart_flush>
        uart_send_str_p(PSTR("ATH\r\n"));
    2670:	84 ee       	ldi	r24, 0xE4	; 228
    2672:	92 e0       	ldi	r25, 0x02	; 2
    2674:	0e 94 94 2e 	call	0x5d28	; 0x5d28 <uart_send_str_p>
        rez = mdm_wait_cmd_ms(2000, (const char*)RESPON_OK);
    2678:	64 ec       	ldi	r22, 0xC4	; 196
    267a:	72 e0       	ldi	r23, 0x02	; 2
    267c:	80 ed       	ldi	r24, 0xD0	; 208
    267e:	97 e0       	ldi	r25, 0x07	; 7
    2680:	0e 94 cd 12 	call	0x259a	; 0x259a <mdm_wait_cmd_ms>
        if(rez)
    2684:	88 23       	and	r24, r24
    2686:	79 f3       	breq	.-34     	; 0x2666 <hang_up_call+0x2e>
}
    2688:	cf 91       	pop	r28
    268a:	08 95       	ret

0000268c <mdm_wait_str>:
{
    268c:	cf 92       	push	r12
    268e:	df 92       	push	r13
    2690:	ef 92       	push	r14
    2692:	ff 92       	push	r15
    2694:	cf 93       	push	r28
    2696:	df 93       	push	r29
    2698:	00 d0       	rcall	.+0      	; 0x269a <mdm_wait_str+0xe>
    269a:	00 d0       	rcall	.+0      	; 0x269c <mdm_wait_str+0x10>
    269c:	0f 92       	push	r0
    269e:	cd b7       	in	r28, 0x3d	; 61
    26a0:	de b7       	in	r29, 0x3e	; 62
    26a2:	e8 2e       	mov	r14, r24
    26a4:	f9 2e       	mov	r15, r25
    uint32_t time_stamp = get_time_ms() + time_to_wait_ms;
    26a6:	0e 94 09 2c 	call	0x5812	; 0x5812 <get_time_ms>
    26aa:	dc 01       	movw	r26, r24
    26ac:	cb 01       	movw	r24, r22
    26ae:	8e 0d       	add	r24, r14
    26b0:	9f 1d       	adc	r25, r15
    26b2:	a1 1d       	adc	r26, r1
    26b4:	b1 1d       	adc	r27, r1
    26b6:	6c 01       	movw	r12, r24
    26b8:	7d 01       	movw	r14, r26
    while(get_message_from_mdm()==0)
    26ba:	0e 94 01 12 	call	0x2402	; 0x2402 <get_message_from_mdm>
    26be:	8d 83       	std	Y+5, r24	; 0x05
    26c0:	81 11       	cpse	r24, r1
    26c2:	0c c0       	rjmp	.+24     	; 0x26dc <mdm_wait_str+0x50>
        if((get_time_ms() > time_stamp) )
    26c4:	0e 94 09 2c 	call	0x5812	; 0x5812 <get_time_ms>
    26c8:	c6 16       	cp	r12, r22
    26ca:	d7 06       	cpc	r13, r23
    26cc:	e8 06       	cpc	r14, r24
    26ce:	f9 06       	cpc	r15, r25
    26d0:	a0 f7       	brcc	.-24     	; 0x26ba <mdm_wait_str+0x2e>
            softuart_puts_p(PSTR( "wait str time end" ));
    26d2:	8b ef       	ldi	r24, 0xFB	; 251
    26d4:	92 e0       	ldi	r25, 0x02	; 2
    26d6:	0e 94 45 28 	call	0x508a	; 0x508a <softuart_puts_p>
            return 0;
    26da:	02 c0       	rjmp	.+4      	; 0x26e0 <mdm_wait_str+0x54>
    return 1;
    26dc:	91 e0       	ldi	r25, 0x01	; 1
    26de:	9d 83       	std	Y+5, r25	; 0x05
}
    26e0:	8d 81       	ldd	r24, Y+5	; 0x05
    26e2:	0f 90       	pop	r0
    26e4:	0f 90       	pop	r0
    26e6:	0f 90       	pop	r0
    26e8:	0f 90       	pop	r0
    26ea:	0f 90       	pop	r0
    26ec:	df 91       	pop	r29
    26ee:	cf 91       	pop	r28
    26f0:	ff 90       	pop	r15
    26f2:	ef 90       	pop	r14
    26f4:	df 90       	pop	r13
    26f6:	cf 90       	pop	r12
    26f8:	08 95       	ret

000026fa <play_amr>:
{
    26fa:	1f 93       	push	r17
    26fc:	cf 93       	push	r28
    26fe:	df 93       	push	r29
    2700:	18 2f       	mov	r17, r24
    2702:	d9 2f       	mov	r29, r25
    2704:	c6 2f       	mov	r28, r22
    uart_flush();
    2706:	0e 94 ac 2e 	call	0x5d58	; 0x5d58 <uart_flush>
    uart_send_str_p(PSTR("AT+CREC=5\r\n")); // stop play
    270a:	81 e3       	ldi	r24, 0x31	; 49
    270c:	93 e0       	ldi	r25, 0x03	; 3
    270e:	0e 94 94 2e 	call	0x5d28	; 0x5d28 <uart_send_str_p>
    if(mdm_wait_str(1000) == 0)
    2712:	88 ee       	ldi	r24, 0xE8	; 232
    2714:	93 e0       	ldi	r25, 0x03	; 3
    2716:	0e 94 46 13 	call	0x268c	; 0x268c <mdm_wait_str>
    271a:	81 11       	cpse	r24, r1
    271c:	04 c0       	rjmp	.+8      	; 0x2726 <play_amr+0x2c>
}
    271e:	df 91       	pop	r29
    2720:	cf 91       	pop	r28
    2722:	1f 91       	pop	r17
    2724:	08 95       	ret
    uart_flush();
    2726:	0e 94 ac 2e 	call	0x5d58	; 0x5d58 <uart_flush>
    uart_send_str_p(PSTR("AT+CREC=4,\"C:\\User\\"));
    272a:	8d e1       	ldi	r24, 0x1D	; 29
    272c:	93 e0       	ldi	r25, 0x03	; 3
    272e:	0e 94 94 2e 	call	0x5d28	; 0x5d28 <uart_send_str_p>
    uart_send_str(name_file_sim800);
    2732:	81 2f       	mov	r24, r17
    2734:	9d 2f       	mov	r25, r29
    2736:	0e 94 76 2e 	call	0x5cec	; 0x5cec <uart_send_str>
    uart_send_str_p(PSTR(".amr\",0,100,"));
    273a:	80 e1       	ldi	r24, 0x10	; 16
    273c:	93 e0       	ldi	r25, 0x03	; 3
    273e:	0e 94 94 2e 	call	0x5d28	; 0x5d28 <uart_send_str_p>
    uart_send_byte(repeat);
    2742:	8c 2f       	mov	r24, r28
    2744:	0e 94 8c 2e 	call	0x5d18	; 0x5d18 <uart_send_byte>
    uart_send_str_p(PSTR("\r\n"));
    2748:	8d e0       	ldi	r24, 0x0D	; 13
    274a:	93 e0       	ldi	r25, 0x03	; 3
    274c:	0e 94 94 2e 	call	0x5d28	; 0x5d28 <uart_send_str_p>
    if(mdm_wait_cmd_ms(2000, (const char*)RESPON_OK) == 1)
    2750:	64 ec       	ldi	r22, 0xC4	; 196
    2752:	72 e0       	ldi	r23, 0x02	; 2
    2754:	80 ed       	ldi	r24, 0xD0	; 208
    2756:	97 e0       	ldi	r25, 0x07	; 7
    2758:	0e 94 cd 12 	call	0x259a	; 0x259a <mdm_wait_cmd_ms>
    275c:	98 2f       	mov	r25, r24
    275e:	81 e0       	ldi	r24, 0x01	; 1
    2760:	91 30       	cpi	r25, 0x01	; 1
    2762:	e9 f2       	breq	.-70     	; 0x271e <play_amr+0x24>
    2764:	80 e0       	ldi	r24, 0x00	; 0
    2766:	db cf       	rjmp	.-74     	; 0x271e <play_amr+0x24>

00002768 <call_status>:
{
    2768:	cf 93       	push	r28
    276a:	c1 e0       	ldi	r28, 0x01	; 1
    276c:	1c c0       	rjmp	.+56     	; 0x27a6 <call_status+0x3e>
            delay_ms(100);
    276e:	84 e6       	ldi	r24, 0x64	; 100
    2770:	90 e0       	ldi	r25, 0x00	; 0
    2772:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
        uart_flush();
    2776:	0e 94 ac 2e 	call	0x5d58	; 0x5d58 <uart_flush>
        uart_send_str_p(PSTR("AT+CLCC\r\n"));
    277a:	81 ef       	ldi	r24, 0xF1	; 241
    277c:	92 e0       	ldi	r25, 0x02	; 2
    277e:	0e 94 94 2e 	call	0x5d28	; 0x5d28 <uart_send_str_p>
        if(mdm_wait_str(2000))
    2782:	80 ed       	ldi	r24, 0xD0	; 208
    2784:	97 e0       	ldi	r25, 0x07	; 7
    2786:	0e 94 46 13 	call	0x268c	; 0x268c <mdm_wait_str>
    278a:	88 23       	and	r24, r24
    278c:	41 f0       	breq	.+16     	; 0x279e <call_status+0x36>
            ptr = strstr_P(mdm_data, PSTR("+CLCC:"));
    278e:	6a ee       	ldi	r22, 0xEA	; 234
    2790:	72 e0       	ldi	r23, 0x02	; 2
    2792:	80 ef       	ldi	r24, 0xF0	; 240
    2794:	93 e0       	ldi	r25, 0x03	; 3
    2796:	0e 94 aa 33 	call	0x6754	; 0x6754 <strstr_P>
            if(ptr)
    279a:	89 2b       	or	r24, r25
    279c:	d1 f4       	brne	.+52     	; 0x27d2 <call_status+0x6a>
    for(uint8_t i = 0; i < 5; i++)
    279e:	c5 30       	cpi	r28, 0x05	; 5
    27a0:	08 f0       	brcs	.+2      	; 0x27a4 <call_status+0x3c>
    27a2:	4e c0       	rjmp	.+156    	; 0x2840 <call_status+0xd8>
    27a4:	cf 5f       	subi	r28, 0xFF	; 255
        if(i != 0)
    27a6:	c1 30       	cpi	r28, 0x01	; 1
    27a8:	11 f7       	brne	.-60     	; 0x276e <call_status+0x6>
        uart_flush();
    27aa:	0e 94 ac 2e 	call	0x5d58	; 0x5d58 <uart_flush>
        uart_send_str_p(PSTR("AT+CLCC\r\n"));
    27ae:	81 ef       	ldi	r24, 0xF1	; 241
    27b0:	92 e0       	ldi	r25, 0x02	; 2
    27b2:	0e 94 94 2e 	call	0x5d28	; 0x5d28 <uart_send_str_p>
        if(mdm_wait_str(2000))
    27b6:	80 ed       	ldi	r24, 0xD0	; 208
    27b8:	97 e0       	ldi	r25, 0x07	; 7
    27ba:	0e 94 46 13 	call	0x268c	; 0x268c <mdm_wait_str>
    27be:	88 23       	and	r24, r24
    27c0:	89 f3       	breq	.-30     	; 0x27a4 <call_status+0x3c>
            ptr = strstr_P(mdm_data, PSTR("+CLCC:"));
    27c2:	6a ee       	ldi	r22, 0xEA	; 234
    27c4:	72 e0       	ldi	r23, 0x02	; 2
    27c6:	80 ef       	ldi	r24, 0xF0	; 240
    27c8:	93 e0       	ldi	r25, 0x03	; 3
    27ca:	0e 94 aa 33 	call	0x6754	; 0x6754 <strstr_P>
            if(ptr)
    27ce:	89 2b       	or	r24, r25
    27d0:	49 f3       	breq	.-46     	; 0x27a4 <call_status+0x3c>
                ptr = strchr(mdm_data, ','); // ищем первую запятую в строке
    27d2:	6c e2       	ldi	r22, 0x2C	; 44
    27d4:	70 e0       	ldi	r23, 0x00	; 0
    27d6:	80 ef       	ldi	r24, 0xF0	; 240
    27d8:	93 e0       	ldi	r25, 0x03	; 3
    27da:	0e 94 ef 33 	call	0x67de	; 0x67de <strchr>
    27de:	28 2f       	mov	r18, r24
    27e0:	39 2f       	mov	r19, r25
                if(ptr)
    27e2:	21 15       	cp	r18, r1
    27e4:	31 05       	cpc	r19, r1
    27e6:	d9 f2       	breq	.-74     	; 0x279e <call_status+0x36>
                    ptr = strchr(ptr, ','); // ищем вторую запятую в строке
    27e8:	6c e2       	ldi	r22, 0x2C	; 44
    27ea:	70 e0       	ldi	r23, 0x00	; 0
    27ec:	c9 01       	movw	r24, r18
    27ee:	01 96       	adiw	r24, 0x01	; 1
    27f0:	0e 94 ef 33 	call	0x67de	; 0x67de <strchr>
    27f4:	e8 2f       	mov	r30, r24
    27f6:	f9 2f       	mov	r31, r25
                    if(ptr)
    27f8:	30 97       	sbiw	r30, 0x00	; 0
    27fa:	89 f2       	breq	.-94     	; 0x279e <call_status+0x36>
                        if(isdigit(*++ptr))
    27fc:	e1 81       	ldd	r30, Z+1	; 0x01
    27fe:	8e 2f       	mov	r24, r30
    2800:	0e 2e       	mov	r0, r30
    2802:	00 0c       	add	r0, r0
    2804:	99 0b       	sbc	r25, r25
    2806:	c0 97       	sbiw	r24, 0x30	; 48
    2808:	0a 97       	sbiw	r24, 0x0a	; 10
    280a:	48 f6       	brcc	.-110    	; 0x279e <call_status+0x36>
                            switch( ptr[0]) 																													//	Получаем значение состояния вызова.
    280c:	e0 53       	subi	r30, 0x30	; 48
    280e:	e8 30       	cpi	r30, 0x08	; 8
    2810:	88 f4       	brcc	.+34     	; 0x2834 <call_status+0xcc>
    2812:	0e 2e       	mov	r0, r30
    2814:	00 0c       	add	r0, r0
    2816:	ff 0b       	sbc	r31, r31
    2818:	e4 56       	subi	r30, 0x64	; 100
    281a:	f8 4c       	sbci	r31, 0xC8	; 200
    281c:	0c 94 6c 2f 	jmp	0x5ed8	; 0x5ed8 <__tablejump2__>
    2820:	83 e0       	ldi	r24, 0x03	; 3
    2822:	0f c0       	rjmp	.+30     	; 0x2842 <call_status+0xda>
                                return GSM_CALL_OUT_BEEP;
    2824:	86 e0       	ldi	r24, 0x06	; 6
    2826:	0d c0       	rjmp	.+26     	; 0x2842 <call_status+0xda>
                                return GSM_CALL_IN_BEEP;
    2828:	87 e0       	ldi	r24, 0x07	; 7
    282a:	0b c0       	rjmp	.+22     	; 0x2842 <call_status+0xda>
                                return GSM_CALL_IN_WAIT;
    282c:	88 e0       	ldi	r24, 0x08	; 8
    282e:	09 c0       	rjmp	.+18     	; 0x2842 <call_status+0xda>
                                return GSM_CALL_END;
    2830:	84 e0       	ldi	r24, 0x04	; 4
    2832:	07 c0       	rjmp	.+14     	; 0x2842 <call_status+0xda>
                                return GSM_CALL_ERR;
    2834:	80 e0       	ldi	r24, 0x00	; 0
    2836:	05 c0       	rjmp	.+10     	; 0x2842 <call_status+0xda>
                                return GSM_CALL_ACTIVE;
    2838:	82 e0       	ldi	r24, 0x02	; 2
    283a:	03 c0       	rjmp	.+6      	; 0x2842 <call_status+0xda>
                                return GSM_CALL_OUT_DIAL;
    283c:	85 e0       	ldi	r24, 0x05	; 5
    283e:	01 c0       	rjmp	.+2      	; 0x2842 <call_status+0xda>
    return 0;
    2840:	80 e0       	ldi	r24, 0x00	; 0
}
    2842:	cf 91       	pop	r28
    2844:	08 95       	ret

00002846 <registration_status_ms>:
{
    2846:	cf 92       	push	r12
    2848:	df 92       	push	r13
    284a:	ef 92       	push	r14
    284c:	ff 92       	push	r15
    284e:	cf 93       	push	r28
    2850:	df 93       	push	r29
    2852:	00 d0       	rcall	.+0      	; 0x2854 <registration_status_ms+0xe>
    2854:	00 d0       	rcall	.+0      	; 0x2856 <registration_status_ms+0x10>
    2856:	cd b7       	in	r28, 0x3d	; 61
    2858:	de b7       	in	r29, 0x3e	; 62
    285a:	c6 2e       	mov	r12, r22
    285c:	d7 2e       	mov	r13, r23
    285e:	e8 2e       	mov	r14, r24
    2860:	f9 2e       	mov	r15, r25
    uint32_t time_stamp = get_time_ms() + time_to_wait_ms;
    2862:	0e 94 09 2c 	call	0x5812	; 0x5812 <get_time_ms>
    2866:	c6 0e       	add	r12, r22
    2868:	d7 1e       	adc	r13, r23
    286a:	e8 1e       	adc	r14, r24
    286c:	f9 1e       	adc	r15, r25
    delay_ms(200);
    286e:	88 ec       	ldi	r24, 0xC8	; 200
    2870:	90 e0       	ldi	r25, 0x00	; 0
    2872:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
    uart_flush();
    2876:	0e 94 ac 2e 	call	0x5d58	; 0x5d58 <uart_flush>
    uart_send_str_p(PSTR("AT+CREG?\r\n"));
    287a:	82 ec       	ldi	r24, 0xC2	; 194
    287c:	92 e0       	ldi	r25, 0x02	; 2
    287e:	0e 94 94 2e 	call	0x5d28	; 0x5d28 <uart_send_str_p>
    2882:	07 c0       	rjmp	.+14     	; 0x2892 <registration_status_ms+0x4c>
            if(get_time_ms() > time_stamp)
    2884:	0e 94 09 2c 	call	0x5812	; 0x5812 <get_time_ms>
    2888:	c6 16       	cp	r12, r22
    288a:	d7 06       	cpc	r13, r23
    288c:	e8 06       	cpc	r14, r24
    288e:	f9 06       	cpc	r15, r25
    2890:	80 f1       	brcs	.+96     	; 0x28f2 <registration_status_ms+0xac>
        while(get_message_from_mdm()==0)
    2892:	0e 94 01 12 	call	0x2402	; 0x2402 <get_message_from_mdm>
    2896:	88 23       	and	r24, r24
    2898:	a9 f3       	breq	.-22     	; 0x2884 <registration_status_ms+0x3e>
        ptr = strstr_P(mdm_data, PSTR("+CREG:")); // статус регистрации в сети
    289a:	6b eb       	ldi	r22, 0xBB	; 187
    289c:	72 e0       	ldi	r23, 0x02	; 2
    289e:	80 ef       	ldi	r24, 0xF0	; 240
    28a0:	93 e0       	ldi	r25, 0x03	; 3
    28a2:	0e 94 aa 33 	call	0x6754	; 0x6754 <strstr_P>
    28a6:	28 2f       	mov	r18, r24
    28a8:	39 2f       	mov	r19, r25
        if(ptr)
    28aa:	21 15       	cp	r18, r1
    28ac:	31 05       	cpc	r19, r1
    28ae:	89 f3       	breq	.-30     	; 0x2892 <registration_status_ms+0x4c>
            ptr = strchr(ptr, ',');
    28b0:	6c e2       	ldi	r22, 0x2C	; 44
    28b2:	70 e0       	ldi	r23, 0x00	; 0
    28b4:	c9 01       	movw	r24, r18
    28b6:	0e 94 ef 33 	call	0x67de	; 0x67de <strchr>
    28ba:	28 2f       	mov	r18, r24
    28bc:	39 2f       	mov	r19, r25
            if(ptr)
    28be:	21 15       	cp	r18, r1
    28c0:	31 05       	cpc	r19, r1
    28c2:	39 f3       	breq	.-50     	; 0x2892 <registration_status_ms+0x4c>
                uint32_t n = strtoul(++ptr, 0, 10);
    28c4:	4a e0       	ldi	r20, 0x0A	; 10
    28c6:	50 e0       	ldi	r21, 0x00	; 0
    28c8:	70 e0       	ldi	r23, 0x00	; 0
    28ca:	60 e0       	ldi	r22, 0x00	; 0
    28cc:	c9 01       	movw	r24, r18
    28ce:	01 96       	adiw	r24, 0x01	; 1
    28d0:	0e 94 20 32 	call	0x6440	; 0x6440 <strtoul>
                if((n==1)||(n==5)) // регистрация в домашней сети, или роуминге
    28d4:	dc 01       	movw	r26, r24
    28d6:	cb 01       	movw	r24, r22
    28d8:	8b 7f       	andi	r24, 0xFB	; 251
    28da:	01 97       	sbiw	r24, 0x01	; 1
    28dc:	a1 05       	cpc	r26, r1
    28de:	b1 05       	cpc	r27, r1
    28e0:	21 f0       	breq	.+8      	; 0x28ea <registration_status_ms+0xa4>
                    registered_in_gsm_network = 0;
    28e2:	10 92 e1 03 	sts	0x03E1, r1	; 0x8003e1 <registered_in_gsm_network>
                    return 0;
    28e6:	80 e0       	ldi	r24, 0x00	; 0
    28e8:	05 c0       	rjmp	.+10     	; 0x28f4 <registration_status_ms+0xae>
                    registered_in_gsm_network = 1;
    28ea:	81 e0       	ldi	r24, 0x01	; 1
    28ec:	80 93 e1 03 	sts	0x03E1, r24	; 0x8003e1 <registered_in_gsm_network>
                    return 1;
    28f0:	01 c0       	rjmp	.+2      	; 0x28f4 <registration_status_ms+0xae>
                return 0;
    28f2:	80 e0       	ldi	r24, 0x00	; 0
}
    28f4:	0f 90       	pop	r0
    28f6:	0f 90       	pop	r0
    28f8:	0f 90       	pop	r0
    28fa:	0f 90       	pop	r0
    28fc:	df 91       	pop	r29
    28fe:	cf 91       	pop	r28
    2900:	ff 90       	pop	r15
    2902:	ef 90       	pop	r14
    2904:	df 90       	pop	r13
    2906:	cf 90       	pop	r12
    2908:	08 95       	ret

0000290a <mdm_wait_prompt_ms>:
{
    290a:	cf 92       	push	r12
    290c:	df 92       	push	r13
    290e:	ef 92       	push	r14
    2910:	ff 92       	push	r15
    2912:	0f 93       	push	r16
    2914:	1f 93       	push	r17
    2916:	cf 93       	push	r28
    2918:	df 93       	push	r29
    291a:	00 d0       	rcall	.+0      	; 0x291c <mdm_wait_prompt_ms+0x12>
    291c:	00 d0       	rcall	.+0      	; 0x291e <mdm_wait_prompt_ms+0x14>
    291e:	0f 92       	push	r0
    2920:	cd b7       	in	r28, 0x3d	; 61
    2922:	de b7       	in	r29, 0x3e	; 62
    2924:	08 2f       	mov	r16, r24
    2926:	19 2f       	mov	r17, r25
    uint32_t time_stamp = get_time_ms() + time_to_wait_ms;
    2928:	0e 94 09 2c 	call	0x5812	; 0x5812 <get_time_ms>
    292c:	69 83       	std	Y+1, r22	; 0x01
    292e:	7a 83       	std	Y+2, r23	; 0x02
    2930:	8b 83       	std	Y+3, r24	; 0x03
    2932:	9c 83       	std	Y+4, r25	; 0x04
    2934:	6b 01       	movw	r12, r22
    2936:	7c 01       	movw	r14, r24
    2938:	c0 0e       	add	r12, r16
    293a:	d1 1e       	adc	r13, r17
    293c:	e1 1c       	adc	r14, r1
    293e:	f1 1c       	adc	r15, r1
        if(mdm_data[0] == '>')
    2940:	00 ef       	ldi	r16, 0xF0	; 240
    2942:	13 e0       	ldi	r17, 0x03	; 3
    2944:	0b c0       	rjmp	.+22     	; 0x295c <mdm_wait_prompt_ms+0x52>
            if((get_time_ms() > time_stamp))
    2946:	0e 94 09 2c 	call	0x5812	; 0x5812 <get_time_ms>
    294a:	69 83       	std	Y+1, r22	; 0x01
    294c:	7a 83       	std	Y+2, r23	; 0x02
    294e:	8b 83       	std	Y+3, r24	; 0x03
    2950:	9c 83       	std	Y+4, r25	; 0x04
    2952:	c6 16       	cp	r12, r22
    2954:	d7 06       	cpc	r13, r23
    2956:	e8 06       	cpc	r14, r24
    2958:	f9 06       	cpc	r15, r25
    295a:	a0 f0       	brcs	.+40     	; 0x2984 <mdm_wait_prompt_ms+0x7a>
        while(get_message_from_mdm()==0)
    295c:	0e 94 01 12 	call	0x2402	; 0x2402 <get_message_from_mdm>
    2960:	8d 83       	std	Y+5, r24	; 0x05
    2962:	88 23       	and	r24, r24
    2964:	81 f3       	breq	.-32     	; 0x2946 <mdm_wait_prompt_ms+0x3c>
        if(mdm_data[0] == '>')
    2966:	d8 01       	movw	r26, r16
    2968:	8c 91       	ld	r24, X
    296a:	8e 33       	cpi	r24, 0x3E	; 62
    296c:	49 f0       	breq	.+18     	; 0x2980 <mdm_wait_prompt_ms+0x76>
        ptr = strstr_P(mdm_data, PSTR("ERROR"));
    296e:	65 e7       	ldi	r22, 0x75	; 117
    2970:	72 e0       	ldi	r23, 0x02	; 2
    2972:	c8 01       	movw	r24, r16
    2974:	0e 94 aa 33 	call	0x6754	; 0x6754 <strstr_P>
        if(ptr)
    2978:	89 2b       	or	r24, r25
    297a:	81 f3       	breq	.-32     	; 0x295c <mdm_wait_prompt_ms+0x52>
            return 0;
    297c:	1d 82       	std	Y+5, r1	; 0x05
    297e:	02 c0       	rjmp	.+4      	; 0x2984 <mdm_wait_prompt_ms+0x7a>
            return 1;
    2980:	b1 e0       	ldi	r27, 0x01	; 1
    2982:	bd 83       	std	Y+5, r27	; 0x05
}
    2984:	8d 81       	ldd	r24, Y+5	; 0x05
    2986:	0f 90       	pop	r0
    2988:	0f 90       	pop	r0
    298a:	0f 90       	pop	r0
    298c:	0f 90       	pop	r0
    298e:	0f 90       	pop	r0
    2990:	df 91       	pop	r29
    2992:	cf 91       	pop	r28
    2994:	1f 91       	pop	r17
    2996:	0f 91       	pop	r16
    2998:	ff 90       	pop	r15
    299a:	ef 90       	pop	r14
    299c:	df 90       	pop	r13
    299e:	cf 90       	pop	r12
    29a0:	08 95       	ret

000029a2 <save_sms_sim>:
{
    29a2:	0f 93       	push	r16
    29a4:	1f 93       	push	r17
    29a6:	cf 93       	push	r28
    29a8:	df 93       	push	r29
    29aa:	08 2f       	mov	r16, r24
    29ac:	19 2f       	mov	r17, r25
    sprintf_P(mdm_data, PSTR("AT+CMGW=\"%s\"\r\n"), _phone);
    29ae:	7f 93       	push	r23
    29b0:	6f 93       	push	r22
    29b2:	86 e6       	ldi	r24, 0x66	; 102
    29b4:	92 e0       	ldi	r25, 0x02	; 2
    29b6:	9f 93       	push	r25
    29b8:	8f 93       	push	r24
    29ba:	80 ef       	ldi	r24, 0xF0	; 240
    29bc:	93 e0       	ldi	r25, 0x03	; 3
    29be:	9f 93       	push	r25
    29c0:	8f 93       	push	r24
    29c2:	0e 94 68 34 	call	0x68d0	; 0x68d0 <sprintf_P>
    29c6:	0f 90       	pop	r0
    29c8:	0f 90       	pop	r0
    29ca:	0f 90       	pop	r0
    29cc:	0f 90       	pop	r0
    29ce:	0f 90       	pop	r0
    29d0:	0f 90       	pop	r0
    29d2:	c1 e0       	ldi	r28, 0x01	; 1
    uint8_t rez = 0;
    29d4:	d0 e0       	ldi	r29, 0x00	; 0
    29d6:	29 c0       	rjmp	.+82     	; 0x2a2a <save_sms_sim+0x88>
            delay_ms(300);
    29d8:	8c e2       	ldi	r24, 0x2C	; 44
    29da:	91 e0       	ldi	r25, 0x01	; 1
    29dc:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
        uart_flush();
    29e0:	0e 94 ac 2e 	call	0x5d58	; 0x5d58 <uart_flush>
        uart_send_str(mdm_data);
    29e4:	80 ef       	ldi	r24, 0xF0	; 240
    29e6:	93 e0       	ldi	r25, 0x03	; 3
    29e8:	0e 94 76 2e 	call	0x5cec	; 0x5cec <uart_send_str>
        if(mdm_wait_prompt_ms(3000) == FALSE)
    29ec:	88 eb       	ldi	r24, 0xB8	; 184
    29ee:	9b e0       	ldi	r25, 0x0B	; 11
    29f0:	0e 94 85 14 	call	0x290a	; 0x290a <mdm_wait_prompt_ms>
    29f4:	88 23       	and	r24, r24
    29f6:	b1 f0       	breq	.+44     	; 0x2a24 <save_sms_sim+0x82>
        uart_flush();
    29f8:	0e 94 ac 2e 	call	0x5d58	; 0x5d58 <uart_flush>
        uart_send_str(_msg);
    29fc:	80 2f       	mov	r24, r16
    29fe:	91 2f       	mov	r25, r17
    2a00:	0e 94 76 2e 	call	0x5cec	; 0x5cec <uart_send_str>
        delay_ms(20);
    2a04:	84 e1       	ldi	r24, 0x14	; 20
    2a06:	90 e0       	ldi	r25, 0x00	; 0
    2a08:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
        uart_send_byte(0x1A);
    2a0c:	8a e1       	ldi	r24, 0x1A	; 26
    2a0e:	0e 94 8c 2e 	call	0x5d18	; 0x5d18 <uart_send_byte>
        rez = mdm_wait_cmd_ms(2000, (const char*)RESPON_OK);
    2a12:	64 ec       	ldi	r22, 0xC4	; 196
    2a14:	72 e0       	ldi	r23, 0x02	; 2
    2a16:	80 ed       	ldi	r24, 0xD0	; 208
    2a18:	97 e0       	ldi	r25, 0x07	; 7
    2a1a:	0e 94 cd 12 	call	0x259a	; 0x259a <mdm_wait_cmd_ms>
    2a1e:	d8 2f       	mov	r29, r24
        if(rez == 1)
    2a20:	81 30       	cpi	r24, 0x01	; 1
    2a22:	39 f1       	breq	.+78     	; 0x2a72 <save_sms_sim+0xd0>
    for(uint8_t i = 0; i < 10; i++)
    2a24:	ca 30       	cpi	r28, 0x0A	; 10
    2a26:	48 f5       	brcc	.+82     	; 0x2a7a <save_sms_sim+0xd8>
    2a28:	cf 5f       	subi	r28, 0xFF	; 255
        if(i!=0)
    2a2a:	c1 30       	cpi	r28, 0x01	; 1
    2a2c:	a9 f6       	brne	.-86     	; 0x29d8 <save_sms_sim+0x36>
        uart_flush();
    2a2e:	0e 94 ac 2e 	call	0x5d58	; 0x5d58 <uart_flush>
        uart_send_str(mdm_data);
    2a32:	80 ef       	ldi	r24, 0xF0	; 240
    2a34:	93 e0       	ldi	r25, 0x03	; 3
    2a36:	0e 94 76 2e 	call	0x5cec	; 0x5cec <uart_send_str>
        if(mdm_wait_prompt_ms(3000) == FALSE)
    2a3a:	88 eb       	ldi	r24, 0xB8	; 184
    2a3c:	9b e0       	ldi	r25, 0x0B	; 11
    2a3e:	0e 94 85 14 	call	0x290a	; 0x290a <mdm_wait_prompt_ms>
    2a42:	88 23       	and	r24, r24
    2a44:	89 f3       	breq	.-30     	; 0x2a28 <save_sms_sim+0x86>
        uart_flush();
    2a46:	0e 94 ac 2e 	call	0x5d58	; 0x5d58 <uart_flush>
        uart_send_str(_msg);
    2a4a:	80 2f       	mov	r24, r16
    2a4c:	91 2f       	mov	r25, r17
    2a4e:	0e 94 76 2e 	call	0x5cec	; 0x5cec <uart_send_str>
        delay_ms(20);
    2a52:	84 e1       	ldi	r24, 0x14	; 20
    2a54:	90 e0       	ldi	r25, 0x00	; 0
    2a56:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
        uart_send_byte(0x1A);
    2a5a:	8a e1       	ldi	r24, 0x1A	; 26
    2a5c:	0e 94 8c 2e 	call	0x5d18	; 0x5d18 <uart_send_byte>
        rez = mdm_wait_cmd_ms(2000, (const char*)RESPON_OK);
    2a60:	64 ec       	ldi	r22, 0xC4	; 196
    2a62:	72 e0       	ldi	r23, 0x02	; 2
    2a64:	80 ed       	ldi	r24, 0xD0	; 208
    2a66:	97 e0       	ldi	r25, 0x07	; 7
    2a68:	0e 94 cd 12 	call	0x259a	; 0x259a <mdm_wait_cmd_ms>
    2a6c:	d8 2f       	mov	r29, r24
        if(rez == 1)
    2a6e:	81 30       	cpi	r24, 0x01	; 1
    2a70:	d9 f6       	brne	.-74     	; 0x2a28 <save_sms_sim+0x86>
            unsent_sms = 1;
    2a72:	81 e0       	ldi	r24, 0x01	; 1
    2a74:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <unsent_sms>
        rez = mdm_wait_cmd_ms(2000, (const char*)RESPON_OK);
    2a78:	d1 e0       	ldi	r29, 0x01	; 1
}
    2a7a:	8d 2f       	mov	r24, r29
    2a7c:	df 91       	pop	r29
    2a7e:	cf 91       	pop	r28
    2a80:	1f 91       	pop	r17
    2a82:	0f 91       	pop	r16
    2a84:	08 95       	ret

00002a86 <send_sms>:
{
    2a86:	ff 92       	push	r15
    2a88:	0f 93       	push	r16
    2a8a:	1f 93       	push	r17
    2a8c:	cf 93       	push	r28
    2a8e:	df 93       	push	r29
    2a90:	f8 2e       	mov	r15, r24
    2a92:	09 2f       	mov	r16, r25
    2a94:	16 2f       	mov	r17, r22
    2a96:	d7 2f       	mov	r29, r23
    if(deposit < 1)
    2a98:	20 91 d0 03 	lds	r18, 0x03D0	; 0x8003d0 <deposit>
    2a9c:	30 91 d1 03 	lds	r19, 0x03D1	; 0x8003d1 <deposit+0x1>
        return 0;
    2aa0:	c0 e0       	ldi	r28, 0x00	; 0
    if(deposit < 1)
    2aa2:	12 16       	cp	r1, r18
    2aa4:	13 06       	cpc	r1, r19
    2aa6:	44 f5       	brge	.+80     	; 0x2af8 <send_sms+0x72>
    flag_busy_mdm = 1;
    2aa8:	81 e0       	ldi	r24, 0x01	; 1
    2aaa:	80 93 cc 03 	sts	0x03CC, r24	; 0x8003cc <flag_busy_mdm>
    delay_ms(100);
    2aae:	84 e6       	ldi	r24, 0x64	; 100
    2ab0:	90 e0       	ldi	r25, 0x00	; 0
    2ab2:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
    if(registration_status_ms(2000) == 0)
    2ab6:	60 ed       	ldi	r22, 0xD0	; 208
    2ab8:	77 e0       	ldi	r23, 0x07	; 7
    2aba:	80 e0       	ldi	r24, 0x00	; 0
    2abc:	90 e0       	ldi	r25, 0x00	; 0
    2abe:	0e 94 23 14 	call	0x2846	; 0x2846 <registration_status_ms>
    2ac2:	81 11       	cpse	r24, r1
    2ac4:	20 c0       	rjmp	.+64     	; 0x2b06 <send_sms+0x80>
        if(error_gsm < 0xFFFF)
    2ac6:	80 91 db 03 	lds	r24, 0x03DB	; 0x8003db <error_gsm>
    2aca:	90 91 dc 03 	lds	r25, 0x03DC	; 0x8003dc <error_gsm+0x1>
    2ace:	8f 3f       	cpi	r24, 0xFF	; 255
    2ad0:	98 07       	cpc	r25, r24
    2ad2:	29 f0       	breq	.+10     	; 0x2ade <send_sms+0x58>
            error_gsm++;
    2ad4:	01 96       	adiw	r24, 0x01	; 1
    2ad6:	90 93 dc 03 	sts	0x03DC, r25	; 0x8003dc <error_gsm+0x1>
    2ada:	80 93 db 03 	sts	0x03DB, r24	; 0x8003db <error_gsm>
        save_sms_sim(str, phone);
    2ade:	61 2f       	mov	r22, r17
    2ae0:	7d 2f       	mov	r23, r29
    2ae2:	8f 2d       	mov	r24, r15
    2ae4:	90 2f       	mov	r25, r16
    2ae6:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <save_sms_sim>
        flag_busy_mdm = 0;
    2aea:	10 92 cc 03 	sts	0x03CC, r1	; 0x8003cc <flag_busy_mdm>
        delay_ms(100);
    2aee:	84 e6       	ldi	r24, 0x64	; 100
    2af0:	90 e0       	ldi	r25, 0x00	; 0
    2af2:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
        return 0;
    2af6:	c0 e0       	ldi	r28, 0x00	; 0
}
    2af8:	8c 2f       	mov	r24, r28
    2afa:	df 91       	pop	r29
    2afc:	cf 91       	pop	r28
    2afe:	1f 91       	pop	r17
    2b00:	0f 91       	pop	r16
    2b02:	ff 90       	pop	r15
    2b04:	08 95       	ret
    delay_ms(200);
    2b06:	88 ec       	ldi	r24, 0xC8	; 200
    2b08:	90 e0       	ldi	r25, 0x00	; 0
    2b0a:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
    sprintf_P(mdm_data, PSTR("AT+CMGS=\"%s\"\r\n"), phone);
    2b0e:	df 93       	push	r29
    2b10:	1f 93       	push	r17
    2b12:	8b e7       	ldi	r24, 0x7B	; 123
    2b14:	92 e0       	ldi	r25, 0x02	; 2
    2b16:	9f 93       	push	r25
    2b18:	8f 93       	push	r24
    2b1a:	80 ef       	ldi	r24, 0xF0	; 240
    2b1c:	93 e0       	ldi	r25, 0x03	; 3
    2b1e:	9f 93       	push	r25
    2b20:	8f 93       	push	r24
    2b22:	0e 94 68 34 	call	0x68d0	; 0x68d0 <sprintf_P>
    uart_flush();
    2b26:	0e 94 ac 2e 	call	0x5d58	; 0x5d58 <uart_flush>
    uart_send_str(mdm_data);
    2b2a:	80 ef       	ldi	r24, 0xF0	; 240
    2b2c:	93 e0       	ldi	r25, 0x03	; 3
    2b2e:	0e 94 76 2e 	call	0x5cec	; 0x5cec <uart_send_str>
    if(mdm_wait_prompt_ms(1000) == 0)
    2b32:	88 ee       	ldi	r24, 0xE8	; 232
    2b34:	93 e0       	ldi	r25, 0x03	; 3
    2b36:	0e 94 85 14 	call	0x290a	; 0x290a <mdm_wait_prompt_ms>
    2b3a:	c8 2f       	mov	r28, r24
    2b3c:	0f 90       	pop	r0
    2b3e:	0f 90       	pop	r0
    2b40:	0f 90       	pop	r0
    2b42:	0f 90       	pop	r0
    2b44:	0f 90       	pop	r0
    2b46:	0f 90       	pop	r0
    2b48:	88 23       	and	r24, r24
    2b4a:	d9 f0       	breq	.+54     	; 0x2b82 <send_sms+0xfc>
    uart_send_str(str);
    2b4c:	8f 2d       	mov	r24, r15
    2b4e:	90 2f       	mov	r25, r16
    2b50:	0e 94 76 2e 	call	0x5cec	; 0x5cec <uart_send_str>
    delay_ms(100);
    2b54:	84 e6       	ldi	r24, 0x64	; 100
    2b56:	90 e0       	ldi	r25, 0x00	; 0
    2b58:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
    uart_send_byte(0x1A);
    2b5c:	8a e1       	ldi	r24, 0x1A	; 26
    2b5e:	0e 94 8c 2e 	call	0x5d18	; 0x5d18 <uart_send_byte>
    rez = mdm_wait_cmd_ms(60000, (const char*)RESPON_CMGS);
    2b62:	67 ec       	ldi	r22, 0xC7	; 199
    2b64:	72 e0       	ldi	r23, 0x02	; 2
    2b66:	80 e6       	ldi	r24, 0x60	; 96
    2b68:	9a ee       	ldi	r25, 0xEA	; 234
    2b6a:	0e 94 cd 12 	call	0x259a	; 0x259a <mdm_wait_cmd_ms>
    2b6e:	c8 2f       	mov	r28, r24
    if(!rez)
    2b70:	88 23       	and	r24, r24
    2b72:	a1 f0       	breq	.+40     	; 0x2b9c <send_sms+0x116>
    flag_busy_mdm = 0;
    2b74:	10 92 cc 03 	sts	0x03CC, r1	; 0x8003cc <flag_busy_mdm>
    delay_ms(100);
    2b78:	84 e6       	ldi	r24, 0x64	; 100
    2b7a:	90 e0       	ldi	r25, 0x00	; 0
    2b7c:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
    return rez;
    2b80:	bb cf       	rjmp	.-138    	; 0x2af8 <send_sms+0x72>
        save_sms_sim(str, phone);
    2b82:	61 2f       	mov	r22, r17
    2b84:	7d 2f       	mov	r23, r29
    2b86:	8f 2d       	mov	r24, r15
    2b88:	90 2f       	mov	r25, r16
    2b8a:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <save_sms_sim>
        flag_busy_mdm = 0;
    2b8e:	10 92 cc 03 	sts	0x03CC, r1	; 0x8003cc <flag_busy_mdm>
        delay_ms(100);
    2b92:	84 e6       	ldi	r24, 0x64	; 100
    2b94:	90 e0       	ldi	r25, 0x00	; 0
    2b96:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
        return 0;
    2b9a:	ae cf       	rjmp	.-164    	; 0x2af8 <send_sms+0x72>
        save_sms_sim(str, phone);
    2b9c:	61 2f       	mov	r22, r17
    2b9e:	7d 2f       	mov	r23, r29
    2ba0:	8f 2d       	mov	r24, r15
    2ba2:	90 2f       	mov	r25, r16
    2ba4:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <save_sms_sim>
    2ba8:	e5 cf       	rjmp	.-54     	; 0x2b74 <send_sms+0xee>

00002baa <send_sms_p>:
{
    2baa:	ff 92       	push	r15
    2bac:	0f 93       	push	r16
    2bae:	1f 93       	push	r17
    2bb0:	cf 93       	push	r28
    2bb2:	df 93       	push	r29
    2bb4:	f8 2e       	mov	r15, r24
    2bb6:	09 2f       	mov	r16, r25
    2bb8:	16 2f       	mov	r17, r22
    2bba:	d7 2f       	mov	r29, r23
    if(deposit < 1)
    2bbc:	80 91 d0 03 	lds	r24, 0x03D0	; 0x8003d0 <deposit>
    2bc0:	90 91 d1 03 	lds	r25, 0x03D1	; 0x8003d1 <deposit+0x1>
        return 0;
    2bc4:	c0 e0       	ldi	r28, 0x00	; 0
    if(deposit < 1)
    2bc6:	18 16       	cp	r1, r24
    2bc8:	19 06       	cpc	r1, r25
    2bca:	0c f0       	brlt	.+2      	; 0x2bce <send_sms_p+0x24>
    2bcc:	4d c0       	rjmp	.+154    	; 0x2c68 <send_sms_p+0xbe>
    flag_busy_mdm = 1;
    2bce:	81 e0       	ldi	r24, 0x01	; 1
    2bd0:	80 93 cc 03 	sts	0x03CC, r24	; 0x8003cc <flag_busy_mdm>
    delay_ms(100);
    2bd4:	84 e6       	ldi	r24, 0x64	; 100
    2bd6:	90 e0       	ldi	r25, 0x00	; 0
    2bd8:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
    if(registration_status_ms(2000) == FALSE)
    2bdc:	60 ed       	ldi	r22, 0xD0	; 208
    2bde:	77 e0       	ldi	r23, 0x07	; 7
    2be0:	80 e0       	ldi	r24, 0x00	; 0
    2be2:	90 e0       	ldi	r25, 0x00	; 0
    2be4:	0e 94 23 14 	call	0x2846	; 0x2846 <registration_status_ms>
    2be8:	88 23       	and	r24, r24
    2bea:	09 f4       	brne	.+2      	; 0x2bee <send_sms_p+0x44>
    2bec:	44 c0       	rjmp	.+136    	; 0x2c76 <send_sms_p+0xcc>
    delay_ms(200);
    2bee:	88 ec       	ldi	r24, 0xC8	; 200
    2bf0:	90 e0       	ldi	r25, 0x00	; 0
    2bf2:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
    sprintf_P(mdm_data, PSTR("AT+CMGS=\"%s\"\r\n"), phone);
    2bf6:	df 93       	push	r29
    2bf8:	1f 93       	push	r17
    2bfa:	87 e5       	ldi	r24, 0x57	; 87
    2bfc:	92 e0       	ldi	r25, 0x02	; 2
    2bfe:	9f 93       	push	r25
    2c00:	8f 93       	push	r24
    2c02:	80 ef       	ldi	r24, 0xF0	; 240
    2c04:	93 e0       	ldi	r25, 0x03	; 3
    2c06:	9f 93       	push	r25
    2c08:	8f 93       	push	r24
    2c0a:	0e 94 68 34 	call	0x68d0	; 0x68d0 <sprintf_P>
    uart_flush();
    2c0e:	0e 94 ac 2e 	call	0x5d58	; 0x5d58 <uart_flush>
    uart_send_str(mdm_data);
    2c12:	80 ef       	ldi	r24, 0xF0	; 240
    2c14:	93 e0       	ldi	r25, 0x03	; 3
    2c16:	0e 94 76 2e 	call	0x5cec	; 0x5cec <uart_send_str>
    if(mdm_wait_prompt_ms(1000) == FALSE)
    2c1a:	88 ee       	ldi	r24, 0xE8	; 232
    2c1c:	93 e0       	ldi	r25, 0x03	; 3
    2c1e:	0e 94 85 14 	call	0x290a	; 0x290a <mdm_wait_prompt_ms>
    2c22:	c8 2f       	mov	r28, r24
    2c24:	0f 90       	pop	r0
    2c26:	0f 90       	pop	r0
    2c28:	0f 90       	pop	r0
    2c2a:	0f 90       	pop	r0
    2c2c:	0f 90       	pop	r0
    2c2e:	0f 90       	pop	r0
    2c30:	88 23       	and	r24, r24
    2c32:	79 f1       	breq	.+94     	; 0x2c92 <send_sms_p+0xe8>
    uart_send_str_p((const char*)str);
    2c34:	8f 2d       	mov	r24, r15
    2c36:	90 2f       	mov	r25, r16
    2c38:	0e 94 94 2e 	call	0x5d28	; 0x5d28 <uart_send_str_p>
    delay_ms(100);
    2c3c:	84 e6       	ldi	r24, 0x64	; 100
    2c3e:	90 e0       	ldi	r25, 0x00	; 0
    2c40:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
    uart_send_byte(0x1A);
    2c44:	8a e1       	ldi	r24, 0x1A	; 26
    2c46:	0e 94 8c 2e 	call	0x5d18	; 0x5d18 <uart_send_byte>
    rez = mdm_wait_cmd_ms(60000, (const char*)RESPON_CMGS);
    2c4a:	67 ec       	ldi	r22, 0xC7	; 199
    2c4c:	72 e0       	ldi	r23, 0x02	; 2
    2c4e:	80 e6       	ldi	r24, 0x60	; 96
    2c50:	9a ee       	ldi	r25, 0xEA	; 234
    2c52:	0e 94 cd 12 	call	0x259a	; 0x259a <mdm_wait_cmd_ms>
    2c56:	c8 2f       	mov	r28, r24
    if(!rez)
    2c58:	88 23       	and	r24, r24
    2c5a:	41 f1       	breq	.+80     	; 0x2cac <send_sms_p+0x102>
    flag_busy_mdm = 0;
    2c5c:	10 92 cc 03 	sts	0x03CC, r1	; 0x8003cc <flag_busy_mdm>
    delay_ms(100);
    2c60:	84 e6       	ldi	r24, 0x64	; 100
    2c62:	90 e0       	ldi	r25, 0x00	; 0
    2c64:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
}
    2c68:	8c 2f       	mov	r24, r28
    2c6a:	df 91       	pop	r29
    2c6c:	cf 91       	pop	r28
    2c6e:	1f 91       	pop	r17
    2c70:	0f 91       	pop	r16
    2c72:	ff 90       	pop	r15
    2c74:	08 95       	ret
        save_sms_sim((char*)str, phone);
    2c76:	61 2f       	mov	r22, r17
    2c78:	7d 2f       	mov	r23, r29
    2c7a:	8f 2d       	mov	r24, r15
    2c7c:	90 2f       	mov	r25, r16
    2c7e:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <save_sms_sim>
        flag_busy_mdm = 0;
    2c82:	10 92 cc 03 	sts	0x03CC, r1	; 0x8003cc <flag_busy_mdm>
        delay_ms(100);
    2c86:	84 e6       	ldi	r24, 0x64	; 100
    2c88:	90 e0       	ldi	r25, 0x00	; 0
    2c8a:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
        return FALSE;
    2c8e:	c0 e0       	ldi	r28, 0x00	; 0
    2c90:	eb cf       	rjmp	.-42     	; 0x2c68 <send_sms_p+0xbe>
        save_sms_sim((char *)str, phone);
    2c92:	61 2f       	mov	r22, r17
    2c94:	7d 2f       	mov	r23, r29
    2c96:	8f 2d       	mov	r24, r15
    2c98:	90 2f       	mov	r25, r16
    2c9a:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <save_sms_sim>
        flag_busy_mdm = 0;
    2c9e:	10 92 cc 03 	sts	0x03CC, r1	; 0x8003cc <flag_busy_mdm>
        delay_ms(100);
    2ca2:	84 e6       	ldi	r24, 0x64	; 100
    2ca4:	90 e0       	ldi	r25, 0x00	; 0
    2ca6:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
        return FALSE;
    2caa:	de cf       	rjmp	.-68     	; 0x2c68 <send_sms_p+0xbe>
        save_sms_sim((char*)str, phone);
    2cac:	61 2f       	mov	r22, r17
    2cae:	7d 2f       	mov	r23, r29
    2cb0:	8f 2d       	mov	r24, r15
    2cb2:	90 2f       	mov	r25, r16
    2cb4:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <save_sms_sim>
    2cb8:	d1 cf       	rjmp	.-94     	; 0x2c5c <send_sms_p+0xb2>

00002cba <call_to>:
{
    2cba:	bf 92       	push	r11
    2cbc:	cf 92       	push	r12
    2cbe:	df 92       	push	r13
    2cc0:	ef 92       	push	r14
    2cc2:	ff 92       	push	r15
    2cc4:	0f 93       	push	r16
    2cc6:	1f 93       	push	r17
    2cc8:	cf 93       	push	r28
    2cca:	df 93       	push	r29
    2ccc:	00 d0       	rcall	.+0      	; 0x2cce <call_to+0x14>
    2cce:	00 d0       	rcall	.+0      	; 0x2cd0 <call_to+0x16>
    2cd0:	0f 92       	push	r0
    2cd2:	cd b7       	in	r28, 0x3d	; 61
    2cd4:	de b7       	in	r29, 0x3e	; 62
    2cd6:	8d 83       	std	Y+5, r24	; 0x05
    2cd8:	f9 2e       	mov	r15, r25
    2cda:	b6 2e       	mov	r11, r22
    2cdc:	e7 2e       	mov	r14, r23
    hang_up_call();
    2cde:	0e 94 1c 13 	call	0x2638	; 0x2638 <hang_up_call>
    if(deposit < 1)
    2ce2:	20 91 d0 03 	lds	r18, 0x03D0	; 0x8003d0 <deposit>
    2ce6:	30 91 d1 03 	lds	r19, 0x03D1	; 0x8003d1 <deposit+0x1>
        return 0;
    2cea:	80 e0       	ldi	r24, 0x00	; 0
    if(deposit < 1)
    2cec:	12 16       	cp	r1, r18
    2cee:	13 06       	cpc	r1, r19
    2cf0:	a4 f5       	brge	.+104    	; 0x2d5a <call_to+0xa0>
    if(registered_in_gsm_network == 0)
    2cf2:	80 91 e1 03 	lds	r24, 0x03E1	; 0x8003e1 <registered_in_gsm_network>
    2cf6:	88 23       	and	r24, r24
    2cf8:	81 f1       	breq	.+96     	; 0x2d5a <call_to+0xa0>
    uint8_t i = 0;
    2cfa:	19 82       	std	Y+1, r1	; 0x01
        sprintf_P(mdm_data, PSTR("ATD%s;\r\n"), phone);
    2cfc:	0f 2e       	mov	r0, r31
    2cfe:	f3 ef       	ldi	r31, 0xF3	; 243
    2d00:	cf 2e       	mov	r12, r31
    2d02:	f3 e0       	ldi	r31, 0x03	; 3
    2d04:	df 2e       	mov	r13, r31
    2d06:	f0 2d       	mov	r31, r0
    2d08:	00 ef       	ldi	r16, 0xF0	; 240
    2d0a:	13 e0       	ldi	r17, 0x03	; 3
        delay_ms(1000);
    2d0c:	88 ee       	ldi	r24, 0xE8	; 232
    2d0e:	93 e0       	ldi	r25, 0x03	; 3
    2d10:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
        i++;
    2d14:	89 81       	ldd	r24, Y+1	; 0x01
    2d16:	8f 5f       	subi	r24, 0xFF	; 255
    2d18:	89 83       	std	Y+1, r24	; 0x01
        sprintf_P(mdm_data, PSTR("ATD%s;\r\n"), phone);
    2d1a:	ff 92       	push	r15
    2d1c:	9d 81       	ldd	r25, Y+5	; 0x05
    2d1e:	9f 93       	push	r25
    2d20:	df 92       	push	r13
    2d22:	cf 92       	push	r12
    2d24:	1f 93       	push	r17
    2d26:	0f 93       	push	r16
    2d28:	0e 94 68 34 	call	0x68d0	; 0x68d0 <sprintf_P>
        uart_flush();
    2d2c:	0e 94 ac 2e 	call	0x5d58	; 0x5d58 <uart_flush>
        uart_send_str(mdm_data);
    2d30:	c8 01       	movw	r24, r16
    2d32:	0e 94 76 2e 	call	0x5cec	; 0x5cec <uart_send_str>
        if(mdm_wait_cmd_ms(2000, (const char*)RESPON_OK))
    2d36:	64 ec       	ldi	r22, 0xC4	; 196
    2d38:	72 e0       	ldi	r23, 0x02	; 2
    2d3a:	80 ed       	ldi	r24, 0xD0	; 208
    2d3c:	97 e0       	ldi	r25, 0x07	; 7
    2d3e:	0e 94 cd 12 	call	0x259a	; 0x259a <mdm_wait_cmd_ms>
    2d42:	0f 90       	pop	r0
    2d44:	0f 90       	pop	r0
    2d46:	0f 90       	pop	r0
    2d48:	0f 90       	pop	r0
    2d4a:	0f 90       	pop	r0
    2d4c:	0f 90       	pop	r0
    2d4e:	81 11       	cpse	r24, r1
    2d50:	13 c0       	rjmp	.+38     	; 0x2d78 <call_to+0xbe>
    while(i <= 3)
    2d52:	89 81       	ldd	r24, Y+1	; 0x01
    2d54:	84 30       	cpi	r24, 0x04	; 4
    2d56:	d0 f2       	brcs	.-76     	; 0x2d0c <call_to+0x52>
    return FALSE;
    2d58:	80 e0       	ldi	r24, 0x00	; 0
}
    2d5a:	0f 90       	pop	r0
    2d5c:	0f 90       	pop	r0
    2d5e:	0f 90       	pop	r0
    2d60:	0f 90       	pop	r0
    2d62:	0f 90       	pop	r0
    2d64:	df 91       	pop	r29
    2d66:	cf 91       	pop	r28
    2d68:	1f 91       	pop	r17
    2d6a:	0f 91       	pop	r16
    2d6c:	ff 90       	pop	r15
    2d6e:	ef 90       	pop	r14
    2d70:	df 90       	pop	r13
    2d72:	cf 90       	pop	r12
    2d74:	bf 90       	pop	r11
    2d76:	08 95       	ret
            delay_ms(200);
    2d78:	88 ec       	ldi	r24, 0xC8	; 200
    2d7a:	90 e0       	ldi	r25, 0x00	; 0
    2d7c:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
            while(call_status()==GSM_CALL_OUT_DIAL) // Цикл выполняется пока набирается номер ...
    2d80:	04 c0       	rjmp	.+8      	; 0x2d8a <call_to+0xd0>
                delay_ms(500); //          Можно добавить код который будет выполняться в процессе набора номера             //
    2d82:	84 ef       	ldi	r24, 0xF4	; 244
    2d84:	91 e0       	ldi	r25, 0x01	; 1
    2d86:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
            while(call_status()==GSM_CALL_OUT_DIAL) // Цикл выполняется пока набирается номер ...
    2d8a:	0e 94 b4 13 	call	0x2768	; 0x2768 <call_status>
    2d8e:	85 30       	cpi	r24, 0x05	; 5
    2d90:	c1 f3       	breq	.-16     	; 0x2d82 <call_to+0xc8>
        delay_ms(200);
    2d92:	88 ec       	ldi	r24, 0xC8	; 200
    2d94:	90 e0       	ldi	r25, 0x00	; 0
    2d96:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
        if(call_status()==GSM_CALL_OUT_BEEP)
    2d9a:	0e 94 b4 13 	call	0x2768	; 0x2768 <call_status>
    2d9e:	86 30       	cpi	r24, 0x06	; 6
    2da0:	51 f1       	breq	.+84     	; 0x2df6 <call_to+0x13c>
        delay_ms(200);
    2da2:	88 ec       	ldi	r24, 0xC8	; 200
    2da4:	90 e0       	ldi	r25, 0x00	; 0
    2da6:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
        if(call_status()==GSM_CALL_ACTIVE)                   // Если соединение установлено (абонент ответил), то ...
    2daa:	0e 94 b4 13 	call	0x2768	; 0x2768 <call_status>
    2dae:	82 30       	cpi	r24, 0x02	; 2
    2db0:	39 f1       	breq	.+78     	; 0x2e00 <call_to+0x146>
            if(i == 3)
    2db2:	b9 81       	ldd	r27, Y+1	; 0x01
    2db4:	b3 30       	cpi	r27, 0x03	; 3
    2db6:	69 f6       	brne	.-102    	; 0x2d52 <call_to+0x98>
                uint8_t flag = get_flag_alarm();
    2db8:	0e 94 98 0a 	call	0x1530	; 0x1530 <get_flag_alarm>
                if(flag == FLAG_ALARM_FRONT)
    2dbc:	83 30       	cpi	r24, 0x03	; 3
    2dbe:	09 f4       	brne	.+2      	; 0x2dc2 <call_to+0x108>
    2dc0:	5a c0       	rjmp	.+180    	; 0x2e76 <call_to+0x1bc>
                else if(flag == FLAG_ALARM_SIDE)
    2dc2:	84 30       	cpi	r24, 0x04	; 4
    2dc4:	09 f4       	brne	.+2      	; 0x2dc8 <call_to+0x10e>
    2dc6:	5e c0       	rjmp	.+188    	; 0x2e84 <call_to+0x1ca>
                else if(flag == FLAG_ALARM_COOK_ROOM)
    2dc8:	82 30       	cpi	r24, 0x02	; 2
    2dca:	09 f4       	brne	.+2      	; 0x2dce <call_to+0x114>
    2dcc:	62 c0       	rjmp	.+196    	; 0x2e92 <call_to+0x1d8>
                else if(flag == FLAG_ALARM_SMOKE)
    2dce:	87 30       	cpi	r24, 0x07	; 7
    2dd0:	09 f4       	brne	.+2      	; 0x2dd4 <call_to+0x11a>
    2dd2:	66 c0       	rjmp	.+204    	; 0x2ea0 <call_to+0x1e6>
                else if(flag == FLAG_ALARM_TEMPERATURE)
    2dd4:	85 30       	cpi	r24, 0x05	; 5
    2dd6:	09 f4       	brne	.+2      	; 0x2dda <call_to+0x120>
    2dd8:	6a c0       	rjmp	.+212    	; 0x2eae <call_to+0x1f4>
                else if(flag == FLAG_ALARM_TEMPERATURE_INT)
    2dda:	86 30       	cpi	r24, 0x06	; 6
    2ddc:	09 f4       	brne	.+2      	; 0x2de0 <call_to+0x126>
    2dde:	6e c0       	rjmp	.+220    	; 0x2ebc <call_to+0x202>
                else if(flag == FLAG_ALARM_COURTYARD)
    2de0:	81 30       	cpi	r24, 0x01	; 1
    2de2:	09 f4       	brne	.+2      	; 0x2de6 <call_to+0x12c>
    2de4:	72 c0       	rjmp	.+228    	; 0x2eca <call_to+0x210>
                set_flag_alarm(0);
    2de6:	80 e0       	ldi	r24, 0x00	; 0
    2de8:	0e 94 95 0a 	call	0x152a	; 0x152a <set_flag_alarm>
    while(i <= 3)
    2dec:	8f cf       	rjmp	.-226    	; 0x2d0c <call_to+0x52>
                delay_ms(1000);
    2dee:	88 ee       	ldi	r24, 0xE8	; 232
    2df0:	93 e0       	ldi	r25, 0x03	; 3
    2df2:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
            while(call_status()==GSM_CALL_OUT_BEEP)
    2df6:	0e 94 b4 13 	call	0x2768	; 0x2768 <call_status>
    2dfa:	86 30       	cpi	r24, 0x06	; 6
    2dfc:	c1 f3       	breq	.-16     	; 0x2dee <call_to+0x134>
    2dfe:	d1 cf       	rjmp	.-94     	; 0x2da2 <call_to+0xe8>
            delay_ms(500);
    2e00:	84 ef       	ldi	r24, 0xF4	; 244
    2e02:	91 e0       	ldi	r25, 0x01	; 1
    2e04:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
            play_amr(file_amr, '0');
    2e08:	60 e3       	ldi	r22, 0x30	; 48
    2e0a:	8b 2d       	mov	r24, r11
    2e0c:	9e 2d       	mov	r25, r14
    2e0e:	0e 94 7d 13 	call	0x26fa	; 0x26fa <play_amr>
            delay_ms(3000);
    2e12:	88 eb       	ldi	r24, 0xB8	; 184
    2e14:	9b e0       	ldi	r25, 0x0B	; 11
    2e16:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
            play_amr(file_amr, '0');
    2e1a:	60 e3       	ldi	r22, 0x30	; 48
    2e1c:	8b 2d       	mov	r24, r11
    2e1e:	9e 2d       	mov	r25, r14
    2e20:	0e 94 7d 13 	call	0x26fa	; 0x26fa <play_amr>
            delay_ms(3000);
    2e24:	88 eb       	ldi	r24, 0xB8	; 184
    2e26:	9b e0       	ldi	r25, 0x0B	; 11
    2e28:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
            time_stamp_s = get_time_s() + 40;
    2e2c:	0e 94 29 2c 	call	0x5852	; 0x5852 <get_time_s>
    2e30:	69 83       	std	Y+1, r22	; 0x01
    2e32:	7a 83       	std	Y+2, r23	; 0x02
    2e34:	8b 83       	std	Y+3, r24	; 0x03
    2e36:	9c 83       	std	Y+4, r25	; 0x04
    2e38:	6b 01       	movw	r12, r22
    2e3a:	7c 01       	movw	r14, r24
    2e3c:	a8 e2       	ldi	r26, 0x28	; 40
    2e3e:	ca 0e       	add	r12, r26
    2e40:	d1 1c       	adc	r13, r1
    2e42:	e1 1c       	adc	r14, r1
    2e44:	f1 1c       	adc	r15, r1
            while((call_status()==GSM_CALL_ACTIVE) && (get_time_s() < time_stamp_s))        // Цикл выполняется пока установлено активное голосовое соединение ...
    2e46:	04 c0       	rjmp	.+8      	; 0x2e50 <call_to+0x196>
                delay_ms(2000);
    2e48:	80 ed       	ldi	r24, 0xD0	; 208
    2e4a:	97 e0       	ldi	r25, 0x07	; 7
    2e4c:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
            while((call_status()==GSM_CALL_ACTIVE) && (get_time_s() < time_stamp_s))        // Цикл выполняется пока установлено активное голосовое соединение ...
    2e50:	0e 94 b4 13 	call	0x2768	; 0x2768 <call_status>
    2e54:	82 30       	cpi	r24, 0x02	; 2
    2e56:	59 f4       	brne	.+22     	; 0x2e6e <call_to+0x1b4>
    2e58:	0e 94 29 2c 	call	0x5852	; 0x5852 <get_time_s>
    2e5c:	69 83       	std	Y+1, r22	; 0x01
    2e5e:	7a 83       	std	Y+2, r23	; 0x02
    2e60:	8b 83       	std	Y+3, r24	; 0x03
    2e62:	9c 83       	std	Y+4, r25	; 0x04
    2e64:	6c 15       	cp	r22, r12
    2e66:	7d 05       	cpc	r23, r13
    2e68:	8e 05       	cpc	r24, r14
    2e6a:	9f 05       	cpc	r25, r15
    2e6c:	68 f3       	brcs	.-38     	; 0x2e48 <call_to+0x18e>
            hang_up_call();
    2e6e:	0e 94 1c 13 	call	0x2638	; 0x2638 <hang_up_call>
            return 1;
    2e72:	81 e0       	ldi	r24, 0x01	; 1
    2e74:	72 cf       	rjmp	.-284    	; 0x2d5a <call_to+0xa0>
                    send_sms_p(PSTR("ALARM! Motion! Front"), phone);
    2e76:	6d 81       	ldd	r22, Y+5	; 0x05
    2e78:	7f 2d       	mov	r23, r15
    2e7a:	8e ed       	ldi	r24, 0xDE	; 222
    2e7c:	93 e0       	ldi	r25, 0x03	; 3
    2e7e:	0e 94 d5 15 	call	0x2baa	; 0x2baa <send_sms_p>
    2e82:	b1 cf       	rjmp	.-158    	; 0x2de6 <call_to+0x12c>
                    send_sms_p(PSTR("ALARM! Invasion! Garden"), phone);
    2e84:	6d 81       	ldd	r22, Y+5	; 0x05
    2e86:	7f 2d       	mov	r23, r15
    2e88:	86 ec       	ldi	r24, 0xC6	; 198
    2e8a:	93 e0       	ldi	r25, 0x03	; 3
    2e8c:	0e 94 d5 15 	call	0x2baa	; 0x2baa <send_sms_p>
    2e90:	aa cf       	rjmp	.-172    	; 0x2de6 <call_to+0x12c>
                    send_sms_p(PSTR("ALARM! Motion! Cookroom"), phone);
    2e92:	6d 81       	ldd	r22, Y+5	; 0x05
    2e94:	7f 2d       	mov	r23, r15
    2e96:	8e ea       	ldi	r24, 0xAE	; 174
    2e98:	93 e0       	ldi	r25, 0x03	; 3
    2e9a:	0e 94 d5 15 	call	0x2baa	; 0x2baa <send_sms_p>
    2e9e:	a3 cf       	rjmp	.-186    	; 0x2de6 <call_to+0x12c>
                    send_sms_p(PSTR("Alarm! SMOKE!!!"), phone);;
    2ea0:	6d 81       	ldd	r22, Y+5	; 0x05
    2ea2:	7f 2d       	mov	r23, r15
    2ea4:	8e e9       	ldi	r24, 0x9E	; 158
    2ea6:	93 e0       	ldi	r25, 0x03	; 3
    2ea8:	0e 94 d5 15 	call	0x2baa	; 0x2baa <send_sms_p>
    2eac:	9c cf       	rjmp	.-200    	; 0x2de6 <call_to+0x12c>
                    send_sms_p(PSTR("Alarm! TEMPERATURE!!!"), phone);
    2eae:	6d 81       	ldd	r22, Y+5	; 0x05
    2eb0:	7f 2d       	mov	r23, r15
    2eb2:	88 e8       	ldi	r24, 0x88	; 136
    2eb4:	93 e0       	ldi	r25, 0x03	; 3
    2eb6:	0e 94 d5 15 	call	0x2baa	; 0x2baa <send_sms_p>
    2eba:	95 cf       	rjmp	.-214    	; 0x2de6 <call_to+0x12c>
                    send_sms_p(PSTR("Alarm! Internal TEMPERATURE > 65C !!!"), phone);
    2ebc:	6d 81       	ldd	r22, Y+5	; 0x05
    2ebe:	7f 2d       	mov	r23, r15
    2ec0:	82 e6       	ldi	r24, 0x62	; 98
    2ec2:	93 e0       	ldi	r25, 0x03	; 3
    2ec4:	0e 94 d5 15 	call	0x2baa	; 0x2baa <send_sms_p>
    2ec8:	8e cf       	rjmp	.-228    	; 0x2de6 <call_to+0x12c>
                    send_sms_p(PSTR("Alarm! COURTYARD!"), phone);
    2eca:	6d 81       	ldd	r22, Y+5	; 0x05
    2ecc:	7f 2d       	mov	r23, r15
    2ece:	80 e5       	ldi	r24, 0x50	; 80
    2ed0:	93 e0       	ldi	r25, 0x03	; 3
    2ed2:	0e 94 d5 15 	call	0x2baa	; 0x2baa <send_sms_p>
    2ed6:	87 cf       	rjmp	.-242    	; 0x2de6 <call_to+0x12c>

00002ed8 <alarm_play_file>:
{
    2ed8:	1f 93       	push	r17
    2eda:	cf 93       	push	r28
    2edc:	df 93       	push	r29
    2ede:	d8 2f       	mov	r29, r24
    2ee0:	19 2f       	mov	r17, r25
    if(deposit < 1)
    2ee2:	80 91 d0 03 	lds	r24, 0x03D0	; 0x8003d0 <deposit>
    2ee6:	90 91 d1 03 	lds	r25, 0x03D1	; 0x8003d1 <deposit+0x1>
    2eea:	18 16       	cp	r1, r24
    2eec:	19 06       	cpc	r1, r25
    2eee:	84 f5       	brge	.+96     	; 0x2f50 <alarm_play_file+0x78>
    flag_busy_mdm = 1;
    2ef0:	81 e0       	ldi	r24, 0x01	; 1
    2ef2:	80 93 cc 03 	sts	0x03CC, r24	; 0x8003cc <flag_busy_mdm>
    delay_ms(100);
    2ef6:	84 e6       	ldi	r24, 0x64	; 100
    2ef8:	90 e0       	ldi	r25, 0x00	; 0
    2efa:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
    uint8_t i = 0;
    2efe:	c0 e0       	ldi	r28, 0x00	; 0
    while(get_phones(i)[0]=='+' && i<TOTAL_ADMIN_NUMBER)
    2f00:	0c c0       	rjmp	.+24     	; 0x2f1a <alarm_play_file+0x42>
        call_to(&get_phones(i)[0], file);
    2f02:	8c 2f       	mov	r24, r28
    2f04:	0e 94 ae 10 	call	0x215c	; 0x215c <get_phones>
    2f08:	6d 2f       	mov	r22, r29
    2f0a:	71 2f       	mov	r23, r17
    2f0c:	0e 94 5d 16 	call	0x2cba	; 0x2cba <call_to>
        if(stop_next_calls == 1)
    2f10:	80 91 cf 03 	lds	r24, 0x03CF	; 0x8003cf <stop_next_calls>
    2f14:	81 30       	cpi	r24, 0x01	; 1
    2f16:	89 f0       	breq	.+34     	; 0x2f3a <alarm_play_file+0x62>
        i++;
    2f18:	cf 5f       	subi	r28, 0xFF	; 255
    while(get_phones(i)[0]=='+' && i<TOTAL_ADMIN_NUMBER)
    2f1a:	8c 2f       	mov	r24, r28
    2f1c:	0e 94 ae 10 	call	0x215c	; 0x215c <get_phones>
    2f20:	fc 01       	movw	r30, r24
    2f22:	20 81       	ld	r18, Z
    2f24:	2b 32       	cpi	r18, 0x2B	; 43
    2f26:	49 f4       	brne	.+18     	; 0x2f3a <alarm_play_file+0x62>
    2f28:	c5 30       	cpi	r28, 0x05	; 5
    2f2a:	39 f0       	breq	.+14     	; 0x2f3a <alarm_play_file+0x62>
        if(i != 0)
    2f2c:	cc 23       	and	r28, r28
    2f2e:	49 f3       	breq	.-46     	; 0x2f02 <alarm_play_file+0x2a>
            delay_ms(1000);
    2f30:	88 ee       	ldi	r24, 0xE8	; 232
    2f32:	93 e0       	ldi	r25, 0x03	; 3
    2f34:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
    2f38:	e4 cf       	rjmp	.-56     	; 0x2f02 <alarm_play_file+0x2a>
    flag_busy_mdm = 0;
    2f3a:	10 92 cc 03 	sts	0x03CC, r1	; 0x8003cc <flag_busy_mdm>
    delay_ms(100);
    2f3e:	84 e6       	ldi	r24, 0x64	; 100
    2f40:	90 e0       	ldi	r25, 0x00	; 0
    2f42:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
    stop_next_calls = 0;
    2f46:	10 92 cf 03 	sts	0x03CF, r1	; 0x8003cf <stop_next_calls>
    set_flag_alarm(0);
    2f4a:	80 e0       	ldi	r24, 0x00	; 0
    2f4c:	0e 94 95 0a 	call	0x152a	; 0x152a <set_flag_alarm>
}
    2f50:	df 91       	pop	r29
    2f52:	cf 91       	pop	r28
    2f54:	1f 91       	pop	r17
    2f56:	08 95       	ret

00002f58 <send_sms_admins>:
{
    2f58:	1f 93       	push	r17
    2f5a:	cf 93       	push	r28
    2f5c:	df 93       	push	r29
    2f5e:	d8 2f       	mov	r29, r24
    2f60:	19 2f       	mov	r17, r25
    if(deposit < 1)
    2f62:	80 91 d0 03 	lds	r24, 0x03D0	; 0x8003d0 <deposit>
    2f66:	90 91 d1 03 	lds	r25, 0x03D1	; 0x8003d1 <deposit+0x1>
    2f6a:	18 16       	cp	r1, r24
    2f6c:	19 06       	cpc	r1, r25
    2f6e:	4c f5       	brge	.+82     	; 0x2fc2 <send_sms_admins+0x6a>
    flag_busy_mdm = 1;
    2f70:	81 e0       	ldi	r24, 0x01	; 1
    2f72:	80 93 cc 03 	sts	0x03CC, r24	; 0x8003cc <flag_busy_mdm>
    delay_ms(100);
    2f76:	84 e6       	ldi	r24, 0x64	; 100
    2f78:	90 e0       	ldi	r25, 0x00	; 0
    2f7a:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
    uint8_t i = 0;
    2f7e:	c0 e0       	ldi	r28, 0x00	; 0
    while(get_phones(i)[0]=='+' && i<TOTAL_ADMIN_NUMBER)
    2f80:	0a c0       	rjmp	.+20     	; 0x2f96 <send_sms_admins+0x3e>
        send_sms_p(_msg, &get_phones(i)[0]);
    2f82:	8c 2f       	mov	r24, r28
    2f84:	0e 94 ae 10 	call	0x215c	; 0x215c <get_phones>
    2f88:	68 2f       	mov	r22, r24
    2f8a:	79 2f       	mov	r23, r25
    2f8c:	8d 2f       	mov	r24, r29
    2f8e:	91 2f       	mov	r25, r17
    2f90:	0e 94 d5 15 	call	0x2baa	; 0x2baa <send_sms_p>
        i++;
    2f94:	cf 5f       	subi	r28, 0xFF	; 255
    while(get_phones(i)[0]=='+' && i<TOTAL_ADMIN_NUMBER)
    2f96:	8c 2f       	mov	r24, r28
    2f98:	0e 94 ae 10 	call	0x215c	; 0x215c <get_phones>
    2f9c:	fc 01       	movw	r30, r24
    2f9e:	20 81       	ld	r18, Z
    2fa0:	2b 32       	cpi	r18, 0x2B	; 43
    2fa2:	49 f4       	brne	.+18     	; 0x2fb6 <send_sms_admins+0x5e>
    2fa4:	c5 30       	cpi	r28, 0x05	; 5
    2fa6:	39 f0       	breq	.+14     	; 0x2fb6 <send_sms_admins+0x5e>
        if(i != 0)
    2fa8:	cc 23       	and	r28, r28
    2faa:	59 f3       	breq	.-42     	; 0x2f82 <send_sms_admins+0x2a>
            delay_ms(1000);
    2fac:	88 ee       	ldi	r24, 0xE8	; 232
    2fae:	93 e0       	ldi	r25, 0x03	; 3
    2fb0:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
    2fb4:	e6 cf       	rjmp	.-52     	; 0x2f82 <send_sms_admins+0x2a>
    flag_busy_mdm = 0;
    2fb6:	10 92 cc 03 	sts	0x03CC, r1	; 0x8003cc <flag_busy_mdm>
    delay_ms(100);
    2fba:	84 e6       	ldi	r24, 0x64	; 100
    2fbc:	90 e0       	ldi	r25, 0x00	; 0
    2fbe:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
}
    2fc2:	df 91       	pop	r29
    2fc4:	cf 91       	pop	r28
    2fc6:	1f 91       	pop	r17
    2fc8:	08 95       	ret

00002fca <check_phone_string>:
{
    2fca:	e8 2f       	mov	r30, r24
    2fcc:	f9 2f       	mov	r31, r25
    if(*ptr++ != '+')
    2fce:	80 81       	ld	r24, Z
    2fd0:	8b 32       	cpi	r24, 0x2B	; 43
    2fd2:	a9 f4       	brne	.+42     	; 0x2ffe <check_phone_string+0x34>
    2fd4:	9f 01       	movw	r18, r30
    2fd6:	2f 5f       	subi	r18, 0xFF	; 255
    2fd8:	3f 4f       	sbci	r19, 0xFF	; 255
    for(i=0; i<12; i++)
    2fda:	af 01       	movw	r20, r30
    2fdc:	43 5f       	subi	r20, 0xF3	; 243
    2fde:	5f 4f       	sbci	r21, 0xFF	; 255
        if(!isdigit(*ptr++))
    2fe0:	f9 01       	movw	r30, r18
    2fe2:	80 81       	ld	r24, Z
    2fe4:	2f 5f       	subi	r18, 0xFF	; 255
    2fe6:	3f 4f       	sbci	r19, 0xFF	; 255
    2fe8:	08 2e       	mov	r0, r24
    2fea:	00 0c       	add	r0, r0
    2fec:	99 0b       	sbc	r25, r25
    2fee:	c0 97       	sbiw	r24, 0x30	; 48
    2ff0:	0a 97       	sbiw	r24, 0x0a	; 10
    2ff2:	38 f4       	brcc	.+14     	; 0x3002 <check_phone_string+0x38>
    for(i=0; i<12; i++)
    2ff4:	24 17       	cp	r18, r20
    2ff6:	35 07       	cpc	r19, r21
    2ff8:	99 f7       	brne	.-26     	; 0x2fe0 <check_phone_string+0x16>
    return TRUE;
    2ffa:	81 e0       	ldi	r24, 0x01	; 1
    2ffc:	08 95       	ret
        return FALSE;
    2ffe:	80 e0       	ldi	r24, 0x00	; 0
    3000:	08 95       	ret
            return FALSE;
    3002:	80 e0       	ldi	r24, 0x00	; 0
}
    3004:	08 95       	ret

00003006 <delete_all_sms>:
{
    3006:	cf 93       	push	r28
    flag_busy_mdm = BUSY_MODEM;
    3008:	81 e0       	ldi	r24, 0x01	; 1
    300a:	80 93 cc 03 	sts	0x03CC, r24	; 0x8003cc <flag_busy_mdm>
    delay_ms(100);
    300e:	84 e6       	ldi	r24, 0x64	; 100
    3010:	90 e0       	ldi	r25, 0x00	; 0
    3012:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
    delay_ms(100);
    3016:	84 e6       	ldi	r24, 0x64	; 100
    3018:	90 e0       	ldi	r25, 0x00	; 0
    301a:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
    uart_flush();
    301e:	0e 94 ac 2e 	call	0x5d58	; 0x5d58 <uart_flush>
    uart_send_str_p(PSTR("AT+CMGDA=\"DEL ALL\"\r\n"));
    3022:	89 e0       	ldi	r24, 0x09	; 9
    3024:	92 e0       	ldi	r25, 0x02	; 2
    3026:	0e 94 94 2e 	call	0x5d28	; 0x5d28 <uart_send_str_p>
    rez = mdm_wait_cmd_ms(25000, (const char*)RESPON_OK);
    302a:	64 ec       	ldi	r22, 0xC4	; 196
    302c:	72 e0       	ldi	r23, 0x02	; 2
    302e:	88 ea       	ldi	r24, 0xA8	; 168
    3030:	91 e6       	ldi	r25, 0x61	; 97
    3032:	0e 94 cd 12 	call	0x259a	; 0x259a <mdm_wait_cmd_ms>
    3036:	c8 2f       	mov	r28, r24
    flag_busy_mdm = FREE_MODEM;
    3038:	10 92 cc 03 	sts	0x03CC, r1	; 0x8003cc <flag_busy_mdm>
    delay_ms(100);
    303c:	84 e6       	ldi	r24, 0x64	; 100
    303e:	90 e0       	ldi	r25, 0x00	; 0
    3040:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
}
    3044:	8c 2f       	mov	r24, r28
    3046:	cf 91       	pop	r28
    3048:	08 95       	ret

0000304a <get_sms>:
{
    304a:	8f 92       	push	r8
    304c:	9f 92       	push	r9
    304e:	af 92       	push	r10
    3050:	bf 92       	push	r11
    3052:	cf 92       	push	r12
    3054:	df 92       	push	r13
    3056:	ef 92       	push	r14
    3058:	ff 92       	push	r15
    305a:	0f 93       	push	r16
    305c:	1f 93       	push	r17
    305e:	cf 93       	push	r28
    3060:	df 93       	push	r29
    3062:	00 d0       	rcall	.+0      	; 0x3064 <get_sms+0x1a>
    3064:	00 d0       	rcall	.+0      	; 0x3066 <get_sms+0x1c>
    3066:	0f 92       	push	r0
    3068:	cd b7       	in	r28, 0x3d	; 61
    306a:	de b7       	in	r29, 0x3e	; 62
    if(unread_sms == 0)
    306c:	f0 90 e0 03 	lds	r15, 0x03E0	; 0x8003e0 <unread_sms>
    3070:	f1 10       	cpse	r15, r1
    3072:	13 c0       	rjmp	.+38     	; 0x309a <get_sms+0x50>
}
    3074:	8f 2d       	mov	r24, r15
    3076:	0f 90       	pop	r0
    3078:	0f 90       	pop	r0
    307a:	0f 90       	pop	r0
    307c:	0f 90       	pop	r0
    307e:	0f 90       	pop	r0
    3080:	df 91       	pop	r29
    3082:	cf 91       	pop	r28
    3084:	1f 91       	pop	r17
    3086:	0f 91       	pop	r16
    3088:	ff 90       	pop	r15
    308a:	ef 90       	pop	r14
    308c:	df 90       	pop	r13
    308e:	cf 90       	pop	r12
    3090:	bf 90       	pop	r11
    3092:	af 90       	pop	r10
    3094:	9f 90       	pop	r9
    3096:	8f 90       	pop	r8
    3098:	08 95       	ret
    flag_busy_mdm = 1;
    309a:	81 e0       	ldi	r24, 0x01	; 1
    309c:	80 93 cc 03 	sts	0x03CC, r24	; 0x8003cc <flag_busy_mdm>
    delay_ms(100);
    30a0:	84 e6       	ldi	r24, 0x64	; 100
    30a2:	90 e0       	ldi	r25, 0x00	; 0
    30a4:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
    uart_flush();
    30a8:	0e 94 ac 2e 	call	0x5d58	; 0x5d58 <uart_flush>
    uart_send_str_p(PSTR("AT+CMGL=\"REC UNREAD\"\r\n")); // запрашиваем список всех СМСок
    30ac:	8b e2       	ldi	r24, 0x2B	; 43
    30ae:	92 e0       	ldi	r25, 0x02	; 2
    30b0:	0e 94 94 2e 	call	0x5d28	; 0x5d28 <uart_send_str_p>
        rez = mdm_wait_cmd_ms(5000, (const char*)RESPON_OK_CMGL);
    30b4:	6e ec       	ldi	r22, 0xCE	; 206
    30b6:	72 e0       	ldi	r23, 0x02	; 2
    30b8:	88 e8       	ldi	r24, 0x88	; 136
    30ba:	93 e1       	ldi	r25, 0x13	; 19
    30bc:	0e 94 cd 12 	call	0x259a	; 0x259a <mdm_wait_cmd_ms>
    30c0:	f8 2e       	mov	r15, r24
        if(rez==1)
    30c2:	81 e0       	ldi	r24, 0x01	; 1
    30c4:	f8 12       	cpse	r15, r24
    30c6:	d7 c0       	rjmp	.+430    	; 0x3276 <get_sms+0x22c>
            ptr = strchr(mdm_data, ':');
    30c8:	6a e3       	ldi	r22, 0x3A	; 58
    30ca:	70 e0       	ldi	r23, 0x00	; 0
    30cc:	80 ef       	ldi	r24, 0xF0	; 240
    30ce:	93 e0       	ldi	r25, 0x03	; 3
    30d0:	0e 94 ef 33 	call	0x67de	; 0x67de <strchr>
    30d4:	48 2f       	mov	r20, r24
    30d6:	59 2f       	mov	r21, r25
            if(ptr)
    30d8:	41 15       	cp	r20, r1
    30da:	51 05       	cpc	r21, r1
    30dc:	59 f3       	breq	.-42     	; 0x30b4 <get_sms+0x6a>
                for(i=0; i<5; i++)
    30de:	4f 5f       	subi	r20, 0xFF	; 255
    30e0:	5f 4f       	sbci	r21, 0xFF	; 255
    30e2:	90 e0       	ldi	r25, 0x00	; 0
                    if(isdigit(*++ptr))
    30e4:	8a 01       	movw	r16, r20
    30e6:	4f 5f       	subi	r20, 0xFF	; 255
    30e8:	5f 4f       	sbci	r21, 0xFF	; 255
    30ea:	d8 01       	movw	r26, r16
    30ec:	2c 91       	ld	r18, X
    30ee:	02 2e       	mov	r0, r18
    30f0:	00 0c       	add	r0, r0
    30f2:	33 0b       	sbc	r19, r19
    30f4:	20 53       	subi	r18, 0x30	; 48
    30f6:	31 09       	sbc	r19, r1
    30f8:	2a 30       	cpi	r18, 0x0A	; 10
    30fa:	31 05       	cpc	r19, r1
    30fc:	20 f0       	brcs	.+8      	; 0x3106 <get_sms+0xbc>
                for(i=0; i<5; i++)
    30fe:	9f 5f       	subi	r25, 0xFF	; 255
    3100:	95 30       	cpi	r25, 0x05	; 5
    3102:	81 f7       	brne	.-32     	; 0x30e4 <get_sms+0x9a>
    3104:	d7 cf       	rjmp	.-82     	; 0x30b4 <get_sms+0x6a>
                if(i==5)
    3106:	95 30       	cpi	r25, 0x05	; 5
    3108:	a9 f2       	breq	.-86     	; 0x30b4 <get_sms+0x6a>
                index = strtoul(ptr, 0, 10);
    310a:	4a e0       	ldi	r20, 0x0A	; 10
    310c:	50 e0       	ldi	r21, 0x00	; 0
    310e:	70 e0       	ldi	r23, 0x00	; 0
    3110:	60 e0       	ldi	r22, 0x00	; 0
    3112:	c8 01       	movw	r24, r16
    3114:	0e 94 20 32 	call	0x6440	; 0x6440 <strtoul>
    3118:	86 2e       	mov	r8, r22
    311a:	97 2e       	mov	r9, r23
    311c:	a8 2e       	mov	r10, r24
    311e:	b9 2e       	mov	r11, r25
                if(index>0xFFFF)
    3120:	81 14       	cp	r8, r1
    3122:	91 04       	cpc	r9, r1
    3124:	b1 e0       	ldi	r27, 0x01	; 1
    3126:	ab 06       	cpc	r10, r27
    3128:	b1 04       	cpc	r11, r1
    312a:	20 f6       	brcc	.-120    	; 0x30b4 <get_sms+0x6a>
            ptr = strchr(ptr, ','); // ищем первую запятую в строке
    312c:	6c e2       	ldi	r22, 0x2C	; 44
    312e:	70 e0       	ldi	r23, 0x00	; 0
    3130:	c8 01       	movw	r24, r16
    3132:	0e 94 ef 33 	call	0x67de	; 0x67de <strchr>
    3136:	28 2f       	mov	r18, r24
    3138:	39 2f       	mov	r19, r25
            if(ptr)
    313a:	21 15       	cp	r18, r1
    313c:	31 05       	cpc	r19, r1
    313e:	09 f4       	brne	.+2      	; 0x3142 <get_sms+0xf8>
    3140:	b9 cf       	rjmp	.-142    	; 0x30b4 <get_sms+0x6a>
                ptr = strchr(ptr, ','); // ищем вторую запятую в строке
    3142:	6c e2       	ldi	r22, 0x2C	; 44
    3144:	70 e0       	ldi	r23, 0x00	; 0
    3146:	c9 01       	movw	r24, r18
    3148:	0e 94 ef 33 	call	0x67de	; 0x67de <strchr>
    314c:	28 2f       	mov	r18, r24
    314e:	39 2f       	mov	r19, r25
                if(ptr)
    3150:	21 15       	cp	r18, r1
    3152:	31 05       	cpc	r19, r1
    3154:	09 f4       	brne	.+2      	; 0x3158 <get_sms+0x10e>
    3156:	ae cf       	rjmp	.-164    	; 0x30b4 <get_sms+0x6a>
                    ptr = strchr(ptr, '+');
    3158:	6b e2       	ldi	r22, 0x2B	; 43
    315a:	70 e0       	ldi	r23, 0x00	; 0
    315c:	c9 01       	movw	r24, r18
    315e:	0e 94 ef 33 	call	0x67de	; 0x67de <strchr>
    3162:	08 2f       	mov	r16, r24
    3164:	19 2f       	mov	r17, r25
                    if(ptr)
    3166:	01 15       	cp	r16, r1
    3168:	11 05       	cpc	r17, r1
    316a:	81 f0       	breq	.+32     	; 0x318c <get_sms+0x142>
                        if(check_phone_string(ptr))
    316c:	c8 01       	movw	r24, r16
    316e:	0e 94 e5 17 	call	0x2fca	; 0x2fca <check_phone_string>
    3172:	88 23       	and	r24, r24
    3174:	09 f4       	brne	.+2      	; 0x3178 <get_sms+0x12e>
    3176:	9e cf       	rjmp	.-196    	; 0x30b4 <get_sms+0x6a>
                            memcpy(rec_phone_number, ptr, 13);
    3178:	8d e0       	ldi	r24, 0x0D	; 13
    317a:	f8 01       	movw	r30, r16
    317c:	a2 ee       	ldi	r26, 0xE2	; 226
    317e:	b3 e0       	ldi	r27, 0x03	; 3
    3180:	01 90       	ld	r0, Z+
    3182:	0d 92       	st	X+, r0
    3184:	8a 95       	dec	r24
    3186:	e1 f7       	brne	.-8      	; 0x3180 <get_sms+0x136>
                            rec_phone_number[13] = 0;
    3188:	10 92 ef 03 	sts	0x03EF, r1	; 0x8003ef <rec_phone_number+0xd>
            rez = mdm_wait_str(5000);
    318c:	88 e8       	ldi	r24, 0x88	; 136
    318e:	93 e1       	ldi	r25, 0x13	; 19
    3190:	0e 94 46 13 	call	0x268c	; 0x268c <mdm_wait_str>
    3194:	18 2f       	mov	r17, r24
            if(rez==1)
    3196:	81 30       	cpi	r24, 0x01	; 1
    3198:	59 f0       	breq	.+22     	; 0x31b0 <get_sms+0x166>
                delete_all_sms();
    319a:	0e 94 03 18 	call	0x3006	; 0x3006 <delete_all_sms>
                unread_sms = 0;
    319e:	10 92 e0 03 	sts	0x03E0, r1	; 0x8003e0 <unread_sms>
                flag_busy_mdm = 0;
    31a2:	10 92 cc 03 	sts	0x03CC, r1	; 0x8003cc <flag_busy_mdm>
                delay_ms(100);
    31a6:	84 e6       	ldi	r24, 0x64	; 100
    31a8:	90 e0       	ldi	r25, 0x00	; 0
    31aa:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
                return 1;
    31ae:	62 cf       	rjmp	.-316    	; 0x3074 <get_sms+0x2a>
    uint32_t time_stamp = get_time_ms() + time_to_wait_ms;
    31b0:	0e 94 09 2c 	call	0x5812	; 0x5812 <get_time_ms>
    31b4:	6b 01       	movw	r12, r22
    31b6:	7c 01       	movw	r14, r24
    31b8:	e8 ee       	ldi	r30, 0xE8	; 232
    31ba:	ce 0e       	add	r12, r30
    31bc:	e3 e0       	ldi	r30, 0x03	; 3
    31be:	de 1e       	adc	r13, r30
    31c0:	e1 1c       	adc	r14, r1
    31c2:	f1 1c       	adc	r15, r1
        if(get_time_ms() < time_stamp) // интервал после последнего принятого байта
    31c4:	0e 94 09 2c 	call	0x5812	; 0x5812 <get_time_ms>
    31c8:	6a 83       	std	Y+2, r22	; 0x02
    31ca:	7b 83       	std	Y+3, r23	; 0x03
    31cc:	8c 83       	std	Y+4, r24	; 0x04
    31ce:	9d 83       	std	Y+5, r25	; 0x05
    31d0:	6c 15       	cp	r22, r12
    31d2:	7d 05       	cpc	r23, r13
    31d4:	8e 05       	cpc	r24, r14
    31d6:	9f 05       	cpc	r25, r15
    31d8:	a0 f0       	brcs	.+40     	; 0x3202 <get_sms+0x1b8>
        if(is_queue_not_empty())
    31da:	0e 94 51 2e 	call	0x5ca2	; 0x5ca2 <is_queue_not_empty>
    31de:	88 23       	and	r24, r24
    31e0:	89 f3       	breq	.-30     	; 0x31c4 <get_sms+0x17a>
            dummy = get_byte_from_queue();
    31e2:	0e 94 46 2e 	call	0x5c8c	; 0x5c8c <get_byte_from_queue>
    31e6:	89 83       	std	Y+1, r24	; 0x01
            dummy = dummy;
    31e8:	89 81       	ldd	r24, Y+1	; 0x01
    31ea:	89 83       	std	Y+1, r24	; 0x01
            time_stamp = get_time_ms() + time_to_wait_ms;
    31ec:	0e 94 09 2c 	call	0x5812	; 0x5812 <get_time_ms>
    31f0:	6b 01       	movw	r12, r22
    31f2:	7c 01       	movw	r14, r24
    31f4:	f8 ee       	ldi	r31, 0xE8	; 232
    31f6:	cf 0e       	add	r12, r31
    31f8:	f3 e0       	ldi	r31, 0x03	; 3
    31fa:	df 1e       	adc	r13, r31
    31fc:	e1 1c       	adc	r14, r1
    31fe:	f1 1c       	adc	r15, r1
    3200:	e1 cf       	rjmp	.-62     	; 0x31c4 <get_sms+0x17a>
                process_sms_body(mdm_data);
    3202:	80 ef       	ldi	r24, 0xF0	; 240
    3204:	93 e0       	ldi	r25, 0x03	; 3
    3206:	0e 94 0f 22 	call	0x441e	; 0x441e <process_sms_body>
    320a:	03 e0       	ldi	r16, 0x03	; 3
                    sprintf_P(mdm_data, PSTR("AT+CMGD=%d\r\n"), (uint16_t)index); // удаляем обработанную СМСку
    320c:	0f 2e       	mov	r0, r31
    320e:	fe e1       	ldi	r31, 0x1E	; 30
    3210:	cf 2e       	mov	r12, r31
    3212:	f2 e0       	ldi	r31, 0x02	; 2
    3214:	df 2e       	mov	r13, r31
    3216:	f0 2d       	mov	r31, r0
    3218:	0f 2e       	mov	r0, r31
    321a:	f0 ef       	ldi	r31, 0xF0	; 240
    321c:	ef 2e       	mov	r14, r31
    321e:	f3 e0       	ldi	r31, 0x03	; 3
    3220:	ff 2e       	mov	r15, r31
    3222:	f0 2d       	mov	r31, r0
                    delay_ms(100);
    3224:	84 e6       	ldi	r24, 0x64	; 100
    3226:	90 e0       	ldi	r25, 0x00	; 0
    3228:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
                    sprintf_P(mdm_data, PSTR("AT+CMGD=%d\r\n"), (uint16_t)index); // удаляем обработанную СМСку
    322c:	9f 92       	push	r9
    322e:	8f 92       	push	r8
    3230:	df 92       	push	r13
    3232:	cf 92       	push	r12
    3234:	ff 92       	push	r15
    3236:	ef 92       	push	r14
    3238:	0e 94 68 34 	call	0x68d0	; 0x68d0 <sprintf_P>
                    uart_flush();
    323c:	0e 94 ac 2e 	call	0x5d58	; 0x5d58 <uart_flush>
                    uart_send_str(mdm_data);
    3240:	c7 01       	movw	r24, r14
    3242:	0e 94 76 2e 	call	0x5cec	; 0x5cec <uart_send_str>
                    rez = mdm_wait_cmd_ms(10000, (const char*)RESPON_OK);
    3246:	64 ec       	ldi	r22, 0xC4	; 196
    3248:	72 e0       	ldi	r23, 0x02	; 2
    324a:	80 e1       	ldi	r24, 0x10	; 16
    324c:	97 e2       	ldi	r25, 0x27	; 39
    324e:	0e 94 cd 12 	call	0x259a	; 0x259a <mdm_wait_cmd_ms>
                    if(rez == TRUE)
    3252:	0f 90       	pop	r0
    3254:	0f 90       	pop	r0
    3256:	0f 90       	pop	r0
    3258:	0f 90       	pop	r0
    325a:	0f 90       	pop	r0
    325c:	0f 90       	pop	r0
    325e:	81 30       	cpi	r24, 0x01	; 1
    3260:	11 f0       	breq	.+4      	; 0x3266 <get_sms+0x21c>
                for(i=0; i<3; i++)
    3262:	01 50       	subi	r16, 0x01	; 1
    3264:	f9 f6       	brne	.-66     	; 0x3224 <get_sms+0x1da>
                flag_busy_mdm = 0;
    3266:	10 92 cc 03 	sts	0x03CC, r1	; 0x8003cc <flag_busy_mdm>
                delay_ms(100);
    326a:	84 e6       	ldi	r24, 0x64	; 100
    326c:	90 e0       	ldi	r25, 0x00	; 0
    326e:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
                return 1;
    3272:	f1 2e       	mov	r15, r17
    3274:	ff ce       	rjmp	.-514    	; 0x3074 <get_sms+0x2a>
            delete_all_sms(); // попытка обойти глюк модема
    3276:	0e 94 03 18 	call	0x3006	; 0x3006 <delete_all_sms>
            unread_sms = 0;
    327a:	10 92 e0 03 	sts	0x03E0, r1	; 0x8003e0 <unread_sms>
            flag_busy_mdm = FREE_MODEM;
    327e:	10 92 cc 03 	sts	0x03CC, r1	; 0x8003cc <flag_busy_mdm>
            delay_ms(100);
    3282:	84 e6       	ldi	r24, 0x64	; 100
    3284:	90 e0       	ldi	r25, 0x00	; 0
    3286:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
            return 0;
    328a:	f1 2c       	mov	r15, r1
    328c:	f3 ce       	rjmp	.-538    	; 0x3074 <get_sms+0x2a>

0000328e <incoming_call_processing>:
{
    328e:	cf 93       	push	r28
    3290:	df 93       	push	r29
    3292:	00 d0       	rcall	.+0      	; 0x3294 <incoming_call_processing+0x6>
    3294:	00 d0       	rcall	.+0      	; 0x3296 <incoming_call_processing+0x8>
    3296:	cd b7       	in	r28, 0x3d	; 61
    3298:	de b7       	in	r29, 0x3e	; 62
    if(incoming_call == 0)
    329a:	80 91 de 03 	lds	r24, 0x03DE	; 0x8003de <incoming_call>
    329e:	81 11       	cpse	r24, r1
    32a0:	07 c0       	rjmp	.+14     	; 0x32b0 <incoming_call_processing+0x22>
}
    32a2:	0f 90       	pop	r0
    32a4:	0f 90       	pop	r0
    32a6:	0f 90       	pop	r0
    32a8:	0f 90       	pop	r0
    32aa:	df 91       	pop	r29
    32ac:	cf 91       	pop	r28
    32ae:	08 95       	ret
    incoming_call = 0;
    32b0:	10 92 de 03 	sts	0x03DE, r1	; 0x8003de <incoming_call>
    flag_busy_mdm = BUSY_MODEM;
    32b4:	81 e0       	ldi	r24, 0x01	; 1
    32b6:	80 93 cc 03 	sts	0x03CC, r24	; 0x8003cc <flag_busy_mdm>
    delay_ms(100);
    32ba:	84 e6       	ldi	r24, 0x64	; 100
    32bc:	90 e0       	ldi	r25, 0x00	; 0
    32be:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
    if(call_from_user)
    32c2:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <call_from_user>
    32c6:	88 23       	and	r24, r24
    32c8:	09 f4       	brne	.+2      	; 0x32cc <incoming_call_processing+0x3e>
    32ca:	52 c0       	rjmp	.+164    	; 0x3370 <incoming_call_processing+0xe2>
        uart_flush();
    32cc:	0e 94 ac 2e 	call	0x5d58	; 0x5d58 <uart_flush>
        uart_send_str_p(PSTR("ATA\r\n"));
    32d0:	83 e0       	ldi	r24, 0x03	; 3
    32d2:	92 e0       	ldi	r25, 0x02	; 2
    32d4:	0e 94 94 2e 	call	0x5d28	; 0x5d28 <uart_send_str_p>
        if(mdm_wait_cmd_ms(2000, (const char*)RESPON_OK) == 0)
    32d8:	64 ec       	ldi	r22, 0xC4	; 196
    32da:	72 e0       	ldi	r23, 0x02	; 2
    32dc:	80 ed       	ldi	r24, 0xD0	; 208
    32de:	97 e0       	ldi	r25, 0x07	; 7
    32e0:	0e 94 cd 12 	call	0x259a	; 0x259a <mdm_wait_cmd_ms>
    32e4:	88 23       	and	r24, r24
    32e6:	09 f4       	brne	.+2      	; 0x32ea <incoming_call_processing+0x5c>
    32e8:	4c c0       	rjmp	.+152    	; 0x3382 <incoming_call_processing+0xf4>
        if(get_guard() == 1)
    32ea:	0e 94 a2 10 	call	0x2144	; 0x2144 <get_guard>
    32ee:	81 30       	cpi	r24, 0x01	; 1
    32f0:	09 f4       	brne	.+2      	; 0x32f4 <incoming_call_processing+0x66>
    32f2:	4e c0       	rjmp	.+156    	; 0x3390 <incoming_call_processing+0x102>
            play_amr(AUDIO_GUARD_OFF, '0');
    32f4:	60 e3       	ldi	r22, 0x30	; 48
    32f6:	84 ea       	ldi	r24, 0xA4	; 164
    32f8:	92 e0       	ldi	r25, 0x02	; 2
    32fa:	0e 94 7d 13 	call	0x26fa	; 0x26fa <play_amr>
        delay_ms(2000);
    32fe:	80 ed       	ldi	r24, 0xD0	; 208
    3300:	97 e0       	ldi	r25, 0x07	; 7
    3302:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
        play_amr(AUDIO_MENU, '0');
    3306:	60 e3       	ldi	r22, 0x30	; 48
    3308:	85 ed       	ldi	r24, 0xD5	; 213
    330a:	92 e0       	ldi	r25, 0x02	; 2
    330c:	0e 94 7d 13 	call	0x26fa	; 0x26fa <play_amr>
        call_from_user = 0;
    3310:	10 92 df 03 	sts	0x03DF, r1	; 0x8003df <call_from_user>
        duration_call_s = get_time_s() + 60;
    3314:	0e 94 29 2c 	call	0x5852	; 0x5852 <get_time_s>
    3318:	dc 01       	movw	r26, r24
    331a:	cb 01       	movw	r24, r22
    331c:	cc 96       	adiw	r24, 0x3c	; 60
    331e:	a1 1d       	adc	r26, r1
    3320:	b1 1d       	adc	r27, r1
    3322:	80 93 b8 03 	sts	0x03B8, r24	; 0x8003b8 <duration_call_s.18>
    3326:	90 93 b9 03 	sts	0x03B9, r25	; 0x8003b9 <duration_call_s.18+0x1>
    332a:	a0 93 ba 03 	sts	0x03BA, r26	; 0x8003ba <duration_call_s.18+0x2>
    332e:	b0 93 bb 03 	sts	0x03BB, r27	; 0x8003bb <duration_call_s.18+0x3>
        while(call_status() == GSM_CALL_ACTIVE)
    3332:	0e 94 b4 13 	call	0x2768	; 0x2768 <call_status>
    3336:	82 30       	cpi	r24, 0x02	; 2
    3338:	d9 f4       	brne	.+54     	; 0x3370 <incoming_call_processing+0xe2>
            delay_ms(3000);
    333a:	88 eb       	ldi	r24, 0xB8	; 184
    333c:	9b e0       	ldi	r25, 0x0B	; 11
    333e:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
            if(get_time_s() > duration_call_s)
    3342:	0e 94 29 2c 	call	0x5852	; 0x5852 <get_time_s>
    3346:	69 83       	std	Y+1, r22	; 0x01
    3348:	7a 83       	std	Y+2, r23	; 0x02
    334a:	8b 83       	std	Y+3, r24	; 0x03
    334c:	9c 83       	std	Y+4, r25	; 0x04
    334e:	80 91 b8 03 	lds	r24, 0x03B8	; 0x8003b8 <duration_call_s.18>
    3352:	90 91 b9 03 	lds	r25, 0x03B9	; 0x8003b9 <duration_call_s.18+0x1>
    3356:	a0 91 ba 03 	lds	r26, 0x03BA	; 0x8003ba <duration_call_s.18+0x2>
    335a:	b0 91 bb 03 	lds	r27, 0x03BB	; 0x8003bb <duration_call_s.18+0x3>
    335e:	29 81       	ldd	r18, Y+1	; 0x01
    3360:	3a 81       	ldd	r19, Y+2	; 0x02
    3362:	4b 81       	ldd	r20, Y+3	; 0x03
    3364:	5c 81       	ldd	r21, Y+4	; 0x04
    3366:	82 17       	cp	r24, r18
    3368:	93 07       	cpc	r25, r19
    336a:	a4 07       	cpc	r26, r20
    336c:	b5 07       	cpc	r27, r21
    336e:	08 f7       	brcc	.-62     	; 0x3332 <incoming_call_processing+0xa4>
    hang_up_call();
    3370:	0e 94 1c 13 	call	0x2638	; 0x2638 <hang_up_call>
    flag_busy_mdm = FREE_MODEM;
    3374:	10 92 cc 03 	sts	0x03CC, r1	; 0x8003cc <flag_busy_mdm>
    delay_ms(100);
    3378:	84 e6       	ldi	r24, 0x64	; 100
    337a:	90 e0       	ldi	r25, 0x00	; 0
    337c:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
    3380:	90 cf       	rjmp	.-224    	; 0x32a2 <incoming_call_processing+0x14>
            flag_busy_mdm = FREE_MODEM;
    3382:	10 92 cc 03 	sts	0x03CC, r1	; 0x8003cc <flag_busy_mdm>
            delay_ms(100);
    3386:	84 e6       	ldi	r24, 0x64	; 100
    3388:	90 e0       	ldi	r25, 0x00	; 0
    338a:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
            return;
    338e:	89 cf       	rjmp	.-238    	; 0x32a2 <incoming_call_processing+0x14>
            play_amr(AUDIO_GUARD_ON, '0');
    3390:	60 e3       	ldi	r22, 0x30	; 48
    3392:	86 e8       	ldi	r24, 0x86	; 134
    3394:	92 e0       	ldi	r25, 0x02	; 2
    3396:	0e 94 7d 13 	call	0x26fa	; 0x26fa <play_amr>
    339a:	b1 cf       	rjmp	.-158    	; 0x32fe <incoming_call_processing+0x70>

0000339c <setup_init>:
{
    339c:	cf 92       	push	r12
    339e:	df 92       	push	r13
    33a0:	ef 92       	push	r14
    33a2:	ff 92       	push	r15
    33a4:	cf 93       	push	r28
    33a6:	df 93       	push	r29
    33a8:	00 d0       	rcall	.+0      	; 0x33aa <setup_init+0xe>
    33aa:	00 d0       	rcall	.+0      	; 0x33ac <setup_init+0x10>
    33ac:	cd b7       	in	r28, 0x3d	; 61
    33ae:	de b7       	in	r29, 0x3e	; 62
    uint32_t time_stamp = get_time_s() + 600; // 600 sec init modem
    33b0:	0e 94 29 2c 	call	0x5852	; 0x5852 <get_time_s>
    33b4:	6b 01       	movw	r12, r22
    33b6:	7c 01       	movw	r14, r24
    33b8:	88 e5       	ldi	r24, 0x58	; 88
    33ba:	c8 0e       	add	r12, r24
    33bc:	82 e0       	ldi	r24, 0x02	; 2
    33be:	d8 1e       	adc	r13, r24
    33c0:	e1 1c       	adc	r14, r1
    33c2:	f1 1c       	adc	r15, r1
    33c4:	0c c0       	rjmp	.+24     	; 0x33de <setup_init+0x42>
            if((get_time_s() > time_stamp))
    33c6:	0e 94 29 2c 	call	0x5852	; 0x5852 <get_time_s>
    33ca:	c6 16       	cp	r12, r22
    33cc:	d7 06       	cpc	r13, r23
    33ce:	e8 06       	cpc	r14, r24
    33d0:	f9 06       	cpc	r15, r25
    33d2:	08 f4       	brcc	.+2      	; 0x33d6 <setup_init+0x3a>
    33d4:	95 c0       	rjmp	.+298    	; 0x3500 <setup_init+0x164>
            delay_ms(1000);
    33d6:	88 ee       	ldi	r24, 0xE8	; 232
    33d8:	93 e0       	ldi	r25, 0x03	; 3
    33da:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
            uart_flush();
    33de:	0e 94 ac 2e 	call	0x5d58	; 0x5d58 <uart_flush>
            uart_send_str_p(PSTR("AT\r\n"));
    33e2:	8e ef       	ldi	r24, 0xFE	; 254
    33e4:	91 e0       	ldi	r25, 0x01	; 1
    33e6:	0e 94 94 2e 	call	0x5d28	; 0x5d28 <uart_send_str_p>
            if ((respons = mdm_wait_cmd_ms(1000, (const char*)RESPON_OK)))
    33ea:	64 ec       	ldi	r22, 0xC4	; 196
    33ec:	72 e0       	ldi	r23, 0x02	; 2
    33ee:	88 ee       	ldi	r24, 0xE8	; 232
    33f0:	93 e0       	ldi	r25, 0x03	; 3
    33f2:	0e 94 cd 12 	call	0x259a	; 0x259a <mdm_wait_cmd_ms>
    33f6:	88 23       	and	r24, r24
    33f8:	31 f3       	breq	.-52     	; 0x33c6 <setup_init+0x2a>
        delay_ms(5000);
    33fa:	88 e8       	ldi	r24, 0x88	; 136
    33fc:	93 e1       	ldi	r25, 0x13	; 19
    33fe:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
        uart_flush();
    3402:	0e 94 ac 2e 	call	0x5d58	; 0x5d58 <uart_flush>
        uart_send_str_p(PSTR("ATE0\r\n"));
    3406:	87 ef       	ldi	r24, 0xF7	; 247
    3408:	91 e0       	ldi	r25, 0x01	; 1
    340a:	0e 94 94 2e 	call	0x5d28	; 0x5d28 <uart_send_str_p>
        if ((respons = mdm_wait_cmd_ms(1000, (const char*)RESPON_OK)))
    340e:	64 ec       	ldi	r22, 0xC4	; 196
    3410:	72 e0       	ldi	r23, 0x02	; 2
    3412:	88 ee       	ldi	r24, 0xE8	; 232
    3414:	93 e0       	ldi	r25, 0x03	; 3
    3416:	0e 94 cd 12 	call	0x259a	; 0x259a <mdm_wait_cmd_ms>
    341a:	88 23       	and	r24, r24
    341c:	01 f3       	breq	.-64     	; 0x33de <setup_init+0x42>
            delay_ms(500);
    341e:	84 ef       	ldi	r24, 0xF4	; 244
    3420:	91 e0       	ldi	r25, 0x01	; 1
    3422:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
            uart_flush();
    3426:	0e 94 ac 2e 	call	0x5d58	; 0x5d58 <uart_flush>
            uart_send_str_p(PSTR("AT+CMGF=1\r\n"));
    342a:	8b ee       	ldi	r24, 0xEB	; 235
    342c:	91 e0       	ldi	r25, 0x01	; 1
    342e:	0e 94 94 2e 	call	0x5d28	; 0x5d28 <uart_send_str_p>
            if ((respons = mdm_wait_cmd_ms(1000, (const char*)RESPON_OK)))
    3432:	64 ec       	ldi	r22, 0xC4	; 196
    3434:	72 e0       	ldi	r23, 0x02	; 2
    3436:	88 ee       	ldi	r24, 0xE8	; 232
    3438:	93 e0       	ldi	r25, 0x03	; 3
    343a:	0e 94 cd 12 	call	0x259a	; 0x259a <mdm_wait_cmd_ms>
    343e:	88 23       	and	r24, r24
    3440:	71 f2       	breq	.-100    	; 0x33de <setup_init+0x42>
                delay_ms(500);
    3442:	84 ef       	ldi	r24, 0xF4	; 244
    3444:	91 e0       	ldi	r25, 0x01	; 1
    3446:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
                uart_flush();
    344a:	0e 94 ac 2e 	call	0x5d58	; 0x5d58 <uart_flush>
                uart_send_str_p(PSTR("AT+CNMI=2,1,0,1,0\r\n"));
    344e:	87 ed       	ldi	r24, 0xD7	; 215
    3450:	91 e0       	ldi	r25, 0x01	; 1
    3452:	0e 94 94 2e 	call	0x5d28	; 0x5d28 <uart_send_str_p>
                if ((respons = mdm_wait_cmd_ms(3000, (const char*)RESPON_OK)))
    3456:	64 ec       	ldi	r22, 0xC4	; 196
    3458:	72 e0       	ldi	r23, 0x02	; 2
    345a:	88 eb       	ldi	r24, 0xB8	; 184
    345c:	9b e0       	ldi	r25, 0x0B	; 11
    345e:	0e 94 cd 12 	call	0x259a	; 0x259a <mdm_wait_cmd_ms>
    3462:	88 23       	and	r24, r24
    3464:	09 f4       	brne	.+2      	; 0x3468 <setup_init+0xcc>
    3466:	bb cf       	rjmp	.-138    	; 0x33de <setup_init+0x42>
                    delay_ms(500);
    3468:	84 ef       	ldi	r24, 0xF4	; 244
    346a:	91 e0       	ldi	r25, 0x01	; 1
    346c:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
                    uart_flush();
    3470:	0e 94 ac 2e 	call	0x5d58	; 0x5d58 <uart_flush>
                    uart_send_str_p(PSTR("AT+CLIP=1\r\n"));
    3474:	8b ec       	ldi	r24, 0xCB	; 203
    3476:	91 e0       	ldi	r25, 0x01	; 1
    3478:	0e 94 94 2e 	call	0x5d28	; 0x5d28 <uart_send_str_p>
                    if ((respons = mdm_wait_cmd_ms(1000, (const char*)RESPON_OK)))
    347c:	64 ec       	ldi	r22, 0xC4	; 196
    347e:	72 e0       	ldi	r23, 0x02	; 2
    3480:	88 ee       	ldi	r24, 0xE8	; 232
    3482:	93 e0       	ldi	r25, 0x03	; 3
    3484:	0e 94 cd 12 	call	0x259a	; 0x259a <mdm_wait_cmd_ms>
    3488:	88 23       	and	r24, r24
    348a:	09 f4       	brne	.+2      	; 0x348e <setup_init+0xf2>
    348c:	a8 cf       	rjmp	.-176    	; 0x33de <setup_init+0x42>
                        delay_ms(3000);
    348e:	88 eb       	ldi	r24, 0xB8	; 184
    3490:	9b e0       	ldi	r25, 0x0B	; 11
    3492:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
                        uart_flush();
    3496:	0e 94 ac 2e 	call	0x5d58	; 0x5d58 <uart_flush>
                        uart_send_str_p(PSTR("AT+CPMS=\"SM\",\"SM\",\"SM\"\r\n"));
    349a:	82 eb       	ldi	r24, 0xB2	; 178
    349c:	91 e0       	ldi	r25, 0x01	; 1
    349e:	0e 94 94 2e 	call	0x5d28	; 0x5d28 <uart_send_str_p>
                        if ((respons = mdm_wait_cmd_ms(3000, (const char*)RESPON_OK)))
    34a2:	64 ec       	ldi	r22, 0xC4	; 196
    34a4:	72 e0       	ldi	r23, 0x02	; 2
    34a6:	88 eb       	ldi	r24, 0xB8	; 184
    34a8:	9b e0       	ldi	r25, 0x0B	; 11
    34aa:	0e 94 cd 12 	call	0x259a	; 0x259a <mdm_wait_cmd_ms>
    34ae:	88 23       	and	r24, r24
    34b0:	09 f4       	brne	.+2      	; 0x34b4 <setup_init+0x118>
    34b2:	95 cf       	rjmp	.-214    	; 0x33de <setup_init+0x42>
                            delay_ms(500);
    34b4:	84 ef       	ldi	r24, 0xF4	; 244
    34b6:	91 e0       	ldi	r25, 0x01	; 1
    34b8:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
                            uart_flush();
    34bc:	0e 94 ac 2e 	call	0x5d58	; 0x5d58 <uart_flush>
                            uart_send_str_p(PSTR("AT+DDET=1,50,0,1\r\n"));
    34c0:	8f e9       	ldi	r24, 0x9F	; 159
    34c2:	91 e0       	ldi	r25, 0x01	; 1
    34c4:	0e 94 94 2e 	call	0x5d28	; 0x5d28 <uart_send_str_p>
                            if ((respons = mdm_wait_cmd_ms(2000, (const char*)RESPON_OK)))
    34c8:	64 ec       	ldi	r22, 0xC4	; 196
    34ca:	72 e0       	ldi	r23, 0x02	; 2
    34cc:	80 ed       	ldi	r24, 0xD0	; 208
    34ce:	97 e0       	ldi	r25, 0x07	; 7
    34d0:	0e 94 cd 12 	call	0x259a	; 0x259a <mdm_wait_cmd_ms>
    34d4:	89 83       	std	Y+1, r24	; 0x01
    34d6:	88 23       	and	r24, r24
    34d8:	09 f4       	brne	.+2      	; 0x34dc <setup_init+0x140>
    34da:	81 cf       	rjmp	.-254    	; 0x33de <setup_init+0x42>
    registration_status_ms(2000);
    34dc:	60 ed       	ldi	r22, 0xD0	; 208
    34de:	77 e0       	ldi	r23, 0x07	; 7
    34e0:	80 e0       	ldi	r24, 0x00	; 0
    34e2:	90 e0       	ldi	r25, 0x00	; 0
    34e4:	0e 94 23 14 	call	0x2846	; 0x2846 <registration_status_ms>
}
    34e8:	89 81       	ldd	r24, Y+1	; 0x01
    34ea:	0f 90       	pop	r0
    34ec:	0f 90       	pop	r0
    34ee:	0f 90       	pop	r0
    34f0:	0f 90       	pop	r0
    34f2:	df 91       	pop	r29
    34f4:	cf 91       	pop	r28
    34f6:	ff 90       	pop	r15
    34f8:	ef 90       	pop	r14
    34fa:	df 90       	pop	r13
    34fc:	cf 90       	pop	r12
    34fe:	08 95       	ret
                reset_mcu(1);
    3500:	81 e0       	ldi	r24, 0x01	; 1
    3502:	0e 94 84 1a 	call	0x3508	; 0x3508 <reset_mcu>
    3506:	67 cf       	rjmp	.-306    	; 0x33d6 <setup_init+0x3a>

00003508 <reset_mcu>:
{
    3508:	cf 93       	push	r28
    350a:	c8 2f       	mov	r28, r24
    if(get_reset_count_mcu() < 254)
    350c:	0e 94 ba 10 	call	0x2174	; 0x2174 <get_reset_count_mcu>
    3510:	8e 3f       	cpi	r24, 0xFE	; 254
    3512:	b0 f4       	brcc	.+44     	; 0x3540 <reset_mcu+0x38>
        inc_reset_count_mcu();
    3514:	0e 94 bd 10 	call	0x217a	; 0x217a <inc_reset_count_mcu>
    EEPROM_update();
    3518:	0e 94 81 10 	call	0x2102	; 0x2102 <EEPROM_update>
    flag_busy_mdm = REBOOT_MODEM;
    351c:	82 e0       	ldi	r24, 0x02	; 2
    351e:	80 93 cc 03 	sts	0x03CC, r24	; 0x8003cc <flag_busy_mdm>
    delay_ms(100);
    3522:	84 e6       	ldi	r24, 0x64	; 100
    3524:	90 e0       	ldi	r25, 0x00	; 0
    3526:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
    DigitalWrite(PIN_PWR_GSM, LOW);
    352a:	5c 98       	cbi	0x0b, 4	; 11
    delay_s(5);
    352c:	85 e0       	ldi	r24, 0x05	; 5
    352e:	0e 94 a8 2c 	call	0x5950	; 0x5950 <delay_s>
    DigitalWrite(PIN_PWR_GSM, HIGH);
    3532:	5c 9a       	sbi	0x0b, 4	; 11
    setup_init();
    3534:	0e 94 ce 19 	call	0x339c	; 0x339c <setup_init>
    if(all == 1)
    3538:	c1 30       	cpi	r28, 0x01	; 1
    353a:	31 f0       	breq	.+12     	; 0x3548 <reset_mcu+0x40>
}
    353c:	cf 91       	pop	r28
    353e:	08 95       	ret
    else set_reset_count_mcu(0);
    3540:	80 e0       	ldi	r24, 0x00	; 0
    3542:	0e 94 b7 10 	call	0x216e	; 0x216e <set_reset_count_mcu>
    3546:	e8 cf       	rjmp	.-48     	; 0x3518 <reset_mcu+0x10>
        cli(); // запрещаем прерывания и ждем перезагрузки по сторожевому таймеру
    3548:	f8 94       	cli
        while(1);
    354a:	ff cf       	rjmp	.-2      	; 0x354a <reset_mcu+0x42>

0000354c <check_registration>:
{
    354c:	af 92       	push	r10
    354e:	bf 92       	push	r11
    3550:	cf 92       	push	r12
    3552:	df 92       	push	r13
    3554:	ef 92       	push	r14
    3556:	ff 92       	push	r15
    3558:	0f 93       	push	r16
    355a:	1f 93       	push	r17
    355c:	cf 93       	push	r28
    355e:	df 93       	push	r29
    3560:	00 d0       	rcall	.+0      	; 0x3562 <check_registration+0x16>
    3562:	00 d0       	rcall	.+0      	; 0x3564 <check_registration+0x18>
    3564:	0f 92       	push	r0
    3566:	cd b7       	in	r28, 0x3d	; 61
    3568:	de b7       	in	r29, 0x3e	; 62
    if(get_time_s() > time_of_last_check)
    356a:	0e 94 29 2c 	call	0x5852	; 0x5852 <get_time_s>
    356e:	69 83       	std	Y+1, r22	; 0x01
    3570:	7a 83       	std	Y+2, r23	; 0x02
    3572:	8b 83       	std	Y+3, r24	; 0x03
    3574:	9c 83       	std	Y+4, r25	; 0x04
    3576:	80 91 c8 03 	lds	r24, 0x03C8	; 0x8003c8 <time_of_last_check.43>
    357a:	90 91 c9 03 	lds	r25, 0x03C9	; 0x8003c9 <time_of_last_check.43+0x1>
    357e:	a0 91 ca 03 	lds	r26, 0x03CA	; 0x8003ca <time_of_last_check.43+0x2>
    3582:	b0 91 cb 03 	lds	r27, 0x03CB	; 0x8003cb <time_of_last_check.43+0x3>
    3586:	29 81       	ldd	r18, Y+1	; 0x01
    3588:	3a 81       	ldd	r19, Y+2	; 0x02
    358a:	4b 81       	ldd	r20, Y+3	; 0x03
    358c:	5c 81       	ldd	r21, Y+4	; 0x04
    358e:	82 17       	cp	r24, r18
    3590:	93 07       	cpc	r25, r19
    3592:	a4 07       	cpc	r26, r20
    3594:	b5 07       	cpc	r27, r21
    3596:	90 f0       	brcs	.+36     	; 0x35bc <check_registration+0x70>
    return 0;
    3598:	19 82       	std	Y+1, r1	; 0x01
}
    359a:	89 81       	ldd	r24, Y+1	; 0x01
    359c:	0f 90       	pop	r0
    359e:	0f 90       	pop	r0
    35a0:	0f 90       	pop	r0
    35a2:	0f 90       	pop	r0
    35a4:	0f 90       	pop	r0
    35a6:	df 91       	pop	r29
    35a8:	cf 91       	pop	r28
    35aa:	1f 91       	pop	r17
    35ac:	0f 91       	pop	r16
    35ae:	ff 90       	pop	r15
    35b0:	ef 90       	pop	r14
    35b2:	df 90       	pop	r13
    35b4:	cf 90       	pop	r12
    35b6:	bf 90       	pop	r11
    35b8:	af 90       	pop	r10
    35ba:	08 95       	ret
    delay_ms(50);
    35bc:	82 e3       	ldi	r24, 0x32	; 50
    35be:	90 e0       	ldi	r25, 0x00	; 0
    35c0:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
    uart_flush();
    35c4:	0e 94 ac 2e 	call	0x5d58	; 0x5d58 <uart_flush>
    uart_send_str_p(PSTR("AT+CSQ\r"));
    35c8:	8c ed       	ldi	r24, 0xDC	; 220
    35ca:	92 e0       	ldi	r25, 0x02	; 2
    35cc:	0e 94 94 2e 	call	0x5d28	; 0x5d28 <uart_send_str_p>
    if(mdm_wait_cmd_ms(2000, (const char*)RESPON_OK_CSQ) == 0)
    35d0:	6a ed       	ldi	r22, 0xDA	; 218
    35d2:	72 e0       	ldi	r23, 0x02	; 2
    35d4:	80 ed       	ldi	r24, 0xD0	; 208
    35d6:	97 e0       	ldi	r25, 0x07	; 7
    35d8:	0e 94 cd 12 	call	0x259a	; 0x259a <mdm_wait_cmd_ms>
    35dc:	88 23       	and	r24, r24
    35de:	99 f0       	breq	.+38     	; 0x3606 <check_registration+0xba>
    ptr = strchr(mdm_data, ':');
    35e0:	6a e3       	ldi	r22, 0x3A	; 58
    35e2:	70 e0       	ldi	r23, 0x00	; 0
    35e4:	80 ef       	ldi	r24, 0xF0	; 240
    35e6:	93 e0       	ldi	r25, 0x03	; 3
    35e8:	0e 94 ef 33 	call	0x67de	; 0x67de <strchr>
    35ec:	e8 2f       	mov	r30, r24
    35ee:	f9 2f       	mov	r31, r25
    if(!ptr)
    35f0:	80 e0       	ldi	r24, 0x00	; 0
    35f2:	30 97       	sbiw	r30, 0x00	; 0
    35f4:	41 f0       	breq	.+16     	; 0x3606 <check_registration+0xba>
    if(isdigit(*ptr) == FALSE)
    35f6:	82 81       	ldd	r24, Z+2	; 0x02
    35f8:	08 2e       	mov	r0, r24
    35fa:	00 0c       	add	r0, r0
    35fc:	99 0b       	sbc	r25, r25
    35fe:	c0 97       	sbiw	r24, 0x30	; 48
    3600:	0a 97       	sbiw	r24, 0x0a	; 10
    3602:	80 f1       	brcs	.+96     	; 0x3664 <check_registration+0x118>
    3604:	80 e0       	ldi	r24, 0x00	; 0
        signal_strength = 0;
    3606:	80 93 ce 03 	sts	0x03CE, r24	; 0x8003ce <signal_strength>
        time_of_last_check = get_time_s() + TIME_CHECK_REG;
    360a:	0e 94 29 2c 	call	0x5852	; 0x5852 <get_time_s>
    360e:	dc 01       	movw	r26, r24
    3610:	cb 01       	movw	r24, r22
    3612:	8c 54       	subi	r24, 0x4C	; 76
    3614:	9f 4f       	sbci	r25, 0xFF	; 255
    3616:	af 4f       	sbci	r26, 0xFF	; 255
    3618:	bf 4f       	sbci	r27, 0xFF	; 255
    361a:	80 93 c8 03 	sts	0x03C8, r24	; 0x8003c8 <time_of_last_check.43>
    361e:	90 93 c9 03 	sts	0x03C9, r25	; 0x8003c9 <time_of_last_check.43+0x1>
    3622:	a0 93 ca 03 	sts	0x03CA, r26	; 0x8003ca <time_of_last_check.43+0x2>
    3626:	b0 93 cb 03 	sts	0x03CB, r27	; 0x8003cb <time_of_last_check.43+0x3>
        if(get_time_without_power_s() > 10)
    362a:	0e 94 2b 07 	call	0xe56	; 0xe56 <get_time_without_power_s>
    362e:	69 83       	std	Y+1, r22	; 0x01
    3630:	7a 83       	std	Y+2, r23	; 0x02
    3632:	8b 83       	std	Y+3, r24	; 0x03
    3634:	9c 83       	std	Y+4, r25	; 0x04
    3636:	6b 30       	cpi	r22, 0x0B	; 11
    3638:	71 05       	cpc	r23, r1
    363a:	81 05       	cpc	r24, r1
    363c:	91 05       	cpc	r25, r1
    363e:	c0 f5       	brcc	.+112    	; 0x36b0 <check_registration+0x164>
        if(registration_status_ms(2000) == 0)
    3640:	60 ed       	ldi	r22, 0xD0	; 208
    3642:	77 e0       	ldi	r23, 0x07	; 7
    3644:	80 e0       	ldi	r24, 0x00	; 0
    3646:	90 e0       	ldi	r25, 0x00	; 0
    3648:	0e 94 23 14 	call	0x2846	; 0x2846 <registration_status_ms>
    364c:	81 11       	cpse	r24, r1
    364e:	b0 c0       	rjmp	.+352    	; 0x37b0 <check_registration+0x264>
            cnt++;
    3650:	80 91 c7 03 	lds	r24, 0x03C7	; 0x8003c7 <cnt.42>
    3654:	8f 5f       	subi	r24, 0xFF	; 255
    3656:	80 93 c7 03 	sts	0x03C7, r24	; 0x8003c7 <cnt.42>
            if(cnt >= 5)
    365a:	85 30       	cpi	r24, 0x05	; 5
    365c:	0c f0       	brlt	.+2      	; 0x3660 <check_registration+0x114>
    365e:	a3 c0       	rjmp	.+326    	; 0x37a6 <check_registration+0x25a>
    return 0;
    3660:	19 82       	std	Y+1, r1	; 0x01
    3662:	9b cf       	rjmp	.-202    	; 0x359a <check_registration+0x4e>
    level = strtoul(ptr, 0, 10);
    3664:	4a e0       	ldi	r20, 0x0A	; 10
    3666:	50 e0       	ldi	r21, 0x00	; 0
    3668:	70 e0       	ldi	r23, 0x00	; 0
    366a:	60 e0       	ldi	r22, 0x00	; 0
    366c:	cf 01       	movw	r24, r30
    366e:	02 96       	adiw	r24, 0x02	; 2
    3670:	0e 94 20 32 	call	0x6440	; 0x6440 <strtoul>
    3674:	46 2f       	mov	r20, r22
    3676:	57 2f       	mov	r21, r23
    3678:	68 2f       	mov	r22, r24
    367a:	79 2f       	mov	r23, r25
    if(level>=32)
    367c:	80 e0       	ldi	r24, 0x00	; 0
    367e:	40 32       	cpi	r20, 0x20	; 32
    3680:	51 05       	cpc	r21, r1
    3682:	61 05       	cpc	r22, r1
    3684:	71 05       	cpc	r23, r1
    3686:	08 f0       	brcs	.+2      	; 0x368a <check_registration+0x13e>
    3688:	be cf       	rjmp	.-132    	; 0x3606 <check_registration+0xba>
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    368a:	42 50       	subi	r20, 0x02	; 2
    368c:	51 09       	sbc	r21, r1
    368e:	84 e6       	ldi	r24, 0x64	; 100
    3690:	84 9f       	mul	r24, r20
    3692:	90 01       	movw	r18, r0
    3694:	85 9f       	mul	r24, r21
    3696:	30 0d       	add	r19, r0
    3698:	11 24       	eor	r1, r1
    369a:	af e9       	ldi	r26, 0x9F	; 159
    369c:	b6 e4       	ldi	r27, 0x46	; 70
    369e:	0e 94 7a 2f 	call	0x5ef4	; 0x5ef4 <__umulhisi3>
    36a2:	96 95       	lsr	r25
    36a4:	87 95       	ror	r24
    36a6:	96 95       	lsr	r25
    36a8:	87 95       	ror	r24
    36aa:	96 95       	lsr	r25
    36ac:	87 95       	ror	r24
    36ae:	ab cf       	rjmp	.-170    	; 0x3606 <check_registration+0xba>
    36b0:	31 e0       	ldi	r19, 0x01	; 1
    36b2:	39 83       	std	Y+1, r19	; 0x01
    36b4:	22 c0       	rjmp	.+68     	; 0x36fa <check_registration+0x1ae>
            delay_ms(100);
    36b6:	84 e6       	ldi	r24, 0x64	; 100
    36b8:	90 e0       	ldi	r25, 0x00	; 0
    36ba:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
        uart_flush();
    36be:	0e 94 ac 2e 	call	0x5d58	; 0x5d58 <uart_flush>
        uart_send_str_p(PSTR("AT+CBC\r\n"));
    36c2:	83 ed       	ldi	r24, 0xD3	; 211
    36c4:	92 e0       	ldi	r25, 0x02	; 2
    36c6:	0e 94 94 2e 	call	0x5d28	; 0x5d28 <uart_send_str_p>
        if(mdm_wait_str(2000)==FALSE)
    36ca:	80 ed       	ldi	r24, 0xD0	; 208
    36cc:	97 e0       	ldi	r25, 0x07	; 7
    36ce:	0e 94 46 13 	call	0x268c	; 0x268c <mdm_wait_str>
    36d2:	88 23       	and	r24, r24
    36d4:	59 f0       	breq	.+22     	; 0x36ec <check_registration+0x1a0>
        ptr = strstr_P(mdm_data, PSTR("+CBC:"));
    36d6:	6d ec       	ldi	r22, 0xCD	; 205
    36d8:	72 e0       	ldi	r23, 0x02	; 2
    36da:	80 ef       	ldi	r24, 0xF0	; 240
    36dc:	93 e0       	ldi	r25, 0x03	; 3
    36de:	0e 94 aa 33 	call	0x6754	; 0x6754 <strstr_P>
    36e2:	28 2f       	mov	r18, r24
    36e4:	39 2f       	mov	r19, r25
        if(ptr==FALSE)
    36e6:	21 15       	cp	r18, r1
    36e8:	31 05       	cpc	r19, r1
    36ea:	09 f5       	brne	.+66     	; 0x372e <check_registration+0x1e2>
    for(i = 0; i < 5; i++)
    36ec:	59 81       	ldd	r21, Y+1	; 0x01
    36ee:	55 30       	cpi	r21, 0x05	; 5
    36f0:	08 f0       	brcs	.+2      	; 0x36f4 <check_registration+0x1a8>
    36f2:	55 c0       	rjmp	.+170    	; 0x379e <check_registration+0x252>
    36f4:	89 81       	ldd	r24, Y+1	; 0x01
    36f6:	8f 5f       	subi	r24, 0xFF	; 255
    36f8:	89 83       	std	Y+1, r24	; 0x01
        if(i!=0)
    36fa:	49 81       	ldd	r20, Y+1	; 0x01
    36fc:	41 30       	cpi	r20, 0x01	; 1
    36fe:	d9 f6       	brne	.-74     	; 0x36b6 <check_registration+0x16a>
        uart_flush();
    3700:	0e 94 ac 2e 	call	0x5d58	; 0x5d58 <uart_flush>
        uart_send_str_p(PSTR("AT+CBC\r\n"));
    3704:	83 ed       	ldi	r24, 0xD3	; 211
    3706:	92 e0       	ldi	r25, 0x02	; 2
    3708:	0e 94 94 2e 	call	0x5d28	; 0x5d28 <uart_send_str_p>
        if(mdm_wait_str(2000)==FALSE)
    370c:	80 ed       	ldi	r24, 0xD0	; 208
    370e:	97 e0       	ldi	r25, 0x07	; 7
    3710:	0e 94 46 13 	call	0x268c	; 0x268c <mdm_wait_str>
    3714:	88 23       	and	r24, r24
    3716:	71 f3       	breq	.-36     	; 0x36f4 <check_registration+0x1a8>
        ptr = strstr_P(mdm_data, PSTR("+CBC:"));
    3718:	6d ec       	ldi	r22, 0xCD	; 205
    371a:	72 e0       	ldi	r23, 0x02	; 2
    371c:	80 ef       	ldi	r24, 0xF0	; 240
    371e:	93 e0       	ldi	r25, 0x03	; 3
    3720:	0e 94 aa 33 	call	0x6754	; 0x6754 <strstr_P>
    3724:	28 2f       	mov	r18, r24
    3726:	39 2f       	mov	r19, r25
        if(ptr==FALSE)
    3728:	21 15       	cp	r18, r1
    372a:	31 05       	cpc	r19, r1
    372c:	19 f3       	breq	.-58     	; 0x36f4 <check_registration+0x1a8>
        ptr = strchr(ptr, ':');
    372e:	6a e3       	ldi	r22, 0x3A	; 58
    3730:	70 e0       	ldi	r23, 0x00	; 0
    3732:	c9 01       	movw	r24, r18
    3734:	0e 94 ef 33 	call	0x67de	; 0x67de <strchr>
    3738:	28 2f       	mov	r18, r24
    373a:	39 2f       	mov	r19, r25
        if(!ptr)
    373c:	21 15       	cp	r18, r1
    373e:	31 05       	cpc	r19, r1
    3740:	a9 f2       	breq	.-86     	; 0x36ec <check_registration+0x1a0>
        ptr = strchr(ptr, ',');
    3742:	6c e2       	ldi	r22, 0x2C	; 44
    3744:	70 e0       	ldi	r23, 0x00	; 0
    3746:	c9 01       	movw	r24, r18
    3748:	0e 94 ef 33 	call	0x67de	; 0x67de <strchr>
    374c:	e8 2f       	mov	r30, r24
    374e:	f9 2f       	mov	r31, r25
        if(!ptr)
    3750:	30 97       	sbiw	r30, 0x00	; 0
    3752:	61 f2       	breq	.-104    	; 0x36ec <check_registration+0x1a0>
        if(isdigit(*ptr) == FALSE)
    3754:	81 81       	ldd	r24, Z+1	; 0x01
    3756:	08 2e       	mov	r0, r24
    3758:	00 0c       	add	r0, r0
    375a:	99 0b       	sbc	r25, r25
    375c:	c0 97       	sbiw	r24, 0x30	; 48
    375e:	0a 97       	sbiw	r24, 0x0a	; 10
    3760:	28 f6       	brcc	.-118    	; 0x36ec <check_registration+0x1a0>
        level = strtoul(ptr, 0, 10);
    3762:	4a e0       	ldi	r20, 0x0A	; 10
    3764:	50 e0       	ldi	r21, 0x00	; 0
    3766:	70 e0       	ldi	r23, 0x00	; 0
    3768:	60 e0       	ldi	r22, 0x00	; 0
    376a:	cf 01       	movw	r24, r30
    376c:	01 96       	adiw	r24, 0x01	; 1
    376e:	0e 94 20 32 	call	0x6440	; 0x6440 <strtoul>
    3772:	36 2f       	mov	r19, r22
    3774:	46 2f       	mov	r20, r22
    3776:	57 2f       	mov	r21, r23
    3778:	68 2f       	mov	r22, r24
    377a:	79 2f       	mov	r23, r25
        if(level<=0xFF)
    377c:	4f 3f       	cpi	r20, 0xFF	; 255
    377e:	51 05       	cpc	r21, r1
    3780:	61 05       	cpc	r22, r1
    3782:	71 05       	cpc	r23, r1
    3784:	11 f0       	breq	.+4      	; 0x378a <check_registration+0x23e>
    3786:	08 f0       	brcs	.+2      	; 0x378a <check_registration+0x23e>
    3788:	b1 cf       	rjmp	.-158    	; 0x36ec <check_registration+0x1a0>
            battery_level = (uint8_t)level;
    378a:	30 93 cd 03 	sts	0x03CD, r19	; 0x8003cd <battery_level>
            if(battery_level < 25)
    378e:	39 31       	cpi	r19, 0x19	; 25
    3790:	08 f0       	brcs	.+2      	; 0x3794 <check_registration+0x248>
    3792:	56 cf       	rjmp	.-340    	; 0x3640 <check_registration+0xf4>
                send_sms_admins("Battery LOW!!!");
    3794:	80 ee       	ldi	r24, 0xE0	; 224
    3796:	92 e0       	ldi	r25, 0x02	; 2
    3798:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <send_sms_admins>
    379c:	51 cf       	rjmp	.-350    	; 0x3640 <check_registration+0xf4>
    battery_level = 0xFF;
    379e:	8f ef       	ldi	r24, 0xFF	; 255
    37a0:	80 93 cd 03 	sts	0x03CD, r24	; 0x8003cd <battery_level>
            if(battery_level < 25)
    37a4:	4d cf       	rjmp	.-358    	; 0x3640 <check_registration+0xf4>
                reset_mcu(0);
    37a6:	80 e0       	ldi	r24, 0x00	; 0
    37a8:	0e 94 84 1a 	call	0x3508	; 0x3508 <reset_mcu>
    return 0;
    37ac:	19 82       	std	Y+1, r1	; 0x01
    37ae:	f5 ce       	rjmp	.-534    	; 0x359a <check_registration+0x4e>
            cnt=0;
    37b0:	10 92 c7 03 	sts	0x03C7, r1	; 0x8003c7 <cnt.42>
            time_of_last_check = get_time_s() + TIME_CHECK_REG;
    37b4:	0e 94 29 2c 	call	0x5852	; 0x5852 <get_time_s>
    37b8:	69 83       	std	Y+1, r22	; 0x01
    37ba:	7a 83       	std	Y+2, r23	; 0x02
    37bc:	8b 83       	std	Y+3, r24	; 0x03
    37be:	9c 83       	std	Y+4, r25	; 0x04
    37c0:	dc 01       	movw	r26, r24
    37c2:	cb 01       	movw	r24, r22
    37c4:	8c 54       	subi	r24, 0x4C	; 76
    37c6:	9f 4f       	sbci	r25, 0xFF	; 255
    37c8:	af 4f       	sbci	r26, 0xFF	; 255
    37ca:	bf 4f       	sbci	r27, 0xFF	; 255
    37cc:	80 93 c8 03 	sts	0x03C8, r24	; 0x8003c8 <time_of_last_check.43>
    37d0:	90 93 c9 03 	sts	0x03C9, r25	; 0x8003c9 <time_of_last_check.43+0x1>
    37d4:	a0 93 ca 03 	sts	0x03CA, r26	; 0x8003ca <time_of_last_check.43+0x2>
    37d8:	b0 93 cb 03 	sts	0x03CB, r27	; 0x8003cb <time_of_last_check.43+0x3>
    if(unsent_sms == 0)
    37dc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <unsent_sms>
    37e0:	88 23       	and	r24, r24
    37e2:	09 f4       	brne	.+2      	; 0x37e6 <check_registration+0x29a>
    37e4:	ec c0       	rjmp	.+472    	; 0x39be <check_registration+0x472>
    if(deposit < 1)
    37e6:	80 91 d0 03 	lds	r24, 0x03D0	; 0x8003d0 <deposit>
    37ea:	90 91 d1 03 	lds	r25, 0x03D1	; 0x8003d1 <deposit+0x1>
    37ee:	18 16       	cp	r1, r24
    37f0:	19 06       	cpc	r1, r25
    37f2:	0c f0       	brlt	.+2      	; 0x37f6 <check_registration+0x2aa>
    37f4:	e7 c0       	rjmp	.+462    	; 0x39c4 <check_registration+0x478>
    flag_busy_mdm = 1;
    37f6:	81 e0       	ldi	r24, 0x01	; 1
    37f8:	80 93 cc 03 	sts	0x03CC, r24	; 0x8003cc <flag_busy_mdm>
    delay_ms(100);
    37fc:	84 e6       	ldi	r24, 0x64	; 100
    37fe:	90 e0       	ldi	r25, 0x00	; 0
    3800:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
    delay_ms(100);
    3804:	84 e6       	ldi	r24, 0x64	; 100
    3806:	90 e0       	ldi	r25, 0x00	; 0
    3808:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
    uart_flush();
    380c:	0e 94 ac 2e 	call	0x5d58	; 0x5d58 <uart_flush>
    uart_send_str_p(PSTR("AT+CMGL=\"STO UNSENT\"\r\n")); // запрашиваем список всех СМСок
    3810:	84 ea       	ldi	r24, 0xA4	; 164
    3812:	92 e0       	ldi	r25, 0x02	; 2
    3814:	0e 94 94 2e 	call	0x5d28	; 0x5d28 <uart_send_str_p>
    rez = mdm_wait_cmd_ms(5000, (const char*)RESPON_OK_CMGL);
    3818:	6e ec       	ldi	r22, 0xCE	; 206
    381a:	72 e0       	ldi	r23, 0x02	; 2
    381c:	88 e8       	ldi	r24, 0x88	; 136
    381e:	93 e1       	ldi	r25, 0x13	; 19
    3820:	0e 94 cd 12 	call	0x259a	; 0x259a <mdm_wait_cmd_ms>
    3824:	89 83       	std	Y+1, r24	; 0x01
    if(rez==1)
    3826:	81 30       	cpi	r24, 0x01	; 1
    3828:	59 f0       	breq	.+22     	; 0x3840 <check_registration+0x2f4>
        unsent_sms = 0;
    382a:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <unsent_sms>
    flag_busy_mdm = 0;
    382e:	10 92 cc 03 	sts	0x03CC, r1	; 0x8003cc <flag_busy_mdm>
    delay_ms(100);
    3832:	84 e6       	ldi	r24, 0x64	; 100
    3834:	90 e0       	ldi	r25, 0x00	; 0
    3836:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
            return 1;
    383a:	21 e0       	ldi	r18, 0x01	; 1
    383c:	29 83       	std	Y+1, r18	; 0x01
    return 0;
    383e:	ad ce       	rjmp	.-678    	; 0x359a <check_registration+0x4e>
        ptr = strchr(mdm_data, ':');
    3840:	6a e3       	ldi	r22, 0x3A	; 58
    3842:	70 e0       	ldi	r23, 0x00	; 0
    3844:	80 ef       	ldi	r24, 0xF0	; 240
    3846:	93 e0       	ldi	r25, 0x03	; 3
    3848:	0e 94 ef 33 	call	0x67de	; 0x67de <strchr>
    384c:	48 2f       	mov	r20, r24
    384e:	59 2f       	mov	r21, r25
        if(ptr)
    3850:	41 15       	cp	r20, r1
    3852:	51 05       	cpc	r21, r1
    3854:	09 f4       	brne	.+2      	; 0x3858 <check_registration+0x30c>
    3856:	9c c0       	rjmp	.+312    	; 0x3990 <check_registration+0x444>
    3858:	4f 5f       	subi	r20, 0xFF	; 255
    385a:	5f 4f       	sbci	r21, 0xFF	; 255
            for(i=0; i<=5; i++)
    385c:	90 e0       	ldi	r25, 0x00	; 0
                if(isdigit(*++ptr))
    385e:	fa 01       	movw	r30, r20
    3860:	4f 5f       	subi	r20, 0xFF	; 255
    3862:	5f 4f       	sbci	r21, 0xFF	; 255
    3864:	20 81       	ld	r18, Z
    3866:	02 2e       	mov	r0, r18
    3868:	00 0c       	add	r0, r0
    386a:	33 0b       	sbc	r19, r19
    386c:	20 53       	subi	r18, 0x30	; 48
    386e:	31 09       	sbc	r19, r1
    3870:	2a 30       	cpi	r18, 0x0A	; 10
    3872:	31 05       	cpc	r19, r1
    3874:	60 f0       	brcs	.+24     	; 0x388e <check_registration+0x342>
            for(i=0; i<=5; i++)
    3876:	9f 5f       	subi	r25, 0xFF	; 255
    3878:	96 30       	cpi	r25, 0x06	; 6
    387a:	89 f7       	brne	.-30     	; 0x385e <check_registration+0x312>
                unsent_sms = 0;
    387c:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <unsent_sms>
                flag_busy_mdm = 0;
    3880:	10 92 cc 03 	sts	0x03CC, r1	; 0x8003cc <flag_busy_mdm>
                delay_ms(100);
    3884:	84 e6       	ldi	r24, 0x64	; 100
    3886:	90 e0       	ldi	r25, 0x00	; 0
    3888:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
                return 0;
    388c:	86 ce       	rjmp	.-756    	; 0x359a <check_registration+0x4e>
            if(i>=5)
    388e:	95 30       	cpi	r25, 0x05	; 5
    3890:	a8 f7       	brcc	.-22     	; 0x387c <check_registration+0x330>
            index = strtoul(ptr, 0, 10);
    3892:	4a e0       	ldi	r20, 0x0A	; 10
    3894:	50 e0       	ldi	r21, 0x00	; 0
    3896:	70 e0       	ldi	r23, 0x00	; 0
    3898:	60 e0       	ldi	r22, 0x00	; 0
    389a:	cf 01       	movw	r24, r30
    389c:	0e 94 20 32 	call	0x6440	; 0x6440 <strtoul>
    38a0:	c6 2e       	mov	r12, r22
    38a2:	d7 2e       	mov	r13, r23
    38a4:	e8 2e       	mov	r14, r24
    38a6:	f9 2e       	mov	r15, r25
            if(index > 0xFFFF)
    38a8:	c1 14       	cp	r12, r1
    38aa:	d1 04       	cpc	r13, r1
    38ac:	91 e0       	ldi	r25, 0x01	; 1
    38ae:	e9 06       	cpc	r14, r25
    38b0:	f1 04       	cpc	r15, r1
    38b2:	80 f4       	brcc	.+32     	; 0x38d4 <check_registration+0x388>
            if((uint16_t)index > 10) //max sms save sim
    38b4:	86 01       	movw	r16, r12
    38b6:	0b 30       	cpi	r16, 0x0B	; 11
    38b8:	11 05       	cpc	r17, r1
    38ba:	98 f4       	brcc	.+38     	; 0x38e2 <check_registration+0x396>
            if((uint16_t)index < 1)
    38bc:	01 15       	cp	r16, r1
    38be:	11 05       	cpc	r17, r1
    38c0:	91 f4       	brne	.+36     	; 0x38e6 <check_registration+0x39a>
                unsent_sms = 0;
    38c2:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <unsent_sms>
                flag_busy_mdm = 0;
    38c6:	10 92 cc 03 	sts	0x03CC, r1	; 0x8003cc <flag_busy_mdm>
                delay_ms(100);
    38ca:	84 e6       	ldi	r24, 0x64	; 100
    38cc:	90 e0       	ldi	r25, 0x00	; 0
    38ce:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
                return 0;
    38d2:	63 ce       	rjmp	.-826    	; 0x359a <check_registration+0x4e>
                flag_busy_mdm = 0;
    38d4:	10 92 cc 03 	sts	0x03CC, r1	; 0x8003cc <flag_busy_mdm>
                delay_ms(100);
    38d8:	84 e6       	ldi	r24, 0x64	; 100
    38da:	90 e0       	ldi	r25, 0x00	; 0
    38dc:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
                return 0;
    38e0:	5c ce       	rjmp	.-840    	; 0x359a <check_registration+0x4e>
                delete_all_sms();
    38e2:	0e 94 03 18 	call	0x3006	; 0x3006 <delete_all_sms>
        sprintf_P(mdm_data, PSTR("AT+CMSS=%d\r\n"), (uint16_t)index);
    38e6:	df 92       	push	r13
    38e8:	cf 92       	push	r12
    38ea:	87 e9       	ldi	r24, 0x97	; 151
    38ec:	92 e0       	ldi	r25, 0x02	; 2
    38ee:	9f 93       	push	r25
    38f0:	8f 93       	push	r24
    38f2:	80 ef       	ldi	r24, 0xF0	; 240
    38f4:	93 e0       	ldi	r25, 0x03	; 3
    38f6:	9f 93       	push	r25
    38f8:	8f 93       	push	r24
    38fa:	0e 94 68 34 	call	0x68d0	; 0x68d0 <sprintf_P>
        uart_flush();
    38fe:	0e 94 ac 2e 	call	0x5d58	; 0x5d58 <uart_flush>
        uart_send_str(mdm_data);
    3902:	80 ef       	ldi	r24, 0xF0	; 240
    3904:	93 e0       	ldi	r25, 0x03	; 3
    3906:	0e 94 76 2e 	call	0x5cec	; 0x5cec <uart_send_str>
        rez = mdm_wait_cmd_ms(60000, (const char*)RESPON_CMSS);
    390a:	6f ee       	ldi	r22, 0xEF	; 239
    390c:	72 e0       	ldi	r23, 0x02	; 2
    390e:	80 e6       	ldi	r24, 0x60	; 96
    3910:	9a ee       	ldi	r25, 0xEA	; 234
    3912:	0e 94 cd 12 	call	0x259a	; 0x259a <mdm_wait_cmd_ms>
        if(rez==1)
    3916:	0f 90       	pop	r0
    3918:	0f 90       	pop	r0
    391a:	0f 90       	pop	r0
    391c:	0f 90       	pop	r0
    391e:	0f 90       	pop	r0
    3920:	0f 90       	pop	r0
    3922:	81 30       	cpi	r24, 0x01	; 1
    3924:	09 f0       	breq	.+2      	; 0x3928 <check_registration+0x3dc>
    3926:	44 c0       	rjmp	.+136    	; 0x39b0 <check_registration+0x464>
    3928:	a3 e0       	ldi	r26, 0x03	; 3
    392a:	ad 83       	std	Y+5, r26	; 0x05
                sprintf_P(mdm_data, PSTR("AT+CMGD=%d\r\n"), (uint16_t)index); // удаляем обработанную СМСку
    392c:	0f 2e       	mov	r0, r31
    392e:	fa e8       	ldi	r31, 0x8A	; 138
    3930:	af 2e       	mov	r10, r31
    3932:	f2 e0       	ldi	r31, 0x02	; 2
    3934:	bf 2e       	mov	r11, r31
    3936:	f0 2d       	mov	r31, r0
    3938:	0f 2e       	mov	r0, r31
    393a:	f0 ef       	ldi	r31, 0xF0	; 240
    393c:	ef 2e       	mov	r14, r31
    393e:	f3 e0       	ldi	r31, 0x03	; 3
    3940:	ff 2e       	mov	r15, r31
    3942:	f0 2d       	mov	r31, r0
                delay_ms(100);
    3944:	84 e6       	ldi	r24, 0x64	; 100
    3946:	90 e0       	ldi	r25, 0x00	; 0
    3948:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
                sprintf_P(mdm_data, PSTR("AT+CMGD=%d\r\n"), (uint16_t)index); // удаляем обработанную СМСку
    394c:	1f 93       	push	r17
    394e:	0f 93       	push	r16
    3950:	bf 92       	push	r11
    3952:	af 92       	push	r10
    3954:	ff 92       	push	r15
    3956:	ef 92       	push	r14
    3958:	0e 94 68 34 	call	0x68d0	; 0x68d0 <sprintf_P>
                uart_flush();
    395c:	0e 94 ac 2e 	call	0x5d58	; 0x5d58 <uart_flush>
                uart_send_str(mdm_data);
    3960:	c7 01       	movw	r24, r14
    3962:	0e 94 76 2e 	call	0x5cec	; 0x5cec <uart_send_str>
                rez = mdm_wait_cmd_ms(6000, (const char*)RESPON_OK);
    3966:	64 ec       	ldi	r22, 0xC4	; 196
    3968:	72 e0       	ldi	r23, 0x02	; 2
    396a:	80 e7       	ldi	r24, 0x70	; 112
    396c:	97 e1       	ldi	r25, 0x17	; 23
    396e:	0e 94 cd 12 	call	0x259a	; 0x259a <mdm_wait_cmd_ms>
    3972:	89 83       	std	Y+1, r24	; 0x01
                if(rez == TRUE)
    3974:	0f 90       	pop	r0
    3976:	0f 90       	pop	r0
    3978:	0f 90       	pop	r0
    397a:	0f 90       	pop	r0
    397c:	0f 90       	pop	r0
    397e:	0f 90       	pop	r0
    3980:	81 30       	cpi	r24, 0x01	; 1
    3982:	79 f0       	breq	.+30     	; 0x39a2 <check_registration+0x456>
            for(i=0; i<3; i++)
    3984:	bd 81       	ldd	r27, Y+5	; 0x05
    3986:	b1 50       	subi	r27, 0x01	; 1
    3988:	bd 83       	std	Y+5, r27	; 0x05
    398a:	b1 11       	cpse	r27, r1
    398c:	db cf       	rjmp	.-74     	; 0x3944 <check_registration+0x3f8>
    398e:	4f cf       	rjmp	.-354    	; 0x382e <check_registration+0x2e2>
            unsent_sms = 0;
    3990:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <unsent_sms>
            flag_busy_mdm = 0;
    3994:	10 92 cc 03 	sts	0x03CC, r1	; 0x8003cc <flag_busy_mdm>
            delay_ms(100);
    3998:	84 e6       	ldi	r24, 0x64	; 100
    399a:	90 e0       	ldi	r25, 0x00	; 0
    399c:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
            return 0;
    39a0:	fc cd       	rjmp	.-1032   	; 0x359a <check_registration+0x4e>
                    flag_busy_mdm = 0;
    39a2:	10 92 cc 03 	sts	0x03CC, r1	; 0x8003cc <flag_busy_mdm>
                    delay_ms(100);
    39a6:	84 e6       	ldi	r24, 0x64	; 100
    39a8:	90 e0       	ldi	r25, 0x00	; 0
    39aa:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
                    return 1;
    39ae:	f5 cd       	rjmp	.-1046   	; 0x359a <check_registration+0x4e>
            flag_busy_mdm = 0;
    39b0:	10 92 cc 03 	sts	0x03CC, r1	; 0x8003cc <flag_busy_mdm>
            delay_ms(100);
    39b4:	84 e6       	ldi	r24, 0x64	; 100
    39b6:	90 e0       	ldi	r25, 0x00	; 0
    39b8:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
            return 0;
    39bc:	ee cd       	rjmp	.-1060   	; 0x359a <check_registration+0x4e>
            return 1;
    39be:	31 e0       	ldi	r19, 0x01	; 1
    39c0:	39 83       	std	Y+1, r19	; 0x01
    39c2:	eb cd       	rjmp	.-1066   	; 0x359a <check_registration+0x4e>
    39c4:	41 e0       	ldi	r20, 0x01	; 1
    39c6:	49 83       	std	Y+1, r20	; 0x01
    39c8:	e8 cd       	rjmp	.-1072   	; 0x359a <check_registration+0x4e>

000039ca <send_USSD>:
{
    39ca:	2f 92       	push	r2
    39cc:	3f 92       	push	r3
    39ce:	4f 92       	push	r4
    39d0:	5f 92       	push	r5
    39d2:	6f 92       	push	r6
    39d4:	7f 92       	push	r7
    39d6:	8f 92       	push	r8
    39d8:	9f 92       	push	r9
    39da:	af 92       	push	r10
    39dc:	bf 92       	push	r11
    39de:	cf 92       	push	r12
    39e0:	df 92       	push	r13
    39e2:	ef 92       	push	r14
    39e4:	ff 92       	push	r15
    39e6:	0f 93       	push	r16
    39e8:	1f 93       	push	r17
    39ea:	cf 93       	push	r28
    39ec:	df 93       	push	r29
    39ee:	cd b7       	in	r28, 0x3d	; 61
    39f0:	de b7       	in	r29, 0x3e	; 62
    39f2:	c2 56       	subi	r28, 0x62	; 98
    39f4:	d1 09       	sbc	r29, r1
    39f6:	0f b6       	in	r0, 0x3f	; 63
    39f8:	f8 94       	cli
    39fa:	de bf       	out	0x3e, r29	; 62
    39fc:	0f be       	out	0x3f, r0	; 63
    39fe:	cd bf       	out	0x3d, r28	; 61
    3a00:	a3 96       	adiw	r28, 0x23	; 35
    3a02:	8f af       	std	Y+63, r24	; 0x3f
    3a04:	a3 97       	sbiw	r28, 0x23	; 35
    flag_busy_mdm = BUSY_MODEM;
    3a06:	81 e0       	ldi	r24, 0x01	; 1
    3a08:	80 93 cc 03 	sts	0x03CC, r24	; 0x8003cc <flag_busy_mdm>
    delay_ms(100);
    3a0c:	84 e6       	ldi	r24, 0x64	; 100
    3a0e:	90 e0       	ldi	r25, 0x00	; 0
    3a10:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
    3a14:	01 e0       	ldi	r16, 0x01	; 1
    3a16:	10 e0       	ldi	r17, 0x00	; 0
    3a18:	17 c0       	rjmp	.+46     	; 0x3a48 <send_USSD+0x7e>
            delay_ms(500);
    3a1a:	84 ef       	ldi	r24, 0xF4	; 244
    3a1c:	91 e0       	ldi	r25, 0x01	; 1
    3a1e:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
        uart_flush();
    3a22:	0e 94 ac 2e 	call	0x5d58	; 0x5d58 <uart_flush>
        uart_send_str_p(PSTR("AT+CUSD=1,\"*101#\"\r\n"));
    3a26:	8b e8       	ldi	r24, 0x8B	; 139
    3a28:	91 e0       	ldi	r25, 0x01	; 1
    3a2a:	0e 94 94 2e 	call	0x5d28	; 0x5d28 <uart_send_str_p>
        if(mdm_wait_cmd_ms(7000, (const char*)RESPON_OK))
    3a2e:	64 ec       	ldi	r22, 0xC4	; 196
    3a30:	72 e0       	ldi	r23, 0x02	; 2
    3a32:	88 e5       	ldi	r24, 0x58	; 88
    3a34:	9b e1       	ldi	r25, 0x1B	; 27
    3a36:	0e 94 cd 12 	call	0x259a	; 0x259a <mdm_wait_cmd_ms>
    3a3a:	81 11       	cpse	r24, r1
    3a3c:	23 c0       	rjmp	.+70     	; 0x3a84 <send_USSD+0xba>
    for(i = 0; i <= 3; i++)
    3a3e:	04 30       	cpi	r16, 0x04	; 4
    3a40:	08 f0       	brcs	.+2      	; 0x3a44 <send_USSD+0x7a>
    3a42:	74 c0       	rjmp	.+232    	; 0x3b2c <send_USSD+0x162>
    3a44:	1f 5f       	subi	r17, 0xFF	; 255
    3a46:	0f 5f       	subi	r16, 0xFF	; 255
        if(i != 0)
    3a48:	11 11       	cpse	r17, r1
    3a4a:	e7 cf       	rjmp	.-50     	; 0x3a1a <send_USSD+0x50>
        uart_flush();
    3a4c:	0e 94 ac 2e 	call	0x5d58	; 0x5d58 <uart_flush>
        uart_send_str_p(PSTR("AT+CUSD=1,\"*101#\"\r\n"));
    3a50:	8b e8       	ldi	r24, 0x8B	; 139
    3a52:	91 e0       	ldi	r25, 0x01	; 1
    3a54:	0e 94 94 2e 	call	0x5d28	; 0x5d28 <uart_send_str_p>
        if(mdm_wait_cmd_ms(7000, (const char*)RESPON_OK))
    3a58:	64 ec       	ldi	r22, 0xC4	; 196
    3a5a:	72 e0       	ldi	r23, 0x02	; 2
    3a5c:	88 e5       	ldi	r24, 0x58	; 88
    3a5e:	9b e1       	ldi	r25, 0x1B	; 27
    3a60:	0e 94 cd 12 	call	0x259a	; 0x259a <mdm_wait_cmd_ms>
    3a64:	88 23       	and	r24, r24
    3a66:	71 f3       	breq	.-36     	; 0x3a44 <send_USSD+0x7a>
            timeout = get_time_s() + 30;
    3a68:	0e 94 29 2c 	call	0x5852	; 0x5852 <get_time_s>
    3a6c:	2b 01       	movw	r4, r22
    3a6e:	3c 01       	movw	r6, r24
    3a70:	fe e1       	ldi	r31, 0x1E	; 30
    3a72:	4f 0e       	add	r4, r31
    3a74:	51 1c       	adc	r5, r1
    3a76:	61 1c       	adc	r6, r1
    3a78:	71 1c       	adc	r7, r1
            softuart_puts_p(PSTR("ussd send ok"));
    3a7a:	8e e7       	ldi	r24, 0x7E	; 126
    3a7c:	91 e0       	ldi	r25, 0x01	; 1
    3a7e:	0e 94 45 28 	call	0x508a	; 0x508a <softuart_puts_p>
    if(i >= 3)
    3a82:	10 c0       	rjmp	.+32     	; 0x3aa4 <send_USSD+0xda>
            timeout = get_time_s() + 30;
    3a84:	0e 94 29 2c 	call	0x5852	; 0x5852 <get_time_s>
    3a88:	2b 01       	movw	r4, r22
    3a8a:	3c 01       	movw	r6, r24
    3a8c:	8e e1       	ldi	r24, 0x1E	; 30
    3a8e:	48 0e       	add	r4, r24
    3a90:	51 1c       	adc	r5, r1
    3a92:	61 1c       	adc	r6, r1
    3a94:	71 1c       	adc	r7, r1
            softuart_puts_p(PSTR("ussd send ok"));
    3a96:	8e e7       	ldi	r24, 0x7E	; 126
    3a98:	91 e0       	ldi	r25, 0x01	; 1
    3a9a:	0e 94 45 28 	call	0x508a	; 0x508a <softuart_puts_p>
    if(i >= 3)
    3a9e:	13 30       	cpi	r17, 0x03	; 3
    3aa0:	08 f0       	brcs	.+2      	; 0x3aa4 <send_USSD+0xda>
    3aa2:	44 c0       	rjmp	.+136    	; 0x3b2c <send_USSD+0x162>
    3aa4:	5e 01       	movw	r10, r28
    3aa6:	e1 e6       	ldi	r30, 0x61	; 97
    3aa8:	ae 0e       	add	r10, r30
    3aaa:	b1 1c       	adc	r11, r1
                        dst[numOut]=0xD1;    //	Симолы 'р-я'     - 04 64 - 04 79  =>  209 128 - 209 143
    3aac:	0f 2e       	mov	r0, r31
    3aae:	f1 ed       	ldi	r31, 0xD1	; 209
    3ab0:	8f 2e       	mov	r8, r31
    3ab2:	f0 2d       	mov	r31, r0
                        dst[numOut]=0xD0;
    3ab4:	0f 2e       	mov	r0, r31
    3ab6:	f0 ed       	ldi	r31, 0xD0	; 208
    3ab8:	9f 2e       	mov	r9, r31
    3aba:	f0 2d       	mov	r31, r0
    while(get_time_s() < timeout)
    3abc:	0e 94 29 2c 	call	0x5852	; 0x5852 <get_time_s>
    3ac0:	a2 96       	adiw	r28, 0x22	; 34
    3ac2:	6c af       	std	Y+60, r22	; 0x3c
    3ac4:	7d af       	std	Y+61, r23	; 0x3d
    3ac6:	8e af       	std	Y+62, r24	; 0x3e
    3ac8:	9f af       	std	Y+63, r25	; 0x3f
    3aca:	a2 97       	sbiw	r28, 0x22	; 34
    3acc:	64 15       	cp	r22, r4
    3ace:	75 05       	cpc	r23, r5
    3ad0:	86 05       	cpc	r24, r6
    3ad2:	97 05       	cpc	r25, r7
    3ad4:	08 f0       	brcs	.+2      	; 0x3ad8 <send_USSD+0x10e>
    3ad6:	3c c1       	rjmp	.+632    	; 0x3d50 <send_USSD+0x386>
        ptr = gsm_poll_for_string();
    3ad8:	0e 94 20 11 	call	0x2240	; 0x2240 <gsm_poll_for_string>
    3adc:	08 2f       	mov	r16, r24
    3ade:	19 2f       	mov	r17, r25
        if(ptr)
    3ae0:	01 15       	cp	r16, r1
    3ae2:	11 05       	cpc	r17, r1
    3ae4:	59 f3       	breq	.-42     	; 0x3abc <send_USSD+0xf2>
            if(strstr_P(ptr, PSTR("+CUSD:")))
    3ae6:	67 e7       	ldi	r22, 0x77	; 119
    3ae8:	71 e0       	ldi	r23, 0x01	; 1
    3aea:	c8 01       	movw	r24, r16
    3aec:	0e 94 aa 33 	call	0x6754	; 0x6754 <strstr_P>
    3af0:	89 2b       	or	r24, r25
    3af2:	21 f3       	breq	.-56     	; 0x3abc <send_USSD+0xf2>
                ptr = strchr(ptr, '"');
    3af4:	62 e2       	ldi	r22, 0x22	; 34
    3af6:	70 e0       	ldi	r23, 0x00	; 0
    3af8:	c8 01       	movw	r24, r16
    3afa:	06 96       	adiw	r24, 0x06	; 6
    3afc:	0e 94 ef 33 	call	0x67de	; 0x67de <strchr>
    3b00:	c8 2e       	mov	r12, r24
    3b02:	d9 2e       	mov	r13, r25
                if(!ptr)
    3b04:	c1 14       	cp	r12, r1
    3b06:	d1 04       	cpc	r13, r1
    3b08:	c9 f2       	breq	.-78     	; 0x3abc <send_USSD+0xf2>
                ptr++;
    3b0a:	9f ef       	ldi	r25, 0xFF	; 255
    3b0c:	c9 1a       	sub	r12, r25
    3b0e:	d9 0a       	sbc	r13, r25
                memmove(temp_ussd, ptr, 92);
    3b10:	8c e5       	ldi	r24, 0x5C	; 92
    3b12:	f6 01       	movw	r30, r12
    3b14:	de 01       	movw	r26, r28
    3b16:	11 96       	adiw	r26, 0x01	; 1
    3b18:	01 90       	ld	r0, Z+
    3b1a:	0d 92       	st	X+, r0
    3b1c:	8a 95       	dec	r24
    3b1e:	e1 f7       	brne	.-8      	; 0x3b18 <send_USSD+0x14e>
    while(numIn<len)
    3b20:	8e 01       	movw	r16, r28
    3b22:	0f 5f       	subi	r16, 0xFF	; 255
    3b24:	1f 4f       	sbci	r17, 0xFF	; 255
    uint16_t numOut   = 0;
    3b26:	f1 2c       	mov	r15, r1
    3b28:	e1 2c       	mov	r14, r1
    3b2a:	28 c0       	rjmp	.+80     	; 0x3b7c <send_USSD+0x1b2>
        flag_busy_mdm = FREE_MODEM;
    3b2c:	10 92 cc 03 	sts	0x03CC, r1	; 0x8003cc <flag_busy_mdm>
        delay_ms(100);
    3b30:	84 e6       	ldi	r24, 0x64	; 100
    3b32:	90 e0       	ldi	r25, 0x00	; 0
    3b34:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
        return 0;
    3b38:	80 e0       	ldi	r24, 0x00	; 0
    3b3a:	c3 c0       	rjmp	.+390    	; 0x3cc2 <send_USSD+0x2f8>
            if(byteNext==0x01)
    3b3c:	81 30       	cpi	r24, 0x01	; 1
    3b3e:	81 f0       	breq	.+32     	; 0x3b60 <send_USSD+0x196>
                if(byteNext==0x51)
    3b40:	81 35       	cpi	r24, 0x51	; 81
    3b42:	09 f4       	brne	.+2      	; 0x3b46 <send_USSD+0x17c>
    3b44:	42 c0       	rjmp	.+132    	; 0x3bca <send_USSD+0x200>
                    if(byteNext< 0x40)
    3b46:	80 34       	cpi	r24, 0x40	; 64
    3b48:	08 f0       	brcs	.+2      	; 0x3b4c <send_USSD+0x182>
    3b4a:	49 c0       	rjmp	.+146    	; 0x3bde <send_USSD+0x214>
                        dst[numOut]=0xD0;
    3b4c:	f6 01       	movw	r30, r12
    3b4e:	ee 0d       	add	r30, r14
    3b50:	ff 1d       	adc	r31, r15
    3b52:	90 82       	st	Z, r9
                        dst[numOut]=byteNext+0x80;
    3b54:	80 58       	subi	r24, 0x80	; 128
    3b56:	81 83       	std	Z+1, r24	; 0x01
                        numOut++;
    3b58:	e2 e0       	ldi	r30, 0x02	; 2
    3b5a:	ee 0e       	add	r14, r30
    3b5c:	f1 1c       	adc	r15, r1
    3b5e:	09 c0       	rjmp	.+18     	; 0x3b72 <send_USSD+0x1a8>
                dst[numOut]=0xD0;
    3b60:	f6 01       	movw	r30, r12
    3b62:	ee 0d       	add	r30, r14
    3b64:	ff 1d       	adc	r31, r15
    3b66:	90 82       	st	Z, r9
                dst[numOut]=byteNext+0x80;
    3b68:	81 e8       	ldi	r24, 0x81	; 129
    3b6a:	81 83       	std	Z+1, r24	; 0x01
                numOut++;
    3b6c:	92 e0       	ldi	r25, 0x02	; 2
    3b6e:	e9 0e       	add	r14, r25
    3b70:	f1 1c       	adc	r15, r1
    while(numIn<len)
    3b72:	0c 5f       	subi	r16, 0xFC	; 252
    3b74:	1f 4f       	sbci	r17, 0xFF	; 255
    3b76:	0a 15       	cp	r16, r10
    3b78:	1b 05       	cpc	r17, r11
    3b7a:	d9 f1       	breq	.+118    	; 0x3bf2 <send_USSD+0x228>
        byteThis = hex_to_char(src[pos+numIn])*16 + hex_to_char(src[pos+numIn+1]);
    3b7c:	d8 01       	movw	r26, r16
    3b7e:	8c 91       	ld	r24, X
    3b80:	0e 94 0b 11 	call	0x2216	; 0x2216 <hex_to_char>
    3b84:	28 2e       	mov	r2, r24
    3b86:	f8 01       	movw	r30, r16
    3b88:	81 81       	ldd	r24, Z+1	; 0x01
    3b8a:	0e 94 0b 11 	call	0x2216	; 0x2216 <hex_to_char>
    3b8e:	22 0c       	add	r2, r2
    3b90:	22 0c       	add	r2, r2
    3b92:	22 0c       	add	r2, r2
    3b94:	22 0c       	add	r2, r2
    3b96:	28 0e       	add	r2, r24
        byteNext = hex_to_char(src[pos+numIn])*16 + hex_to_char(src[pos+numIn+1]);
    3b98:	d8 01       	movw	r26, r16
    3b9a:	12 96       	adiw	r26, 0x02	; 2
    3b9c:	8c 91       	ld	r24, X
    3b9e:	0e 94 0b 11 	call	0x2216	; 0x2216 <hex_to_char>
    3ba2:	38 2e       	mov	r3, r24
    3ba4:	f8 01       	movw	r30, r16
    3ba6:	83 81       	ldd	r24, Z+3	; 0x03
    3ba8:	0e 94 0b 11 	call	0x2216	; 0x2216 <hex_to_char>
    3bac:	33 0c       	add	r3, r3
    3bae:	33 0c       	add	r3, r3
    3bb0:	33 0c       	add	r3, r3
    3bb2:	33 0c       	add	r3, r3
    3bb4:	83 0d       	add	r24, r3
        if(byteThis==0x00)
    3bb6:	21 10       	cpse	r2, r1
    3bb8:	c1 cf       	rjmp	.-126    	; 0x3b3c <send_USSD+0x172>
            dst[numOut]=byteNext;
    3bba:	f6 01       	movw	r30, r12
    3bbc:	ee 0d       	add	r30, r14
    3bbe:	ff 1d       	adc	r31, r15
    3bc0:	80 83       	st	Z, r24
            numOut++;
    3bc2:	ff ef       	ldi	r31, 0xFF	; 255
    3bc4:	ef 1a       	sub	r14, r31
    3bc6:	ff 0a       	sbc	r15, r31
    3bc8:	d4 cf       	rjmp	.-88     	; 0x3b72 <send_USSD+0x1a8>
                    dst[numOut]=0xD1;
    3bca:	f6 01       	movw	r30, r12
    3bcc:	ee 0d       	add	r30, r14
    3bce:	ff 1d       	adc	r31, r15
    3bd0:	80 82       	st	Z, r8
                    dst[numOut]=byteNext+0x40;
    3bd2:	a1 e9       	ldi	r26, 0x91	; 145
    3bd4:	a1 83       	std	Z+1, r26	; 0x01
                    numOut++;
    3bd6:	b2 e0       	ldi	r27, 0x02	; 2
    3bd8:	eb 0e       	add	r14, r27
    3bda:	f1 1c       	adc	r15, r1
    3bdc:	ca cf       	rjmp	.-108    	; 0x3b72 <send_USSD+0x1a8>
                        dst[numOut]=0xD1;    //	Симолы 'р-я'     - 04 64 - 04 79  =>  209 128 - 209 143
    3bde:	f6 01       	movw	r30, r12
    3be0:	ee 0d       	add	r30, r14
    3be2:	ff 1d       	adc	r31, r15
    3be4:	80 82       	st	Z, r8
                        dst[numOut]=byteNext+0x40;
    3be6:	80 5c       	subi	r24, 0xC0	; 192
    3be8:	81 83       	std	Z+1, r24	; 0x01
                        numOut++;
    3bea:	f2 e0       	ldi	r31, 0x02	; 2
    3bec:	ef 0e       	add	r14, r31
    3bee:	f1 1c       	adc	r15, r1
    3bf0:	c0 cf       	rjmp	.-128    	; 0x3b72 <send_USSD+0x1a8>
    dst[numOut]=0;																									//
    3bf2:	f6 01       	movw	r30, r12
    3bf4:	ee 0d       	add	r30, r14
    3bf6:	ff 1d       	adc	r31, r15
    3bf8:	10 82       	st	Z, r1
                ptr = strchr(ptr, ' ');
    3bfa:	60 e2       	ldi	r22, 0x20	; 32
    3bfc:	70 e0       	ldi	r23, 0x00	; 0
    3bfe:	c6 01       	movw	r24, r12
    3c00:	0e 94 ef 33 	call	0x67de	; 0x67de <strchr>
    3c04:	28 2f       	mov	r18, r24
    3c06:	39 2f       	mov	r19, r25
                if(ptr)
    3c08:	21 15       	cp	r18, r1
    3c0a:	31 05       	cpc	r19, r1
    3c0c:	09 f4       	brne	.+2      	; 0x3c10 <send_USSD+0x246>
    3c0e:	56 cf       	rjmp	.-340    	; 0x3abc <send_USSD+0xf2>
                    ptr = strchr(ptr, ' ');
    3c10:	60 e2       	ldi	r22, 0x20	; 32
    3c12:	70 e0       	ldi	r23, 0x00	; 0
    3c14:	c9 01       	movw	r24, r18
    3c16:	01 96       	adiw	r24, 0x01	; 1
    3c18:	0e 94 ef 33 	call	0x67de	; 0x67de <strchr>
    3c1c:	08 2f       	mov	r16, r24
    3c1e:	19 2f       	mov	r17, r25
                    if(ptr)
    3c20:	01 15       	cp	r16, r1
    3c22:	11 05       	cpc	r17, r1
    3c24:	09 f4       	brne	.+2      	; 0x3c28 <send_USSD+0x25e>
    3c26:	4a cf       	rjmp	.-364    	; 0x3abc <send_USSD+0xf2>
                        ptr++;
    3c28:	0f 5f       	subi	r16, 0xFF	; 255
    3c2a:	1f 4f       	sbci	r17, 0xFF	; 255
    for( i = 0; i < strlen(p_src) && p_src[i]!=end_ch; i++) {;}
    3c2c:	d8 01       	movw	r26, r16
    3c2e:	0d 90       	ld	r0, X+
    3c30:	00 20       	and	r0, r0
    3c32:	e9 f7       	brne	.-6      	; 0x3c2e <send_USSD+0x264>
    3c34:	9d 01       	movw	r18, r26
    3c36:	21 50       	subi	r18, 0x01	; 1
    3c38:	31 09       	sbc	r19, r1
    3c3a:	20 1b       	sub	r18, r16
    3c3c:	31 0b       	sbc	r19, r17
    3c3e:	80 e0       	ldi	r24, 0x00	; 0
    3c40:	01 c0       	rjmp	.+2      	; 0x3c44 <send_USSD+0x27a>
    3c42:	8f 5f       	subi	r24, 0xFF	; 255
    3c44:	48 2f       	mov	r20, r24
    3c46:	50 e0       	ldi	r21, 0x00	; 0
    3c48:	42 17       	cp	r20, r18
    3c4a:	53 07       	cpc	r21, r19
    3c4c:	30 f4       	brcc	.+12     	; 0x3c5a <send_USSD+0x290>
    3c4e:	f8 01       	movw	r30, r16
    3c50:	e4 0f       	add	r30, r20
    3c52:	f5 1f       	adc	r31, r21
    3c54:	90 81       	ld	r25, Z
    3c56:	90 32       	cpi	r25, 0x20	; 32
    3c58:	a1 f7       	brne	.-24     	; 0x3c42 <send_USSD+0x278>
                if(cnt_ch > 7)
    3c5a:	88 30       	cpi	r24, 0x08	; 8
    3c5c:	08 f0       	brcs	.+2      	; 0x3c60 <send_USSD+0x296>
    3c5e:	4b c0       	rjmp	.+150    	; 0x3cf6 <send_USSD+0x32c>
                memmove(arr_dep, ptr, cnt_ch);
    3c60:	b8 01       	movw	r22, r16
    3c62:	82 ed       	ldi	r24, 0xD2	; 210
    3c64:	93 e0       	ldi	r25, 0x03	; 3
    3c66:	0e 94 d6 33 	call	0x67ac	; 0x67ac <memmove>
                ptr = strtok(ptr, ".");
    3c6a:	67 e3       	ldi	r22, 0x37	; 55
    3c6c:	72 e0       	ldi	r23, 0x02	; 2
    3c6e:	c8 01       	movw	r24, r16
    3c70:	0e 94 c4 33 	call	0x6788	; 0x6788 <strtok>
    3c74:	08 2f       	mov	r16, r24
    3c76:	19 2f       	mov	r17, r25
                if(!ptr)
    3c78:	01 15       	cp	r16, r1
    3c7a:	11 05       	cpc	r17, r1
    3c7c:	09 f4       	brne	.+2      	; 0x3c80 <send_USSD+0x2b6>
    3c7e:	4b c0       	rjmp	.+150    	; 0x3d16 <send_USSD+0x34c>
                softuart_puts_ln(arr_dep);
    3c80:	82 ed       	ldi	r24, 0xD2	; 210
    3c82:	93 e0       	ldi	r25, 0x03	; 3
    3c84:	0e 94 31 28 	call	0x5062	; 0x5062 <softuart_puts_ln>
                deposit = atoi(ptr);
    3c88:	c8 01       	movw	r24, r16
    3c8a:	0e 94 6d 33 	call	0x66da	; 0x66da <atoi>
    3c8e:	28 2f       	mov	r18, r24
    3c90:	39 2f       	mov	r19, r25
    3c92:	30 93 d1 03 	sts	0x03D1, r19	; 0x8003d1 <deposit+0x1>
    3c96:	20 93 d0 03 	sts	0x03D0, r18	; 0x8003d0 <deposit>
                if(deposit <= 0)
    3c9a:	12 16       	cp	r1, r18
    3c9c:	13 06       	cpc	r1, r19
    3c9e:	0c f0       	brlt	.+2      	; 0x3ca2 <send_USSD+0x2d8>
    3ca0:	4a c0       	rjmp	.+148    	; 0x3d36 <send_USSD+0x36c>
                else if(deposit < 10)
    3ca2:	2a 30       	cpi	r18, 0x0A	; 10
    3ca4:	31 05       	cpc	r19, r1
    3ca6:	34 f4       	brge	.+12     	; 0x3cb4 <send_USSD+0x2ea>
                    if(_flag_sms == 1)
    3ca8:	a3 96       	adiw	r28, 0x23	; 35
    3caa:	bf ad       	ldd	r27, Y+63	; 0x3f
    3cac:	a3 97       	sbiw	r28, 0x23	; 35
    3cae:	b1 30       	cpi	r27, 0x01	; 1
    3cb0:	09 f4       	brne	.+2      	; 0x3cb4 <send_USSD+0x2ea>
    3cb2:	49 c0       	rjmp	.+146    	; 0x3d46 <send_USSD+0x37c>
                flag_busy_mdm = FREE_MODEM;
    3cb4:	10 92 cc 03 	sts	0x03CC, r1	; 0x8003cc <flag_busy_mdm>
                delay_ms(100);
    3cb8:	84 e6       	ldi	r24, 0x64	; 100
    3cba:	90 e0       	ldi	r25, 0x00	; 0
    3cbc:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
                return 1;
    3cc0:	81 e0       	ldi	r24, 0x01	; 1
}
    3cc2:	ce 59       	subi	r28, 0x9E	; 158
    3cc4:	df 4f       	sbci	r29, 0xFF	; 255
    3cc6:	0f b6       	in	r0, 0x3f	; 63
    3cc8:	f8 94       	cli
    3cca:	de bf       	out	0x3e, r29	; 62
    3ccc:	0f be       	out	0x3f, r0	; 63
    3cce:	cd bf       	out	0x3d, r28	; 61
    3cd0:	df 91       	pop	r29
    3cd2:	cf 91       	pop	r28
    3cd4:	1f 91       	pop	r17
    3cd6:	0f 91       	pop	r16
    3cd8:	ff 90       	pop	r15
    3cda:	ef 90       	pop	r14
    3cdc:	df 90       	pop	r13
    3cde:	cf 90       	pop	r12
    3ce0:	bf 90       	pop	r11
    3ce2:	af 90       	pop	r10
    3ce4:	9f 90       	pop	r9
    3ce6:	8f 90       	pop	r8
    3ce8:	7f 90       	pop	r7
    3cea:	6f 90       	pop	r6
    3cec:	5f 90       	pop	r5
    3cee:	4f 90       	pop	r4
    3cf0:	3f 90       	pop	r3
    3cf2:	2f 90       	pop	r2
    3cf4:	08 95       	ret
                    memcpy_P(arr_dep, PSTR("err"), 3);
    3cf6:	43 e0       	ldi	r20, 0x03	; 3
    3cf8:	50 e0       	ldi	r21, 0x00	; 0
    3cfa:	63 e7       	ldi	r22, 0x73	; 115
    3cfc:	71 e0       	ldi	r23, 0x01	; 1
    3cfe:	82 ed       	ldi	r24, 0xD2	; 210
    3d00:	93 e0       	ldi	r25, 0x03	; 3
    3d02:	0e 94 a1 33 	call	0x6742	; 0x6742 <memcpy_P>
                    flag_busy_mdm = FREE_MODEM;
    3d06:	10 92 cc 03 	sts	0x03CC, r1	; 0x8003cc <flag_busy_mdm>
                    delay_ms(100);
    3d0a:	84 e6       	ldi	r24, 0x64	; 100
    3d0c:	90 e0       	ldi	r25, 0x00	; 0
    3d0e:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
                    return 0;
    3d12:	80 e0       	ldi	r24, 0x00	; 0
    3d14:	d6 cf       	rjmp	.-84     	; 0x3cc2 <send_USSD+0x2f8>
                    memcpy_P(arr_dep, PSTR("err"), 3);
    3d16:	43 e0       	ldi	r20, 0x03	; 3
    3d18:	50 e0       	ldi	r21, 0x00	; 0
    3d1a:	6f e6       	ldi	r22, 0x6F	; 111
    3d1c:	71 e0       	ldi	r23, 0x01	; 1
    3d1e:	82 ed       	ldi	r24, 0xD2	; 210
    3d20:	93 e0       	ldi	r25, 0x03	; 3
    3d22:	0e 94 a1 33 	call	0x6742	; 0x6742 <memcpy_P>
                    flag_busy_mdm = FREE_MODEM;
    3d26:	10 92 cc 03 	sts	0x03CC, r1	; 0x8003cc <flag_busy_mdm>
                    delay_ms(100);
    3d2a:	84 e6       	ldi	r24, 0x64	; 100
    3d2c:	90 e0       	ldi	r25, 0x00	; 0
    3d2e:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
                    return 0;
    3d32:	80 e0       	ldi	r24, 0x00	; 0
    3d34:	c6 cf       	rjmp	.-116    	; 0x3cc2 <send_USSD+0x2f8>
                    flag_busy_mdm = FREE_MODEM;
    3d36:	10 92 cc 03 	sts	0x03CC, r1	; 0x8003cc <flag_busy_mdm>
                    delay_ms(100);
    3d3a:	84 e6       	ldi	r24, 0x64	; 100
    3d3c:	90 e0       	ldi	r25, 0x00	; 0
    3d3e:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
                    return 0;
    3d42:	80 e0       	ldi	r24, 0x00	; 0
    3d44:	be cf       	rjmp	.-132    	; 0x3cc2 <send_USSD+0x2f8>
                        send_sms_admins(PSTR( "Deposit < 10 RUB" ));
    3d46:	8e e5       	ldi	r24, 0x5E	; 94
    3d48:	91 e0       	ldi	r25, 0x01	; 1
    3d4a:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <send_sms_admins>
    3d4e:	b2 cf       	rjmp	.-156    	; 0x3cb4 <send_USSD+0x2ea>
    memcpy_P(arr_dep, PSTR("err"), 3);
    3d50:	43 e0       	ldi	r20, 0x03	; 3
    3d52:	50 e0       	ldi	r21, 0x00	; 0
    3d54:	6a e5       	ldi	r22, 0x5A	; 90
    3d56:	71 e0       	ldi	r23, 0x01	; 1
    3d58:	82 ed       	ldi	r24, 0xD2	; 210
    3d5a:	93 e0       	ldi	r25, 0x03	; 3
    3d5c:	0e 94 a1 33 	call	0x6742	; 0x6742 <memcpy_P>
    flag_busy_mdm = FREE_MODEM;
    3d60:	10 92 cc 03 	sts	0x03CC, r1	; 0x8003cc <flag_busy_mdm>
    delay_ms(100);
    3d64:	84 e6       	ldi	r24, 0x64	; 100
    3d66:	90 e0       	ldi	r25, 0x00	; 0
    3d68:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
    return 0;
    3d6c:	80 e0       	ldi	r24, 0x00	; 0
    3d6e:	a9 cf       	rjmp	.-174    	; 0x3cc2 <send_USSD+0x2f8>

00003d70 <check_deposit>:
{
    3d70:	cf 93       	push	r28
    3d72:	df 93       	push	r29
    3d74:	00 d0       	rcall	.+0      	; 0x3d76 <check_deposit+0x6>
    3d76:	00 d0       	rcall	.+0      	; 0x3d78 <check_deposit+0x8>
    3d78:	cd b7       	in	r28, 0x3d	; 61
    3d7a:	de b7       	in	r29, 0x3e	; 62
    if(get_time_m() > (last_check_balance + 1440))//1440 min = 24h
    3d7c:	0e 94 49 2c 	call	0x5892	; 0x5892 <get_time_m>
    3d80:	69 83       	std	Y+1, r22	; 0x01
    3d82:	7a 83       	std	Y+2, r23	; 0x02
    3d84:	8b 83       	std	Y+3, r24	; 0x03
    3d86:	9c 83       	std	Y+4, r25	; 0x04
    3d88:	80 91 c3 03 	lds	r24, 0x03C3	; 0x8003c3 <last_check_balance.33>
    3d8c:	90 91 c4 03 	lds	r25, 0x03C4	; 0x8003c4 <last_check_balance.33+0x1>
    3d90:	a0 91 c5 03 	lds	r26, 0x03C5	; 0x8003c5 <last_check_balance.33+0x2>
    3d94:	b0 91 c6 03 	lds	r27, 0x03C6	; 0x8003c6 <last_check_balance.33+0x3>
    3d98:	80 56       	subi	r24, 0x60	; 96
    3d9a:	9a 4f       	sbci	r25, 0xFA	; 250
    3d9c:	af 4f       	sbci	r26, 0xFF	; 255
    3d9e:	bf 4f       	sbci	r27, 0xFF	; 255
    3da0:	29 81       	ldd	r18, Y+1	; 0x01
    3da2:	3a 81       	ldd	r19, Y+2	; 0x02
    3da4:	4b 81       	ldd	r20, Y+3	; 0x03
    3da6:	5c 81       	ldd	r21, Y+4	; 0x04
    3da8:	82 17       	cp	r24, r18
    3daa:	93 07       	cpc	r25, r19
    3dac:	a4 07       	cpc	r26, r20
    3dae:	b5 07       	cpc	r27, r21
    3db0:	38 f0       	brcs	.+14     	; 0x3dc0 <check_deposit+0x50>
}
    3db2:	0f 90       	pop	r0
    3db4:	0f 90       	pop	r0
    3db6:	0f 90       	pop	r0
    3db8:	0f 90       	pop	r0
    3dba:	df 91       	pop	r29
    3dbc:	cf 91       	pop	r28
    3dbe:	08 95       	ret
        if(send_USSD(1) == 0)
    3dc0:	81 e0       	ldi	r24, 0x01	; 1
    3dc2:	0e 94 e5 1c 	call	0x39ca	; 0x39ca <send_USSD>
    3dc6:	81 11       	cpse	r24, r1
    3dc8:	14 c0       	rjmp	.+40     	; 0x3df2 <check_deposit+0x82>
            last_check_balance += 60;
    3dca:	80 91 c3 03 	lds	r24, 0x03C3	; 0x8003c3 <last_check_balance.33>
    3dce:	90 91 c4 03 	lds	r25, 0x03C4	; 0x8003c4 <last_check_balance.33+0x1>
    3dd2:	a0 91 c5 03 	lds	r26, 0x03C5	; 0x8003c5 <last_check_balance.33+0x2>
    3dd6:	b0 91 c6 03 	lds	r27, 0x03C6	; 0x8003c6 <last_check_balance.33+0x3>
    3dda:	cc 96       	adiw	r24, 0x3c	; 60
    3ddc:	a1 1d       	adc	r26, r1
    3dde:	b1 1d       	adc	r27, r1
    3de0:	80 93 c3 03 	sts	0x03C3, r24	; 0x8003c3 <last_check_balance.33>
    3de4:	90 93 c4 03 	sts	0x03C4, r25	; 0x8003c4 <last_check_balance.33+0x1>
    3de8:	a0 93 c5 03 	sts	0x03C5, r26	; 0x8003c5 <last_check_balance.33+0x2>
    3dec:	b0 93 c6 03 	sts	0x03C6, r27	; 0x8003c6 <last_check_balance.33+0x3>
            return;
    3df0:	e0 cf       	rjmp	.-64     	; 0x3db2 <check_deposit+0x42>
        last_check_balance = get_time_m();
    3df2:	0e 94 49 2c 	call	0x5892	; 0x5892 <get_time_m>
    3df6:	60 93 c3 03 	sts	0x03C3, r22	; 0x8003c3 <last_check_balance.33>
    3dfa:	70 93 c4 03 	sts	0x03C4, r23	; 0x8003c4 <last_check_balance.33+0x1>
    3dfe:	80 93 c5 03 	sts	0x03C5, r24	; 0x8003c5 <last_check_balance.33+0x2>
    3e02:	90 93 c6 03 	sts	0x03C6, r25	; 0x8003c6 <last_check_balance.33+0x3>
    3e06:	d5 cf       	rjmp	.-86     	; 0x3db2 <check_deposit+0x42>

00003e08 <top_up_balance>:
{
    3e08:	cf 92       	push	r12
    3e0a:	df 92       	push	r13
    3e0c:	ef 92       	push	r14
    3e0e:	ff 92       	push	r15
    3e10:	1f 93       	push	r17
    3e12:	cf 93       	push	r28
    3e14:	df 93       	push	r29
    3e16:	00 d0       	rcall	.+0      	; 0x3e18 <top_up_balance+0x10>
    3e18:	00 d0       	rcall	.+0      	; 0x3e1a <top_up_balance+0x12>
    3e1a:	0f 92       	push	r0
    3e1c:	cd b7       	in	r28, 0x3d	; 61
    3e1e:	de b7       	in	r29, 0x3e	; 62
    3e20:	18 2f       	mov	r17, r24
    3e22:	9d 83       	std	Y+5, r25	; 0x05
    uint32_t timeout = get_time_s() + 20;
    3e24:	0e 94 29 2c 	call	0x5852	; 0x5852 <get_time_s>
    3e28:	6b 01       	movw	r12, r22
    3e2a:	7c 01       	movw	r14, r24
    3e2c:	84 e1       	ldi	r24, 0x14	; 20
    3e2e:	c8 0e       	add	r12, r24
    3e30:	d1 1c       	adc	r13, r1
    3e32:	e1 1c       	adc	r14, r1
    3e34:	f1 1c       	adc	r15, r1
    flag_busy_mdm = BUSY_MODEM;
    3e36:	81 e0       	ldi	r24, 0x01	; 1
    3e38:	80 93 cc 03 	sts	0x03CC, r24	; 0x8003cc <flag_busy_mdm>
    delay_ms(100);
    3e3c:	84 e6       	ldi	r24, 0x64	; 100
    3e3e:	90 e0       	ldi	r25, 0x00	; 0
    3e40:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
    for(i = 0; i <= 5; i++)
    3e44:	19 82       	std	Y+1, r1	; 0x01
        uart_flush();
    3e46:	0e 94 ac 2e 	call	0x5d58	; 0x5d58 <uart_flush>
        uart_send_str_p(PSTR("AT+CUSD=1,\""));
    3e4a:	8e e4       	ldi	r24, 0x4E	; 78
    3e4c:	91 e0       	ldi	r25, 0x01	; 1
    3e4e:	0e 94 94 2e 	call	0x5d28	; 0x5d28 <uart_send_str_p>
        uart_send_str(code);
    3e52:	81 2f       	mov	r24, r17
    3e54:	9d 81       	ldd	r25, Y+5	; 0x05
    3e56:	0e 94 76 2e 	call	0x5cec	; 0x5cec <uart_send_str>
        uart_send_str_p(PSTR("#\",15\r\n"));
    3e5a:	86 e4       	ldi	r24, 0x46	; 70
    3e5c:	91 e0       	ldi	r25, 0x01	; 1
    3e5e:	0e 94 94 2e 	call	0x5d28	; 0x5d28 <uart_send_str_p>
        if(mdm_wait_cmd_ms(2000, (const char*)RESPON_OK))
    3e62:	64 ec       	ldi	r22, 0xC4	; 196
    3e64:	72 e0       	ldi	r23, 0x02	; 2
    3e66:	80 ed       	ldi	r24, 0xD0	; 208
    3e68:	97 e0       	ldi	r25, 0x07	; 7
    3e6a:	0e 94 cd 12 	call	0x259a	; 0x259a <mdm_wait_cmd_ms>
    3e6e:	81 11       	cpse	r24, r1
    3e70:	0d c0       	rjmp	.+26     	; 0x3e8c <top_up_balance+0x84>
    for(i = 0; i <= 5; i++)
    3e72:	a9 81       	ldd	r26, Y+1	; 0x01
    3e74:	af 5f       	subi	r26, 0xFF	; 255
    3e76:	a9 83       	std	Y+1, r26	; 0x01
    3e78:	a6 30       	cpi	r26, 0x06	; 6
    3e7a:	b1 f1       	breq	.+108    	; 0x3ee8 <top_up_balance+0xe0>
        if(i != 0)
    3e7c:	99 81       	ldd	r25, Y+1	; 0x01
    3e7e:	99 23       	and	r25, r25
    3e80:	11 f3       	breq	.-60     	; 0x3e46 <top_up_balance+0x3e>
            delay_ms(300);
    3e82:	8c e2       	ldi	r24, 0x2C	; 44
    3e84:	91 e0       	ldi	r25, 0x01	; 1
    3e86:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
    3e8a:	dd cf       	rjmp	.-70     	; 0x3e46 <top_up_balance+0x3e>
    if(i >= 5)
    3e8c:	b9 81       	ldd	r27, Y+1	; 0x01
    3e8e:	b5 30       	cpi	r27, 0x05	; 5
    3e90:	58 f5       	brcc	.+86     	; 0x3ee8 <top_up_balance+0xe0>
    while(get_time_s() < timeout)
    3e92:	0e 94 29 2c 	call	0x5852	; 0x5852 <get_time_s>
    3e96:	6c 15       	cp	r22, r12
    3e98:	7d 05       	cpc	r23, r13
    3e9a:	8e 05       	cpc	r24, r14
    3e9c:	9f 05       	cpc	r25, r15
    3e9e:	88 f4       	brcc	.+34     	; 0x3ec2 <top_up_balance+0xba>
        ptr = gsm_poll_for_string();
    3ea0:	0e 94 20 11 	call	0x2240	; 0x2240 <gsm_poll_for_string>
    3ea4:	28 2f       	mov	r18, r24
    3ea6:	39 2f       	mov	r19, r25
        if(ptr)
    3ea8:	21 15       	cp	r18, r1
    3eaa:	31 05       	cpc	r19, r1
    3eac:	91 f3       	breq	.-28     	; 0x3e92 <top_up_balance+0x8a>
            if(strstr_P(ptr, PSTR("+CUSD:0")))
    3eae:	6e e3       	ldi	r22, 0x3E	; 62
    3eb0:	71 e0       	ldi	r23, 0x01	; 1
    3eb2:	c9 01       	movw	r24, r18
    3eb4:	0e 94 aa 33 	call	0x6754	; 0x6754 <strstr_P>
    3eb8:	89 2b       	or	r24, r25
    3eba:	59 f3       	breq	.-42     	; 0x3e92 <top_up_balance+0x8a>
                send_USSD(0);
    3ebc:	80 e0       	ldi	r24, 0x00	; 0
    3ebe:	0e 94 e5 1c 	call	0x39ca	; 0x39ca <send_USSD>
    flag_busy_mdm = FREE_MODEM;
    3ec2:	10 92 cc 03 	sts	0x03CC, r1	; 0x8003cc <flag_busy_mdm>
    delay_ms(100);
    3ec6:	84 e6       	ldi	r24, 0x64	; 100
    3ec8:	90 e0       	ldi	r25, 0x00	; 0
    3eca:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
}
    3ece:	0f 90       	pop	r0
    3ed0:	0f 90       	pop	r0
    3ed2:	0f 90       	pop	r0
    3ed4:	0f 90       	pop	r0
    3ed6:	0f 90       	pop	r0
    3ed8:	df 91       	pop	r29
    3eda:	cf 91       	pop	r28
    3edc:	1f 91       	pop	r17
    3ede:	ff 90       	pop	r15
    3ee0:	ef 90       	pop	r14
    3ee2:	df 90       	pop	r13
    3ee4:	cf 90       	pop	r12
    3ee6:	08 95       	ret
        flag_busy_mdm = FREE_MODEM;
    3ee8:	10 92 cc 03 	sts	0x03CC, r1	; 0x8003cc <flag_busy_mdm>
        delay_ms(100);
    3eec:	84 e6       	ldi	r24, 0x64	; 100
    3eee:	90 e0       	ldi	r25, 0x00	; 0
    3ef0:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
        return;
    3ef4:	ec cf       	rjmp	.-40     	; 0x3ece <top_up_balance+0xc6>

00003ef6 <get_error_code1>:
}
    3ef6:	80 91 dd 03 	lds	r24, 0x03DD	; 0x8003dd <error_code1>
    3efa:	08 95       	ret

00003efc <get_error_gsm>:
    return get_val(error_gsm);
    3efc:	2f b7       	in	r18, 0x3f	; 63
    3efe:	f8 94       	cli
    3f00:	80 91 db 03 	lds	r24, 0x03DB	; 0x8003db <error_gsm>
    3f04:	90 91 dc 03 	lds	r25, 0x03DC	; 0x8003dc <error_gsm+0x1>
    3f08:	2f bf       	out	0x3f, r18	; 63
}
    3f0a:	08 95       	ret

00003f0c <set_error_gsm>:
    set_val(error_gsm, _err);
    3f0c:	2f b7       	in	r18, 0x3f	; 63
    3f0e:	f8 94       	cli
    3f10:	80 93 db 03 	sts	0x03DB, r24	; 0x8003db <error_gsm>
    3f14:	90 93 dc 03 	sts	0x03DC, r25	; 0x8003dc <error_gsm+0x1>
    3f18:	2f bf       	out	0x3f, r18	; 63
}
    3f1a:	08 95       	ret

00003f1c <led_gsm>:
    if(registered_in_gsm_network == 1)
    3f1c:	80 91 e1 03 	lds	r24, 0x03E1	; 0x8003e1 <registered_in_gsm_network>
    3f20:	81 30       	cpi	r24, 0x01	; 1
    3f22:	81 f0       	breq	.+32     	; 0x3f44 <led_gsm+0x28>
    else if(registered_in_gsm_network == 0)
    3f24:	81 11       	cpse	r24, r1
    3f26:	0d c0       	rjmp	.+26     	; 0x3f42 <led_gsm+0x26>
        j++;
    3f28:	80 91 b7 03 	lds	r24, 0x03B7	; 0x8003b7 <j.0>
    3f2c:	8f 5f       	subi	r24, 0xFF	; 255
    3f2e:	80 93 b7 03 	sts	0x03B7, r24	; 0x8003b7 <j.0>
        if(j > 50)
    3f32:	83 33       	cpi	r24, 0x33	; 51
    3f34:	30 f0       	brcs	.+12     	; 0x3f42 <led_gsm+0x26>
            DigitalLevelToggle(GREEN_LED);
    3f36:	85 b1       	in	r24, 0x05	; 5
    3f38:	98 e0       	ldi	r25, 0x08	; 8
    3f3a:	89 27       	eor	r24, r25
    3f3c:	85 b9       	out	0x05, r24	; 5
            j = 0;
    3f3e:	10 92 b7 03 	sts	0x03B7, r1	; 0x8003b7 <j.0>
}
    3f42:	08 95       	ret
        DigitalWrite(GREEN_LED, HIGH);
    3f44:	2b 9a       	sbi	0x05, 3	; 5
    3f46:	08 95       	ret

00003f48 <get_phone_number>:
}
    3f48:	82 ee       	ldi	r24, 0xE2	; 226
    3f4a:	93 e0       	ldi	r25, 0x03	; 3
    3f4c:	08 95       	ret

00003f4e <get_arr_dep>:
}
    3f4e:	82 ed       	ldi	r24, 0xD2	; 210
    3f50:	93 e0       	ldi	r25, 0x03	; 3
    3f52:	08 95       	ret

00003f54 <get_registered_in_gsm_network>:
    return 0;
}
//*********************************************************************************
uint8_t get_registered_in_gsm_network(void)
{
    return get_val(registered_in_gsm_network);
    3f54:	9f b7       	in	r25, 0x3f	; 63
    3f56:	f8 94       	cli
    3f58:	80 91 e1 03 	lds	r24, 0x03E1	; 0x8003e1 <registered_in_gsm_network>
    3f5c:	9f bf       	out	0x3f, r25	; 63
}
    3f5e:	08 95       	ret

00003f60 <get_signal_strength>:
//*********************************************************************************
uint8_t get_signal_strength(void)
{
    return get_val(signal_strength);
    3f60:	9f b7       	in	r25, 0x3f	; 63
    3f62:	f8 94       	cli
    3f64:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <signal_strength>
    3f68:	9f bf       	out	0x3f, r25	; 63
}
    3f6a:	08 95       	ret

00003f6c <get_battery_level>:
//*********************************************************************************

uint8_t get_battery_level(void)
{
    return get_val(battery_level);
    3f6c:	9f b7       	in	r25, 0x3f	; 63
    3f6e:	f8 94       	cli
    3f70:	80 91 cd 03 	lds	r24, 0x03CD	; 0x8003cd <battery_level>
    3f74:	9f bf       	out	0x3f, r25	; 63
}
    3f76:	08 95       	ret

00003f78 <get_flag_busy_mdm>:
//***************flag_busy_mdm******************************************************************
uint8_t get_flag_busy_mdm(void)
{
    return get_val(flag_busy_mdm);
    3f78:	9f b7       	in	r25, 0x3f	; 63
    3f7a:	f8 94       	cli
    3f7c:	80 91 cc 03 	lds	r24, 0x03CC	; 0x8003cc <flag_busy_mdm>
    3f80:	9f bf       	out	0x3f, r25	; 63
}
    3f82:	08 95       	ret

00003f84 <main>:
#include "main.h"


int main(void)
{
    _WDT_RESET();
    3f84:	a8 95       	wdr
    WDTCSR = (1<<WDE) | (1<<WDP0) | (1<<WDP3);
    3f86:	89 e2       	ldi	r24, 0x29	; 41
    3f88:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    if(is_btn_rst_pressed())
    3f8c:	0e 94 bc 20 	call	0x4178	; 0x4178 <is_btn_rst_pressed>
    3f90:	88 23       	and	r24, r24
    3f92:	39 f0       	breq	.+14     	; 0x3fa2 <main+0x1e>
    {
        set_first_usage(0);
    3f94:	80 e0       	ldi	r24, 0x00	; 0
    3f96:	0e 94 f6 10 	call	0x21ec	; 0x21ec <set_first_usage>
        EEPROM_update();
    3f9a:	0e 94 81 10 	call	0x2102	; 0x2102 <EEPROM_update>
        cli(); // запрещаем прерывания и ждем перезагрузки по сторожевому таймеру
    3f9e:	f8 94       	cli
        while(1);
    3fa0:	ff cf       	rjmp	.-2      	; 0x3fa0 <main+0x1c>
    }
    port_init();
    3fa2:	0e 94 39 20 	call	0x4072	; 0x4072 <port_init>
    timer0_init();
    3fa6:	0e 94 98 2b 	call	0x5730	; 0x5730 <timer0_init>
    timer1_init();
    3faa:	0e 94 a4 2b 	call	0x5748	; 0x5748 <timer1_init>
    softuart_init();
    3fae:	0e 94 c0 27 	call	0x4f80	; 0x4f80 <softuart_init>
    init_uart();
    3fb2:	0e 94 19 2e 	call	0x5c32	; 0x5c32 <init_uart>
    ADC_INIT(128, INTERNAL);
    3fb6:	6c e0       	ldi	r22, 0x0C	; 12
    3fb8:	80 e8       	ldi	r24, 0x80	; 128
    3fba:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <ADC_INIT>
    softuart_turn_rx_on();
    3fbe:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <softuart_turn_rx_on>
    sei();
    3fc2:	78 94       	sei
    softuart_puts_p(PSTR("Start...\r\n"));
    3fc4:	80 e1       	ldi	r24, 0x10	; 16
    3fc6:	94 e0       	ldi	r25, 0x04	; 4
    3fc8:	0e 94 45 28 	call	0x508a	; 0x508a <softuart_puts_p>
    eeprom_read_config(1);
    3fcc:	81 e0       	ldi	r24, 0x01	; 1
    3fce:	0e 94 36 10 	call	0x206c	; 0x206c <eeprom_read_config>

    if (setup_init())
    3fd2:	0e 94 ce 19 	call	0x339c	; 0x339c <setup_init>
    3fd6:	81 11       	cpse	r24, r1
    3fd8:	1f c0       	rjmp	.+62     	; 0x4018 <main+0x94>
    {
        send_USSD(1);
        softuart_puts_p(PSTR("setup_ok\r\n"));
    }
    delete_all_sms();
    3fda:	0e 94 03 18 	call	0x3006	; 0x3006 <delete_all_sms>
    init_ds18b20();
    3fde:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <init_ds18b20>
    reset_soft_wdt();
    3fe2:	0e 94 69 2c 	call	0x58d2	; 0x58d2 <reset_soft_wdt>
    power_control();
    3fe6:	0e 94 35 06 	call	0xc6a	; 0xc6a <power_control>
    //ram_free();
    softuart_puts_p(PSTR("end main"));
    3fea:	8c ef       	ldi	r24, 0xFC	; 252
    3fec:	93 e0       	ldi	r25, 0x03	; 3
    3fee:	0e 94 45 28 	call	0x508a	; 0x508a <softuart_puts_p>
    beep();
    3ff2:	0e 94 c4 2b 	call	0x5788	; 0x5788 <beep>
    delay_ms(200);
    3ff6:	88 ec       	ldi	r24, 0xC8	; 200
    3ff8:	90 e0       	ldi	r25, 0x00	; 0
    3ffa:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
    beep();
    3ffe:	0e 94 c4 2b 	call	0x5788	; 0x5788 <beep>
    delay_ms(200);
    4002:	88 ec       	ldi	r24, 0xC8	; 200
    4004:	90 e0       	ldi	r25, 0x00	; 0
    4006:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
    beep();
    400a:	0e 94 c4 2b 	call	0x5788	; 0x5788 <beep>
    delay_ms(200);
    400e:	88 ec       	ldi	r24, 0xC8	; 200
    4010:	90 e0       	ldi	r25, 0x00	; 0
    4012:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <delay_ms>
    4016:	13 c0       	rjmp	.+38     	; 0x403e <main+0xba>
        send_USSD(1);
    4018:	81 e0       	ldi	r24, 0x01	; 1
    401a:	0e 94 e5 1c 	call	0x39ca	; 0x39ca <send_USSD>
        softuart_puts_p(PSTR("setup_ok\r\n"));
    401e:	85 e0       	ldi	r24, 0x05	; 5
    4020:	94 e0       	ldi	r25, 0x04	; 4
    4022:	0e 94 45 28 	call	0x508a	; 0x508a <softuart_puts_p>
    4026:	d9 cf       	rjmp	.-78     	; 0x3fda <main+0x56>
        timer_send_state();
        check_internet();

        while(is_queue_not_empty()) // recv uart
        {
            get_message_from_mdm();
    4028:	0e 94 01 12 	call	0x2402	; 0x2402 <get_message_from_mdm>
        while(is_queue_not_empty()) // recv uart
    402c:	0e 94 51 2e 	call	0x5ca2	; 0x5ca2 <is_queue_not_empty>
    4030:	81 11       	cpse	r24, r1
    4032:	fa cf       	rjmp	.-12     	; 0x4028 <main+0xa4>
        }
        while(softuart_kbhit())// recv softuart
    4034:	0e 94 f7 27 	call	0x4fee	; 0x4fee <softuart_kbhit>
    4038:	81 11       	cpse	r24, r1
    403a:	18 c0       	rjmp	.+48     	; 0x406c <main+0xe8>
        {
            get_message_from_openwrt();
        }
        _SLEEP();
    403c:	88 95       	sleep
        reset_soft_wdt();
    403e:	0e 94 69 2c 	call	0x58d2	; 0x58d2 <reset_soft_wdt>
        incoming_call_processing();
    4042:	0e 94 47 19 	call	0x328e	; 0x328e <incoming_call_processing>
        check_guard();
    4046:	0e 94 83 07 	call	0xf06	; 0xf06 <check_guard>
        check_registration();
    404a:	0e 94 a6 1a 	call	0x354c	; 0x354c <check_registration>
        check_deposit();
    404e:	0e 94 b8 1e 	call	0x3d70	; 0x3d70 <check_deposit>
        power_control();
    4052:	0e 94 35 06 	call	0xc6a	; 0xc6a <power_control>
        check_temperature_smoke();
    4056:	0e 94 44 0a 	call	0x1488	; 0x1488 <check_temperature_smoke>
        get_sms();
    405a:	0e 94 25 18 	call	0x304a	; 0x304a <get_sms>
        check_light();
    405e:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <check_light>
        timer_send_state();
    4062:	0e 94 63 2b 	call	0x56c6	; 0x56c6 <timer_send_state>
        check_internet();
    4066:	0e 94 5c 28 	call	0x50b8	; 0x50b8 <check_internet>
        while(is_queue_not_empty()) // recv uart
    406a:	e0 cf       	rjmp	.-64     	; 0x402c <main+0xa8>
            get_message_from_openwrt();
    406c:	0e 94 fb 29 	call	0x53f6	; 0x53f6 <get_message_from_openwrt>
    4070:	e1 cf       	rjmp	.-62     	; 0x4034 <main+0xb0>

00004072 <port_init>:
    //PORTD = 0;
    //DDRD  = (1<<4)|(1<<1); // TXD, BUZ, LED

    //PORTC &= ~((1<<6)|(1<<7)); // реле выключены
    //DDRC |= (1<<6)|(1<<7); // порты управления реле
    PinMode(PIN_PWR_GSM, OUTPUT);
    4072:	54 9a       	sbi	0x0a, 4	; 10
    DigitalWrite(PIN_PWR_GSM, LOW);
    4074:	5c 98       	cbi	0x0b, 4	; 11

    PinMode(PIN_BUZZER, OUTPUT);
    4076:	55 9a       	sbi	0x0a, 5	; 10
    DigitalWrite(PIN_BUZZER, LOW);
    4078:	5d 98       	cbi	0x0b, 5	; 11

    PinMode(PIN_BEEP, OUTPUT);
    407a:	56 9a       	sbi	0x0a, 6	; 10
    DigitalWrite(PIN_BEEP, LOW);
    407c:	5e 98       	cbi	0x0b, 6	; 11
    PinMode(PIN_LIGHT, OUTPUT);
    407e:	57 9a       	sbi	0x0a, 7	; 10
    DigitalWrite(PIN_LIGHT, LOW);
    4080:	5f 98       	cbi	0x0b, 7	; 11
    PinMode(SENSOR_1, INPUT);
    4082:	38 98       	cbi	0x07, 0	; 7
    DigitalWrite(SENSOR_1, HIGH);
    4084:	40 9a       	sbi	0x08, 0	; 8
    PinMode(SENSOR_2, INPUT);
    4086:	39 98       	cbi	0x07, 1	; 7
    DigitalWrite(SENSOR_2, HIGH);
    4088:	41 9a       	sbi	0x08, 1	; 8
    PinMode(SENSOR_3, INPUT);
    408a:	3a 98       	cbi	0x07, 2	; 7
    DigitalWrite(SENSOR_3, HIGH);
    408c:	42 9a       	sbi	0x08, 2	; 8
    PinMode(SENSOR_4, INPUT);
    408e:	3b 98       	cbi	0x07, 3	; 7
    DigitalWrite(SENSOR_4, HIGH);
    4090:	43 9a       	sbi	0x08, 3	; 8
    PinMode(SINGLE_SENSOR, INPUT);
    4092:	22 98       	cbi	0x04, 2	; 4
    DigitalWrite(SINGLE_SENSOR, LOW);
    4094:	2a 98       	cbi	0x05, 2	; 5
    PinMode(RED_LED, OUTPUT);
    4096:	25 9a       	sbi	0x04, 5	; 4
    DigitalWrite(RED_LED, LOW);
    4098:	2d 98       	cbi	0x05, 5	; 5
    PinMode(GREEN_LED, OUTPUT);
    409a:	23 9a       	sbi	0x04, 3	; 4
    DigitalWrite(GREEN_LED, LOW);
    409c:	2b 98       	cbi	0x05, 3	; 5
    PinMode(BTN_GUARD, INPUT);
    409e:	3c 98       	cbi	0x07, 4	; 7
    DigitalWrite(BTN_GUARD, HIGH);
    40a0:	44 9a       	sbi	0x08, 4	; 8
    PinMode(BTN_LOCAL_GUARD, INPUT);
    40a2:	3d 98       	cbi	0x07, 5	; 7
    DigitalWrite(BTN_LOCAL_GUARD, HIGH);
    40a4:	45 9a       	sbi	0x08, 5	; 8
    //DDRC |= (1<<6)|(1<<7); // порты управления реле
    sensor_port_init();
//	sensor_board_detect_port_init();
    led_port_init();
    button_port_init();
}
    40a6:	08 95       	ret

000040a8 <check_single_sensor>:
    static uint8_t cnt = 0;
    static uint8_t pause_count = 0;
    char motion;

    motion = is_single_sensor();
    if(motion && pause_count == 0)
    40a8:	1a 9b       	sbis	0x03, 2	; 3
    40aa:	12 c0       	rjmp	.+36     	; 0x40d0 <check_single_sensor+0x28>
    40ac:	80 91 35 05 	lds	r24, 0x0535	; 0x800535 <pause_count.5>
    40b0:	81 11       	cpse	r24, r1
    40b2:	17 c0       	rjmp	.+46     	; 0x40e2 <check_single_sensor+0x3a>
    {
        cnt++;
    40b4:	80 91 34 05 	lds	r24, 0x0534	; 0x800534 <cnt.4>
    40b8:	8f 5f       	subi	r24, 0xFF	; 255
    40ba:	80 93 34 05 	sts	0x0534, r24	; 0x800534 <cnt.4>
        if(cnt >= 3)
    40be:	83 30       	cpi	r24, 0x03	; 3
    40c0:	68 f0       	brcs	.+26     	; 0x40dc <check_single_sensor+0x34>
        {
            single_motion_detected = 1;
    40c2:	81 e0       	ldi	r24, 0x01	; 1
    40c4:	80 93 36 05 	sts	0x0536, r24	; 0x800536 <single_motion_detected>
            pause_count = 2;
            cnt = 0;
    40c8:	10 92 34 05 	sts	0x0534, r1	; 0x800534 <cnt.4>
    else
    {
        cnt =0;

    }
    if(pause_count > 0)
    40cc:	82 e0       	ldi	r24, 0x02	; 2
    40ce:	0d c0       	rjmp	.+26     	; 0x40ea <check_single_sensor+0x42>
        cnt =0;
    40d0:	10 92 34 05 	sts	0x0534, r1	; 0x800534 <cnt.4>
    if(pause_count > 0)
    40d4:	80 91 35 05 	lds	r24, 0x0535	; 0x800535 <pause_count.5>
    40d8:	81 11       	cpse	r24, r1
    40da:	07 c0       	rjmp	.+14     	; 0x40ea <check_single_sensor+0x42>
        pause_count--;

    }
    else
    {
        single_motion_detected = 0;
    40dc:	10 92 36 05 	sts	0x0536, r1	; 0x800536 <single_motion_detected>
    }
}
    40e0:	08 95       	ret
        cnt =0;
    40e2:	10 92 34 05 	sts	0x0534, r1	; 0x800534 <cnt.4>
    if(pause_count > 0)
    40e6:	80 91 35 05 	lds	r24, 0x0535	; 0x800535 <pause_count.5>
        pause_count--;
    40ea:	81 50       	subi	r24, 0x01	; 1
    40ec:	80 93 35 05 	sts	0x0535, r24	; 0x800535 <pause_count.5>
    40f0:	08 95       	ret

000040f2 <get_single_motion_detected>:

uint8_t get_single_motion_detected(void)
{
    return single_motion_detected;
}
    40f2:	80 91 36 05 	lds	r24, 0x0536	; 0x800536 <single_motion_detected>
    40f6:	08 95       	ret

000040f8 <check_motion>:
//// функция вызывается с периодом 10 мс
void check_motion(void)
{
    40f8:	1f 93       	push	r17
    40fa:	cf 93       	push	r28
    40fc:	df 93       	push	r29
    char bit = PORT_SENSOR;
    40fe:	c6 b1       	in	r28, 0x06	; 6
    return ((bit << 4) & get_zone_mask());
    4100:	0e 94 c9 10 	call	0x2192	; 0x2192 <get_zone_mask>
    4104:	d8 2f       	mov	r29, r24
    char bit = PORT_SENSOR;
    4106:	16 b1       	in	r17, 0x06	; 6
    return ((bit << 4) & get_zone_mask());
    4108:	0e 94 c9 10 	call	0x2192	; 0x2192 <get_zone_mask>
    410c:	c1 23       	and	r28, r17
    static uint8_t cnt = 0;
    static uint8_t pause_count = 0;
    char motion;

    motion = is_motion() & is_motion();
    410e:	c2 95       	swap	r28
    4110:	c0 7f       	andi	r28, 0xF0	; 240
    4112:	cd 23       	and	r28, r29
    4114:	8c 23       	and	r24, r28
    motion = (motion >> 4);
    4116:	98 2f       	mov	r25, r24
    4118:	95 95       	asr	r25
    411a:	95 95       	asr	r25
    411c:	95 95       	asr	r25
    411e:	95 95       	asr	r25
    if(motion && pause_count == 0)
    4120:	88 23       	and	r24, r24
    4122:	89 f0       	breq	.+34     	; 0x4146 <check_motion+0x4e>
    4124:	80 91 33 05 	lds	r24, 0x0533	; 0x800533 <pause_count.3>
    4128:	81 11       	cpse	r24, r1
    412a:	16 c0       	rjmp	.+44     	; 0x4158 <check_motion+0x60>
    {
        cnt++;
    412c:	80 91 32 05 	lds	r24, 0x0532	; 0x800532 <cnt.2>
    4130:	8f 5f       	subi	r24, 0xFF	; 255
    4132:	80 93 32 05 	sts	0x0532, r24	; 0x800532 <cnt.2>
        if(cnt >= 3)
    4136:	83 30       	cpi	r24, 0x03	; 3
    4138:	60 f0       	brcs	.+24     	; 0x4152 <check_motion+0x5a>
        {
            motion_detected = motion;
    413a:	90 93 37 05 	sts	0x0537, r25	; 0x800537 <motion_detected>
            pause_count = 2;
            cnt = 0;
    413e:	10 92 32 05 	sts	0x0532, r1	; 0x800532 <cnt.2>
    else
    {
        cnt =0;

    }
    if(pause_count > 0)
    4142:	82 e0       	ldi	r24, 0x02	; 2
    4144:	0d c0       	rjmp	.+26     	; 0x4160 <check_motion+0x68>
        cnt =0;
    4146:	10 92 32 05 	sts	0x0532, r1	; 0x800532 <cnt.2>
    if(pause_count > 0)
    414a:	80 91 33 05 	lds	r24, 0x0533	; 0x800533 <pause_count.3>
    414e:	81 11       	cpse	r24, r1
    4150:	07 c0       	rjmp	.+14     	; 0x4160 <check_motion+0x68>
        pause_count--;

    }
    else
    {
        motion_detected = 0;
    4152:	10 92 37 05 	sts	0x0537, r1	; 0x800537 <motion_detected>
    }
}
    4156:	07 c0       	rjmp	.+14     	; 0x4166 <check_motion+0x6e>
        cnt =0;
    4158:	10 92 32 05 	sts	0x0532, r1	; 0x800532 <cnt.2>
    if(pause_count > 0)
    415c:	80 91 33 05 	lds	r24, 0x0533	; 0x800533 <pause_count.3>
        pause_count--;
    4160:	81 50       	subi	r24, 0x01	; 1
    4162:	80 93 33 05 	sts	0x0533, r24	; 0x800533 <pause_count.3>
}
    4166:	df 91       	pop	r29
    4168:	cf 91       	pop	r28
    416a:	1f 91       	pop	r17
    416c:	08 95       	ret

0000416e <get_motion_detected>:
//	            	char state_char[25];
//                itoa(motion_detected,state_char,10);
//                softuart_puts_ln(state_char);
//                uart_send_str(state_char);
//                uart_send_str("\r\n");
    uint8_t temp = motion_detected;
    416e:	80 91 37 05 	lds	r24, 0x0537	; 0x800537 <motion_detected>
    motion_detected = 0;
    4172:	10 92 37 05 	sts	0x0537, r1	; 0x800537 <motion_detected>
    return temp;
    //return motion_detected;
}
    4176:	08 95       	ret

00004178 <is_btn_rst_pressed>:
    }
}
////*******************************************************************************************************************
uint8_t is_btn_rst_pressed(void)
{
    if(DigitalRead(BTN_DEFAULT))
    4178:	83 b1       	in	r24, 0x03	; 3
    417a:	86 95       	lsr	r24
    417c:	81 70       	andi	r24, 0x01	; 1
        return 0;
    else{
        return 1;
    }

}
    417e:	91 e0       	ldi	r25, 0x01	; 1
    4180:	89 27       	eor	r24, r25
    4182:	08 95       	ret

00004184 <check_button>:
void check_button(void)
{
    static char press_button = 0;
    static char button_state = 0;

    if(is_btn_guard_pressed())
    4184:	34 99       	sbic	0x06, 4	; 6
    4186:	4b c0       	rjmp	.+150    	; 0x421e <check_button+0x9a>
    {
        if(!get_guard())
    4188:	0e 94 a2 10 	call	0x2144	; 0x2144 <get_guard>
    418c:	81 11       	cpse	r24, r1
    418e:	07 c0       	rjmp	.+14     	; 0x419e <check_button+0x1a>
        {
            if(press_button < 15)
    4190:	80 91 31 05 	lds	r24, 0x0531	; 0x800531 <press_button.1>
    4194:	8f 30       	cpi	r24, 0x0F	; 15
    4196:	7c f4       	brge	.+30     	; 0x41b6 <check_button+0x32>
                press_button++;
    4198:	8f 5f       	subi	r24, 0xFF	; 255
    419a:	80 93 31 05 	sts	0x0531, r24	; 0x800531 <press_button.1>
                set_flg_rst(1);
                EEPROM_update();
                beep();
            }
        }
        if(get_guard() || get_time_from_button_s() != 0xFFFF)
    419e:	0e 94 a2 10 	call	0x2144	; 0x2144 <get_guard>
    41a2:	88 23       	and	r24, r24
    41a4:	01 f1       	breq	.+64     	; 0x41e6 <check_button+0x62>
        {
            if(press_button < 15)
    41a6:	80 91 31 05 	lds	r24, 0x0531	; 0x800531 <press_button.1>
    41aa:	8f 30       	cpi	r24, 0x0F	; 15
    41ac:	0c f5       	brge	.+66     	; 0x41f0 <check_button+0x6c>
                press_button++;
    41ae:	8f 5f       	subi	r24, 0xFF	; 255
    41b0:	80 93 31 05 	sts	0x0531, r24	; 0x800531 <press_button.1>
    41b4:	08 95       	ret
            else if(button_state == 0)
    41b6:	80 91 30 05 	lds	r24, 0x0530	; 0x800530 <button_state.0>
    41ba:	81 11       	cpse	r24, r1
    41bc:	f0 cf       	rjmp	.-32     	; 0x419e <check_button+0x1a>
                set_time_from_button_s(0);
    41be:	90 e0       	ldi	r25, 0x00	; 0
    41c0:	80 e0       	ldi	r24, 0x00	; 0
    41c2:	0e 94 03 2e 	call	0x5c06	; 0x5c06 <set_time_from_button_s>
                set_local_guard(0);
    41c6:	80 e0       	ldi	r24, 0x00	; 0
    41c8:	0e 94 ab 10 	call	0x2156	; 0x2156 <set_local_guard>
                set_zone_mask(0xF0);
    41cc:	80 ef       	ldi	r24, 0xF0	; 240
    41ce:	0e 94 cc 10 	call	0x2198	; 0x2198 <set_zone_mask>
                button_state = 1;
    41d2:	81 e0       	ldi	r24, 0x01	; 1
    41d4:	80 93 30 05 	sts	0x0530, r24	; 0x800530 <button_state.0>
                set_flg_rst(1);
    41d8:	0e 94 38 0b 	call	0x1670	; 0x1670 <set_flg_rst>
                EEPROM_update();
    41dc:	0e 94 81 10 	call	0x2102	; 0x2102 <EEPROM_update>
                beep();
    41e0:	0e 94 c4 2b 	call	0x5788	; 0x5788 <beep>
    41e4:	dc cf       	rjmp	.-72     	; 0x419e <check_button+0x1a>
        if(get_guard() || get_time_from_button_s() != 0xFFFF)
    41e6:	0e 94 0b 2e 	call	0x5c16	; 0x5c16 <get_time_from_button_s>
    41ea:	01 96       	adiw	r24, 0x01	; 1
    41ec:	e1 f6       	brne	.-72     	; 0x41a6 <check_button+0x22>
    41ee:	1d c0       	rjmp	.+58     	; 0x422a <check_button+0xa6>
            else if(button_state == 0)
    41f0:	80 91 30 05 	lds	r24, 0x0530	; 0x800530 <button_state.0>
    41f4:	81 11       	cpse	r24, r1
    41f6:	19 c0       	rjmp	.+50     	; 0x422a <check_button+0xa6>
            {
                set_guard(0);
    41f8:	0e 94 a5 10 	call	0x214a	; 0x214a <set_guard>
                set_local_guard(0);
    41fc:	80 e0       	ldi	r24, 0x00	; 0
    41fe:	0e 94 ab 10 	call	0x2156	; 0x2156 <set_local_guard>
                set_time_from_button_s(0xFFFF);
    4202:	8f ef       	ldi	r24, 0xFF	; 255
    4204:	9f ef       	ldi	r25, 0xFF	; 255
    4206:	0e 94 03 2e 	call	0x5c06	; 0x5c06 <set_time_from_button_s>
                button_state = 1;
    420a:	81 e0       	ldi	r24, 0x01	; 1
    420c:	80 93 30 05 	sts	0x0530, r24	; 0x800530 <button_state.0>
                set_flg_rst(1);
    4210:	0e 94 38 0b 	call	0x1670	; 0x1670 <set_flg_rst>
                EEPROM_update();
    4214:	0e 94 81 10 	call	0x2102	; 0x2102 <EEPROM_update>
                beep();
    4218:	0e 94 c4 2b 	call	0x5788	; 0x5788 <beep>
    421c:	08 95       	ret
            }
        }

    }
    else if(is_btn_guard_local_pressed())
    421e:	35 9b       	sbis	0x06, 5	; 6
    4220:	05 c0       	rjmp	.+10     	; 0x422c <check_button+0xa8>
            }
        }
    }
    else
    {
        press_button = 0;
    4222:	10 92 31 05 	sts	0x0531, r1	; 0x800531 <press_button.1>
        button_state = 0;
    4226:	10 92 30 05 	sts	0x0530, r1	; 0x800530 <button_state.0>
    }
}
    422a:	08 95       	ret
        set_time_from_button_s(0xFFFF);
    422c:	8f ef       	ldi	r24, 0xFF	; 255
    422e:	9f ef       	ldi	r25, 0xFF	; 255
    4230:	0e 94 03 2e 	call	0x5c06	; 0x5c06 <set_time_from_button_s>
        if(!get_local_guard())
    4234:	0e 94 a8 10 	call	0x2150	; 0x2150 <get_local_guard>
    4238:	81 11       	cpse	r24, r1
    423a:	1c c0       	rjmp	.+56     	; 0x4274 <check_button+0xf0>
            if(press_button < 15)
    423c:	80 91 31 05 	lds	r24, 0x0531	; 0x800531 <press_button.1>
    4240:	8f 30       	cpi	r24, 0x0F	; 15
    4242:	24 f4       	brge	.+8      	; 0x424c <check_button+0xc8>
                press_button++;
    4244:	8f 5f       	subi	r24, 0xFF	; 255
    4246:	80 93 31 05 	sts	0x0531, r24	; 0x800531 <press_button.1>
    424a:	08 95       	ret
            else if(button_state == 0)
    424c:	80 91 30 05 	lds	r24, 0x0530	; 0x800530 <button_state.0>
    4250:	81 11       	cpse	r24, r1
    4252:	eb cf       	rjmp	.-42     	; 0x422a <check_button+0xa6>
                set_local_guard(1);
    4254:	81 e0       	ldi	r24, 0x01	; 1
    4256:	0e 94 ab 10 	call	0x2156	; 0x2156 <set_local_guard>
                set_guard(0);
    425a:	80 e0       	ldi	r24, 0x00	; 0
    425c:	0e 94 a5 10 	call	0x214a	; 0x214a <set_guard>
                button_state = 1;
    4260:	81 e0       	ldi	r24, 0x01	; 1
    4262:	80 93 30 05 	sts	0x0530, r24	; 0x800530 <button_state.0>
                set_flg_rst(1);
    4266:	0e 94 38 0b 	call	0x1670	; 0x1670 <set_flg_rst>
                EEPROM_update();
    426a:	0e 94 81 10 	call	0x2102	; 0x2102 <EEPROM_update>
                beep();
    426e:	0e 94 c4 2b 	call	0x5788	; 0x5788 <beep>
    4272:	08 95       	ret
            if(press_button < 15)
    4274:	80 91 31 05 	lds	r24, 0x0531	; 0x800531 <press_button.1>
    4278:	8f 30       	cpi	r24, 0x0F	; 15
    427a:	24 f4       	brge	.+8      	; 0x4284 <check_button+0x100>
                press_button++;
    427c:	8f 5f       	subi	r24, 0xFF	; 255
    427e:	80 93 31 05 	sts	0x0531, r24	; 0x800531 <press_button.1>
    4282:	08 95       	ret
            else if(button_state == 0)
    4284:	80 91 30 05 	lds	r24, 0x0530	; 0x800530 <button_state.0>
    4288:	81 11       	cpse	r24, r1
    428a:	cf cf       	rjmp	.-98     	; 0x422a <check_button+0xa6>
                set_local_guard(0);
    428c:	0e 94 ab 10 	call	0x2156	; 0x2156 <set_local_guard>
                set_guard(0);
    4290:	80 e0       	ldi	r24, 0x00	; 0
    4292:	0e 94 a5 10 	call	0x214a	; 0x214a <set_guard>
                set_flag_motion_inside(0);
    4296:	80 e0       	ldi	r24, 0x00	; 0
    4298:	0e 94 80 0c 	call	0x1900	; 0x1900 <set_flag_motion_inside>
                EEPROM_update();
    429c:	0e 94 81 10 	call	0x2102	; 0x2102 <EEPROM_update>
                button_state = 1;
    42a0:	81 e0       	ldi	r24, 0x01	; 1
    42a2:	80 93 30 05 	sts	0x0530, r24	; 0x800530 <button_state.0>
                set_flg_rst(1);
    42a6:	0e 94 38 0b 	call	0x1670	; 0x1670 <set_flg_rst>
                beep();
    42aa:	0e 94 c4 2b 	call	0x5788	; 0x5788 <beep>
    42ae:	08 95       	ret

000042b0 <set_phones>:
}

//*******************************************************************************************************************
// принимает список телефонов через запятую, адрес назначения и максимальный размер области назначения
static char* set_phones(char *phones, char *dest, char max_num)
{
    42b0:	af 92       	push	r10
    42b2:	bf 92       	push	r11
    42b4:	cf 92       	push	r12
    42b6:	df 92       	push	r13
    42b8:	ef 92       	push	r14
    42ba:	ff 92       	push	r15
    42bc:	0f 93       	push	r16
    42be:	1f 93       	push	r17
    42c0:	cf 93       	push	r28
    42c2:	df 93       	push	r29
    42c4:	08 2f       	mov	r16, r24
    42c6:	19 2f       	mov	r17, r25
    42c8:	e6 2e       	mov	r14, r22
    42ca:	f7 2e       	mov	r15, r23
    42cc:	d4 2f       	mov	r29, r20
    uint8_t n, i;
    char *ptr = phones;
    n=0;

    for(uint8_t j = 0; j < TOTAL_ADMIN_NUMBER; j++)
    42ce:	c0 e0       	ldi	r28, 0x00	; 0
    {
        get_phones(j)[0] = 0;
    42d0:	8c 2f       	mov	r24, r28
    42d2:	0e 94 ae 10 	call	0x215c	; 0x215c <get_phones>
    42d6:	fc 01       	movw	r30, r24
    42d8:	10 82       	st	Z, r1
    for(uint8_t j = 0; j < TOTAL_ADMIN_NUMBER; j++)
    42da:	cf 5f       	subi	r28, 0xFF	; 255
    42dc:	c5 30       	cpi	r28, 0x05	; 5
    42de:	c1 f7       	brne	.-16     	; 0x42d0 <set_phones+0x20>
    char *ptr = phones;
    42e0:	68 01       	movw	r12, r16
    n=0;
    42e2:	c0 e0       	ldi	r28, 0x00	; 0
    }
    while(check_phone_string(ptr))
    {
        n++;
        if(n > max_num)
    42e4:	ad 2e       	mov	r10, r29
    42e6:	0d 2e       	mov	r0, r29
    42e8:	00 0c       	add	r0, r0
    42ea:	bb 08       	sbc	r11, r11
    while(check_phone_string(ptr))
    42ec:	c6 01       	movw	r24, r12
    42ee:	0e 94 e5 17 	call	0x2fca	; 0x2fca <check_phone_string>
    42f2:	88 23       	and	r24, r24
    42f4:	89 f0       	breq	.+34     	; 0x4318 <set_phones+0x68>
        n++;
    42f6:	cf 5f       	subi	r28, 0xFF	; 255
        if(n > max_num)
    42f8:	ca 15       	cp	r28, r10
    42fa:	1b 04       	cpc	r1, r11
    42fc:	11 f0       	breq	.+4      	; 0x4302 <set_phones+0x52>
    42fe:	0c f0       	brlt	.+2      	; 0x4302 <set_phones+0x52>
    4300:	51 c0       	rjmp	.+162    	; 0x43a4 <set_phones+0xf4>
            return 0;
        ptr+=13;
        if(*ptr == ';')
    4302:	f6 01       	movw	r30, r12
    4304:	95 85       	ldd	r25, Z+13	; 0x0d
    4306:	9b 33       	cpi	r25, 0x3B	; 59
    4308:	39 f0       	breq	.+14     	; 0x4318 <set_phones+0x68>
            break;
        else if(*ptr == ',')
    430a:	9c 32       	cpi	r25, 0x2C	; 44
    430c:	09 f0       	breq	.+2      	; 0x4310 <set_phones+0x60>
    430e:	4d c0       	rjmp	.+154    	; 0x43aa <set_phones+0xfa>
        {
            ptr++;
    4310:	fe e0       	ldi	r31, 0x0E	; 14
    4312:	cf 0e       	add	r12, r31
    4314:	d1 1c       	adc	r13, r1
            continue;
    4316:	ea cf       	rjmp	.-44     	; 0x42ec <set_phones+0x3c>
        }
        else
            return 0;
    }
    ptr = phones;
    for(i=0; i<n; i++)
    4318:	cc 23       	and	r28, r28
    431a:	29 f1       	breq	.+74     	; 0x4366 <set_phones+0xb6>
    431c:	97 01       	movw	r18, r14
    431e:	6f ef       	ldi	r22, 0xFF	; 255
    4320:	6c 0f       	add	r22, r28
    4322:	87 e0       	ldi	r24, 0x07	; 7
    4324:	68 9f       	mul	r22, r24
    4326:	b0 01       	movw	r22, r0
    4328:	11 24       	eor	r1, r1
    432a:	66 0f       	add	r22, r22
    432c:	77 1f       	adc	r23, r23
    432e:	c7 01       	movw	r24, r14
    4330:	0e 96       	adiw	r24, 0x0e	; 14
    4332:	68 0f       	add	r22, r24
    4334:	79 1f       	adc	r23, r25
    ptr = phones;
    4336:	c8 01       	movw	r24, r16
    {
        memcpy(&dest[i*14], ptr, 13);
    4338:	4d e0       	ldi	r20, 0x0D	; 13
    433a:	fc 01       	movw	r30, r24
    433c:	d9 01       	movw	r26, r18
    433e:	01 90       	ld	r0, Z+
    4340:	0d 92       	st	X+, r0
    4342:	4a 95       	dec	r20
    4344:	e1 f7       	brne	.-8      	; 0x433e <set_phones+0x8e>
        dest[i*14 + 13] = 0;
    4346:	f9 01       	movw	r30, r18
    4348:	15 86       	std	Z+13, r1	; 0x0d
        ptr+=14;
    434a:	0e 96       	adiw	r24, 0x0e	; 14
    for(i=0; i<n; i++)
    434c:	22 5f       	subi	r18, 0xF2	; 242
    434e:	3f 4f       	sbci	r19, 0xFF	; 255
    4350:	26 17       	cp	r18, r22
    4352:	37 07       	cpc	r19, r23
    4354:	89 f7       	brne	.-30     	; 0x4338 <set_phones+0x88>
        ptr+=14;
    4356:	f7 e0       	ldi	r31, 0x07	; 7
    4358:	cf 9f       	mul	r28, r31
    435a:	c0 01       	movw	r24, r0
    435c:	11 24       	eor	r1, r1
    435e:	88 0f       	add	r24, r24
    4360:	99 1f       	adc	r25, r25
    4362:	08 0f       	add	r16, r24
    4364:	19 1f       	adc	r17, r25
    }
    memset(&dest[n*14], 0, 14*(max_num-n));
    4366:	ac 2e       	mov	r10, r28
    4368:	b1 2c       	mov	r11, r1
    436a:	b5 01       	movw	r22, r10
    436c:	8d 2f       	mov	r24, r29
    436e:	dd 0f       	add	r29, r29
    4370:	99 0b       	sbc	r25, r25
    4372:	0e 94 f7 2e 	call	0x5dee	; 0x5dee <__subvhi3>
    4376:	6e e0       	ldi	r22, 0x0E	; 14
    4378:	70 e0       	ldi	r23, 0x00	; 0
    437a:	0e 94 05 2f 	call	0x5e0a	; 0x5e0a <__mulvhi3>
    437e:	d8 2e       	mov	r13, r24
    4380:	d9 2f       	mov	r29, r25
    4382:	6e e0       	ldi	r22, 0x0E	; 14
    4384:	70 e0       	ldi	r23, 0x00	; 0
    4386:	c5 01       	movw	r24, r10
    4388:	0e 94 05 2f 	call	0x5e0a	; 0x5e0a <__mulvhi3>
    438c:	4d 2d       	mov	r20, r13
    438e:	5d 2f       	mov	r21, r29
    4390:	70 e0       	ldi	r23, 0x00	; 0
    4392:	60 e0       	ldi	r22, 0x00	; 0
    4394:	8e 0d       	add	r24, r14
    4396:	9f 1d       	adc	r25, r15
    4398:	0e 94 e8 33 	call	0x67d0	; 0x67d0 <memset>
    set_admin_mode(1);
    439c:	81 e0       	ldi	r24, 0x01	; 1
    439e:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <set_admin_mode>
    return ptr;
    43a2:	05 c0       	rjmp	.+10     	; 0x43ae <set_phones+0xfe>
            return 0;
    43a4:	10 e0       	ldi	r17, 0x00	; 0
    43a6:	00 e0       	ldi	r16, 0x00	; 0
    43a8:	02 c0       	rjmp	.+4      	; 0x43ae <set_phones+0xfe>
            return 0;
    43aa:	10 e0       	ldi	r17, 0x00	; 0
    43ac:	00 e0       	ldi	r16, 0x00	; 0
}
    43ae:	c8 01       	movw	r24, r16
    43b0:	df 91       	pop	r29
    43b2:	cf 91       	pop	r28
    43b4:	1f 91       	pop	r17
    43b6:	0f 91       	pop	r16
    43b8:	ff 90       	pop	r15
    43ba:	ef 90       	pop	r14
    43bc:	df 90       	pop	r13
    43be:	cf 90       	pop	r12
    43c0:	bf 90       	pop	r11
    43c2:	af 90       	pop	r10
    43c4:	08 95       	ret

000043c6 <find_phone_in_phone_list>:
{
    43c6:	0f 93       	push	r16
    43c8:	1f 93       	push	r17
    43ca:	cf 93       	push	r28
    43cc:	df 93       	push	r29
    43ce:	18 2f       	mov	r17, r24
    43d0:	09 2f       	mov	r16, r25
    43d2:	d6 2f       	mov	r29, r22
    return 0;
    43d4:	80 e0       	ldi	r24, 0x00	; 0
    if(lst==ADMIN_LIST)
    43d6:	61 30       	cpi	r22, 0x01	; 1
    43d8:	29 f0       	breq	.+10     	; 0x43e4 <find_phone_in_phone_list+0x1e>
}
    43da:	df 91       	pop	r29
    43dc:	cf 91       	pop	r28
    43de:	1f 91       	pop	r17
    43e0:	0f 91       	pop	r16
    43e2:	08 95       	ret
        for(i=0; i<TOTAL_ADMIN_NUMBER; i++)
    43e4:	c0 e0       	ldi	r28, 0x00	; 0
    43e6:	03 c0       	rjmp	.+6      	; 0x43ee <find_phone_in_phone_list+0x28>
    43e8:	cf 5f       	subi	r28, 0xFF	; 255
    43ea:	c5 30       	cpi	r28, 0x05	; 5
    43ec:	b1 f0       	breq	.+44     	; 0x441a <find_phone_in_phone_list+0x54>
            if(get_phones(i)[0] == '+')
    43ee:	8c 2f       	mov	r24, r28
    43f0:	0e 94 ae 10 	call	0x215c	; 0x215c <get_phones>
    43f4:	fc 01       	movw	r30, r24
    43f6:	80 81       	ld	r24, Z
    43f8:	8b 32       	cpi	r24, 0x2B	; 43
    43fa:	b1 f7       	brne	.-20     	; 0x43e8 <find_phone_in_phone_list+0x22>
                if(memcmp(phone, &get_phones(i)[0], 13) == 0)
    43fc:	8c 2f       	mov	r24, r28
    43fe:	0e 94 ae 10 	call	0x215c	; 0x215c <get_phones>
    4402:	68 2f       	mov	r22, r24
    4404:	79 2f       	mov	r23, r25
    4406:	4d e0       	ldi	r20, 0x0D	; 13
    4408:	50 e0       	ldi	r21, 0x00	; 0
    440a:	81 2f       	mov	r24, r17
    440c:	90 2f       	mov	r25, r16
    440e:	0e 94 c9 33 	call	0x6792	; 0x6792 <memcmp>
    4412:	89 2b       	or	r24, r25
    4414:	49 f7       	brne	.-46     	; 0x43e8 <find_phone_in_phone_list+0x22>
                    return 1; // телефон найден в списке админов
    4416:	8d 2f       	mov	r24, r29
    4418:	e0 cf       	rjmp	.-64     	; 0x43da <find_phone_in_phone_list+0x14>
    return 0;
    441a:	80 e0       	ldi	r24, 0x00	; 0
    441c:	de cf       	rjmp	.-68     	; 0x43da <find_phone_in_phone_list+0x14>

0000441e <process_sms_body>:
{
    441e:	2f 92       	push	r2
    4420:	3f 92       	push	r3
    4422:	4f 92       	push	r4
    4424:	5f 92       	push	r5
    4426:	6f 92       	push	r6
    4428:	7f 92       	push	r7
    442a:	8f 92       	push	r8
    442c:	9f 92       	push	r9
    442e:	af 92       	push	r10
    4430:	bf 92       	push	r11
    4432:	cf 92       	push	r12
    4434:	df 92       	push	r13
    4436:	ef 92       	push	r14
    4438:	ff 92       	push	r15
    443a:	0f 93       	push	r16
    443c:	1f 93       	push	r17
    443e:	cf 93       	push	r28
    4440:	df 93       	push	r29
    4442:	cd b7       	in	r28, 0x3d	; 61
    4444:	de b7       	in	r29, 0x3e	; 62
    4446:	c2 5a       	subi	r28, 0xA2	; 162
    4448:	d1 09       	sbc	r29, r1
    444a:	0f b6       	in	r0, 0x3f	; 63
    444c:	f8 94       	cli
    444e:	de bf       	out	0x3e, r29	; 62
    4450:	0f be       	out	0x3f, r0	; 63
    4452:	cd bf       	out	0x3d, r28	; 61
    4454:	08 2f       	mov	r16, r24
    4456:	19 2f       	mov	r17, r25
    if(memcmp_P(ptr, PSTR("set:"), 4) == 0)
    4458:	44 e0       	ldi	r20, 0x04	; 4
    445a:	50 e0       	ldi	r21, 0x00	; 0
    445c:	61 ed       	ldi	r22, 0xD1	; 209
    445e:	76 e0       	ldi	r23, 0x06	; 6
    4460:	c8 01       	movw	r24, r16
    4462:	0e 94 94 33 	call	0x6728	; 0x6728 <memcmp_P>
    4466:	89 2b       	or	r24, r25
    4468:	09 f4       	brne	.+2      	; 0x446c <process_sms_body+0x4e>
    446a:	69 c0       	rjmp	.+210    	; 0x453e <process_sms_body+0x120>
    else if(memcmp_P(ptr, PSTR("get:"), 4) == 0)
    446c:	44 e0       	ldi	r20, 0x04	; 4
    446e:	50 e0       	ldi	r21, 0x00	; 0
    4470:	65 eb       	ldi	r22, 0xB5	; 181
    4472:	76 e0       	ldi	r23, 0x06	; 6
    4474:	c8 01       	movw	r24, r16
    4476:	0e 94 94 33 	call	0x6728	; 0x6728 <memcmp_P>
    447a:	89 2b       	or	r24, r25
    447c:	09 f4       	brne	.+2      	; 0x4480 <process_sms_body+0x62>
    447e:	99 c2       	rjmp	.+1330   	; 0x49b2 <process_sms_body+0x594>
    else if(memcmp_P(ptr, PSTR("resetdefault;"), 13) == 0)
    4480:	4d e0       	ldi	r20, 0x0D	; 13
    4482:	50 e0       	ldi	r21, 0x00	; 0
    4484:	63 e9       	ldi	r22, 0x93	; 147
    4486:	76 e0       	ldi	r23, 0x06	; 6
    4488:	c8 01       	movw	r24, r16
    448a:	0e 94 94 33 	call	0x6728	; 0x6728 <memcmp_P>
    448e:	89 2b       	or	r24, r25
    4490:	09 f4       	brne	.+2      	; 0x4494 <process_sms_body+0x76>
    4492:	e6 c3       	rjmp	.+1996   	; 0x4c60 <process_sms_body+0x842>
    else if(memcmp_P(ptr, PSTR("reboot;"), 7) == 0)
    4494:	47 e0       	ldi	r20, 0x07	; 7
    4496:	50 e0       	ldi	r21, 0x00	; 0
    4498:	68 e4       	ldi	r22, 0x48	; 72
    449a:	76 e0       	ldi	r23, 0x06	; 6
    449c:	c8 01       	movw	r24, r16
    449e:	0e 94 94 33 	call	0x6728	; 0x6728 <memcmp_P>
    44a2:	89 2b       	or	r24, r25
    44a4:	09 f4       	brne	.+2      	; 0x44a8 <process_sms_body+0x8a>
    44a6:	fd c3       	rjmp	.+2042   	; 0x4ca2 <process_sms_body+0x884>
    else if(memcmp_P(ptr, PSTR("help;"), 5) == 0)
    44a8:	45 e0       	ldi	r20, 0x05	; 5
    44aa:	50 e0       	ldi	r21, 0x00	; 0
    44ac:	6c e1       	ldi	r22, 0x1C	; 28
    44ae:	76 e0       	ldi	r23, 0x06	; 6
    44b0:	c8 01       	movw	r24, r16
    44b2:	0e 94 94 33 	call	0x6728	; 0x6728 <memcmp_P>
    44b6:	89 2b       	or	r24, r25
    44b8:	09 f4       	brne	.+2      	; 0x44bc <process_sms_body+0x9e>
    44ba:	0f c4       	rjmp	.+2078   	; 0x4cda <process_sms_body+0x8bc>
    else if(memcmp_P(ptr, PSTR("helpget;"), 8) == 0)
    44bc:	48 e0       	ldi	r20, 0x08	; 8
    44be:	50 e0       	ldi	r21, 0x00	; 0
    44c0:	65 e0       	ldi	r22, 0x05	; 5
    44c2:	76 e0       	ldi	r23, 0x06	; 6
    44c4:	c8 01       	movw	r24, r16
    44c6:	0e 94 94 33 	call	0x6728	; 0x6728 <memcmp_P>
    44ca:	89 2b       	or	r24, r25
    44cc:	09 f4       	brne	.+2      	; 0x44d0 <process_sms_body+0xb2>
    44ce:	1e c4       	rjmp	.+2108   	; 0x4d0c <process_sms_body+0x8ee>
    else if(memcmp_P(ptr, PSTR("helpset;"), 8) == 0)
    44d0:	48 e0       	ldi	r20, 0x08	; 8
    44d2:	50 e0       	ldi	r21, 0x00	; 0
    44d4:	6e ee       	ldi	r22, 0xEE	; 238
    44d6:	75 e0       	ldi	r23, 0x05	; 5
    44d8:	c8 01       	movw	r24, r16
    44da:	0e 94 94 33 	call	0x6728	; 0x6728 <memcmp_P>
    44de:	89 2b       	or	r24, r25
    44e0:	09 f4       	brne	.+2      	; 0x44e4 <process_sms_body+0xc6>
    44e2:	2d c4       	rjmp	.+2138   	; 0x4d3e <process_sms_body+0x920>
    else if(memcmp_P(ptr, PSTR("report;"), 7) == 0)
    44e4:	47 e0       	ldi	r20, 0x07	; 7
    44e6:	50 e0       	ldi	r21, 0x00	; 0
    44e8:	68 ed       	ldi	r22, 0xD8	; 216
    44ea:	75 e0       	ldi	r23, 0x05	; 5
    44ec:	c8 01       	movw	r24, r16
    44ee:	0e 94 94 33 	call	0x6728	; 0x6728 <memcmp_P>
    44f2:	89 2b       	or	r24, r25
    44f4:	09 f4       	brne	.+2      	; 0x44f8 <process_sms_body+0xda>
    44f6:	3c c4       	rjmp	.+2168   	; 0x4d70 <process_sms_body+0x952>
    else if(memcmp_P(ptr, PSTR("adminphones="), 12) == 0)
    44f8:	4c e0       	ldi	r20, 0x0C	; 12
    44fa:	50 e0       	ldi	r21, 0x00	; 0
    44fc:	6d eb       	ldi	r22, 0xBD	; 189
    44fe:	75 e0       	ldi	r23, 0x05	; 5
    4500:	c8 01       	movw	r24, r16
    4502:	0e 94 94 33 	call	0x6728	; 0x6728 <memcmp_P>
    4506:	89 2b       	or	r24, r25
    4508:	09 f4       	brne	.+2      	; 0x450c <process_sms_body+0xee>
    450a:	47 c4       	rjmp	.+2190   	; 0x4d9a <process_sms_body+0x97c>
    else if(memcmp_P(ptr, PSTR("light="), 6) == 0)
    450c:	46 e0       	ldi	r20, 0x06	; 6
    450e:	50 e0       	ldi	r21, 0x00	; 0
    4510:	65 ea       	ldi	r22, 0xA5	; 165
    4512:	75 e0       	ldi	r23, 0x05	; 5
    4514:	c8 01       	movw	r24, r16
    4516:	0e 94 94 33 	call	0x6728	; 0x6728 <memcmp_P>
    451a:	89 2b       	or	r24, r25
    451c:	09 f0       	breq	.+2      	; 0x4520 <process_sms_body+0x102>
    451e:	6f c0       	rjmp	.+222    	; 0x45fe <process_sms_body+0x1e0>
        if(*ptr == '0')
    4520:	f8 01       	movw	r30, r16
    4522:	86 81       	ldd	r24, Z+6	; 0x06
    4524:	80 33       	cpi	r24, 0x30	; 48
    4526:	09 f4       	brne	.+2      	; 0x452a <process_sms_body+0x10c>
    4528:	64 c4       	rjmp	.+2248   	; 0x4df2 <process_sms_body+0x9d4>
        else if(*ptr == '1')
    452a:	81 33       	cpi	r24, 0x31	; 49
    452c:	09 f0       	breq	.+2      	; 0x4530 <process_sms_body+0x112>
    452e:	67 c0       	rjmp	.+206    	; 0x45fe <process_sms_body+0x1e0>
        if(*++ptr != ';')
    4530:	f8 01       	movw	r30, r16
    4532:	87 81       	ldd	r24, Z+7	; 0x07
    4534:	8b 33       	cpi	r24, 0x3B	; 59
    4536:	09 f0       	breq	.+2      	; 0x453a <process_sms_body+0x11c>
    4538:	62 c0       	rjmp	.+196    	; 0x45fe <process_sms_body+0x1e0>
            DigitalWrite(PIN_LIGHT, HIGH);
    453a:	5f 9a       	sbi	0x0b, 7	; 11
    453c:	60 c0       	rjmp	.+192    	; 0x45fe <process_sms_body+0x1e0>
        if((find_phone_in_phone_list(get_phone_number(), ADMIN_LIST) == 0))
    453e:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <get_phone_number>
    4542:	61 e0       	ldi	r22, 0x01	; 1
    4544:	0e 94 e3 21 	call	0x43c6	; 0x43c6 <find_phone_in_phone_list>
    4548:	88 23       	and	r24, r24
    454a:	39 f0       	breq	.+14     	; 0x455a <process_sms_body+0x13c>
        ptr += 4;
    454c:	0c 5f       	subi	r16, 0xFC	; 252
    454e:	1f 4f       	sbci	r17, 0xFF	; 255
        i=0;
    4550:	f1 2c       	mov	r15, r1
 			temp = 0;
    4552:	e1 2c       	mov	r14, r1
 			temp = 1;
    4554:	dd 24       	eor	r13, r13
    4556:	d3 94       	inc	r13
    4558:	10 c0       	rjmp	.+32     	; 0x457a <process_sms_body+0x15c>
            send_sms_p(PSTR("Access denied"), get_phone_number());
    455a:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <get_phone_number>
    455e:	68 2f       	mov	r22, r24
    4560:	79 2f       	mov	r23, r25
    4562:	83 ec       	ldi	r24, 0xC3	; 195
    4564:	96 e0       	ldi	r25, 0x06	; 6
    4566:	0e 94 d5 15 	call	0x2baa	; 0x2baa <send_sms_p>
            return;
    456a:	49 c0       	rjmp	.+146    	; 0x45fe <process_sms_body+0x1e0>
        set_interval_after_button_m(interval);
    456c:	0e 94 ee 10 	call	0x21dc	; 0x21dc <set_interval_after_button_m>
        ptr++;
    4570:	09 81       	ldd	r16, Y+1	; 0x01
    4572:	1a 81       	ldd	r17, Y+2	; 0x02
    4574:	0f 5f       	subi	r16, 0xFF	; 255
    4576:	1f 4f       	sbci	r17, 0xFF	; 255
                i++;
    4578:	f3 94       	inc	r15
        while(ptr && *ptr)
    457a:	f8 01       	movw	r30, r16
    457c:	80 81       	ld	r24, Z
    457e:	88 23       	and	r24, r24
    4580:	09 f4       	brne	.+2      	; 0x4584 <process_sms_body+0x166>
    4582:	4a c4       	rjmp	.+2196   	; 0x4e18 <process_sms_body+0x9fa>
            ptr = set_param(ptr);
    4584:	1a 83       	std	Y+2, r17	; 0x02
    4586:	09 83       	std	Y+1, r16	; 0x01
    if(memcmp_P(ptr, PSTR("btninterval="), 12) == 0)
    4588:	4c e0       	ldi	r20, 0x0C	; 12
    458a:	50 e0       	ldi	r21, 0x00	; 0
    458c:	68 e9       	ldi	r22, 0x98	; 152
    458e:	75 e0       	ldi	r23, 0x05	; 5
    4590:	c8 01       	movw	r24, r16
    4592:	0e 94 94 33 	call	0x6728	; 0x6728 <memcmp_P>
    4596:	89 2b       	or	r24, r25
    4598:	09 f0       	breq	.+2      	; 0x459c <process_sms_body+0x17e>
    459a:	4b c0       	rjmp	.+150    	; 0x4632 <process_sms_body+0x214>
        ptr+=12;
    459c:	c8 01       	movw	r24, r16
    459e:	0c 96       	adiw	r24, 0x0c	; 12
    45a0:	9a 83       	std	Y+2, r25	; 0x02
    45a2:	89 83       	std	Y+1, r24	; 0x01
        if(isdigit(*ptr) == 0)
    45a4:	f8 01       	movw	r30, r16
    45a6:	24 85       	ldd	r18, Z+12	; 0x0c
    45a8:	02 2e       	mov	r0, r18
    45aa:	00 0c       	add	r0, r0
    45ac:	33 0b       	sbc	r19, r19
    45ae:	20 53       	subi	r18, 0x30	; 48
    45b0:	31 09       	sbc	r19, r1
    45b2:	2a 30       	cpi	r18, 0x0A	; 10
    45b4:	31 05       	cpc	r19, r1
    45b6:	c0 f4       	brcc	.+48     	; 0x45e8 <process_sms_body+0x1ca>
        interval = strtoul(ptr, &ptr, 10);
    45b8:	4a e0       	ldi	r20, 0x0A	; 10
    45ba:	50 e0       	ldi	r21, 0x00	; 0
    45bc:	be 01       	movw	r22, r28
    45be:	6f 5f       	subi	r22, 0xFF	; 255
    45c0:	7f 4f       	sbci	r23, 0xFF	; 255
    45c2:	0e 94 20 32 	call	0x6440	; 0x6440 <strtoul>
    45c6:	38 2f       	mov	r19, r24
    45c8:	29 2f       	mov	r18, r25
    45ca:	86 2f       	mov	r24, r22
    45cc:	97 2f       	mov	r25, r23
    45ce:	a3 2f       	mov	r26, r19
    45d0:	b2 2f       	mov	r27, r18
        if( interval>60000 )
    45d2:	81 36       	cpi	r24, 0x61	; 97
    45d4:	fa ee       	ldi	r31, 0xEA	; 234
    45d6:	9f 07       	cpc	r25, r31
    45d8:	a1 05       	cpc	r26, r1
    45da:	b1 05       	cpc	r27, r1
    45dc:	28 f4       	brcc	.+10     	; 0x45e8 <process_sms_body+0x1ca>
        if(*ptr != ';')
    45de:	e9 81       	ldd	r30, Y+1	; 0x01
    45e0:	fa 81       	ldd	r31, Y+2	; 0x02
    45e2:	20 81       	ld	r18, Z
    45e4:	2b 33       	cpi	r18, 0x3B	; 59
    45e6:	11 f2       	breq	.-124    	; 0x456c <process_sms_body+0x14e>
            eeprom_read_config(0); // возвращаем всё в зад
    45e8:	80 e0       	ldi	r24, 0x00	; 0
    45ea:	0e 94 36 10 	call	0x206c	; 0x206c <eeprom_read_config>
            send_sms_p(PSTR("error"), get_phone_number());
    45ee:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <get_phone_number>
    45f2:	68 2f       	mov	r22, r24
    45f4:	79 2f       	mov	r23, r25
    45f6:	8a eb       	ldi	r24, 0xBA	; 186
    45f8:	96 e0       	ldi	r25, 0x06	; 6
    45fa:	0e 94 d5 15 	call	0x2baa	; 0x2baa <send_sms_p>
}
    45fe:	ce 55       	subi	r28, 0x5E	; 94
    4600:	df 4f       	sbci	r29, 0xFF	; 255
    4602:	0f b6       	in	r0, 0x3f	; 63
    4604:	f8 94       	cli
    4606:	de bf       	out	0x3e, r29	; 62
    4608:	0f be       	out	0x3f, r0	; 63
    460a:	cd bf       	out	0x3d, r28	; 61
    460c:	df 91       	pop	r29
    460e:	cf 91       	pop	r28
    4610:	1f 91       	pop	r17
    4612:	0f 91       	pop	r16
    4614:	ff 90       	pop	r15
    4616:	ef 90       	pop	r14
    4618:	df 90       	pop	r13
    461a:	cf 90       	pop	r12
    461c:	bf 90       	pop	r11
    461e:	af 90       	pop	r10
    4620:	9f 90       	pop	r9
    4622:	8f 90       	pop	r8
    4624:	7f 90       	pop	r7
    4626:	6f 90       	pop	r6
    4628:	5f 90       	pop	r5
    462a:	4f 90       	pop	r4
    462c:	3f 90       	pop	r3
    462e:	2f 90       	pop	r2
    4630:	08 95       	ret
    if(memcmp_P(ptr, PSTR("aftermotion="), 12) == 0)
    4632:	4c e0       	ldi	r20, 0x0C	; 12
    4634:	50 e0       	ldi	r21, 0x00	; 0
    4636:	6b e8       	ldi	r22, 0x8B	; 139
    4638:	75 e0       	ldi	r23, 0x05	; 5
    463a:	c8 01       	movw	r24, r16
    463c:	0e 94 94 33 	call	0x6728	; 0x6728 <memcmp_P>
    4640:	89 2b       	or	r24, r25
    4642:	79 f5       	brne	.+94     	; 0x46a2 <process_sms_body+0x284>
        ptr+=12;
    4644:	c8 01       	movw	r24, r16
    4646:	0c 96       	adiw	r24, 0x0c	; 12
    4648:	9a 83       	std	Y+2, r25	; 0x02
    464a:	89 83       	std	Y+1, r24	; 0x01
        if(isdigit(*ptr) == 0)
    464c:	f8 01       	movw	r30, r16
    464e:	24 85       	ldd	r18, Z+12	; 0x0c
    4650:	02 2e       	mov	r0, r18
    4652:	00 0c       	add	r0, r0
    4654:	33 0b       	sbc	r19, r19
    4656:	20 53       	subi	r18, 0x30	; 48
    4658:	31 09       	sbc	r19, r1
    465a:	2a 30       	cpi	r18, 0x0A	; 10
    465c:	31 05       	cpc	r19, r1
    465e:	20 f6       	brcc	.-120    	; 0x45e8 <process_sms_body+0x1ca>
        interval = strtoul(ptr, &ptr, 10);
    4660:	4a e0       	ldi	r20, 0x0A	; 10
    4662:	50 e0       	ldi	r21, 0x00	; 0
    4664:	be 01       	movw	r22, r28
    4666:	6f 5f       	subi	r22, 0xFF	; 255
    4668:	7f 4f       	sbci	r23, 0xFF	; 255
    466a:	0e 94 20 32 	call	0x6440	; 0x6440 <strtoul>
    466e:	38 2f       	mov	r19, r24
    4670:	29 2f       	mov	r18, r25
    4672:	86 2f       	mov	r24, r22
    4674:	97 2f       	mov	r25, r23
    4676:	a3 2f       	mov	r26, r19
    4678:	b2 2f       	mov	r27, r18
        if( interval>60000 )
    467a:	81 36       	cpi	r24, 0x61	; 97
    467c:	fa ee       	ldi	r31, 0xEA	; 234
    467e:	9f 07       	cpc	r25, r31
    4680:	a1 05       	cpc	r26, r1
    4682:	b1 05       	cpc	r27, r1
    4684:	08 f0       	brcs	.+2      	; 0x4688 <process_sms_body+0x26a>
    4686:	b0 cf       	rjmp	.-160    	; 0x45e8 <process_sms_body+0x1ca>
        if(*ptr != ';')
    4688:	e9 81       	ldd	r30, Y+1	; 0x01
    468a:	fa 81       	ldd	r31, Y+2	; 0x02
    468c:	20 81       	ld	r18, Z
    468e:	2b 33       	cpi	r18, 0x3B	; 59
    4690:	09 f0       	breq	.+2      	; 0x4694 <process_sms_body+0x276>
    4692:	aa cf       	rjmp	.-172    	; 0x45e8 <process_sms_body+0x1ca>
        set_interval_after_motion_m(interval);
    4694:	0e 94 de 10 	call	0x21bc	; 0x21bc <set_interval_after_motion_m>
        ptr++;
    4698:	09 81       	ldd	r16, Y+1	; 0x01
    469a:	1a 81       	ldd	r17, Y+2	; 0x02
    469c:	0f 5f       	subi	r16, 0xFF	; 255
    469e:	1f 4f       	sbci	r17, 0xFF	; 255
        return ptr;
    46a0:	6b cf       	rjmp	.-298    	; 0x4578 <process_sms_body+0x15a>
    if(memcmp_P(ptr, PSTR("pause_alarm_s="), 14) == 0)
    46a2:	4e e0       	ldi	r20, 0x0E	; 14
    46a4:	50 e0       	ldi	r21, 0x00	; 0
    46a6:	6c e7       	ldi	r22, 0x7C	; 124
    46a8:	75 e0       	ldi	r23, 0x05	; 5
    46aa:	c8 01       	movw	r24, r16
    46ac:	0e 94 94 33 	call	0x6728	; 0x6728 <memcmp_P>
    46b0:	89 2b       	or	r24, r25
    46b2:	f9 f4       	brne	.+62     	; 0x46f2 <process_sms_body+0x2d4>
        ptr+=14;
    46b4:	c8 01       	movw	r24, r16
    46b6:	0e 96       	adiw	r24, 0x0e	; 14
    46b8:	9a 83       	std	Y+2, r25	; 0x02
    46ba:	89 83       	std	Y+1, r24	; 0x01
        if(isdigit(*ptr) == 0)
    46bc:	f8 01       	movw	r30, r16
    46be:	16 85       	ldd	r17, Z+14	; 0x0e
    46c0:	21 2f       	mov	r18, r17
    46c2:	01 2e       	mov	r0, r17
    46c4:	00 0c       	add	r0, r0
    46c6:	33 0b       	sbc	r19, r19
    46c8:	20 53       	subi	r18, 0x30	; 48
    46ca:	31 09       	sbc	r19, r1
    46cc:	2a 30       	cpi	r18, 0x0A	; 10
    46ce:	31 05       	cpc	r19, r1
    46d0:	08 f0       	brcs	.+2      	; 0x46d4 <process_sms_body+0x2b6>
    46d2:	8a cf       	rjmp	.-236    	; 0x45e8 <process_sms_body+0x1ca>
        uint8_t c = atoi(ptr);
    46d4:	0e 94 6d 33 	call	0x66da	; 0x66da <atoi>
        if(c > 250)
    46d8:	8b 3f       	cpi	r24, 0xFB	; 251
    46da:	08 f0       	brcs	.+2      	; 0x46de <process_sms_body+0x2c0>
    46dc:	85 cf       	rjmp	.-246    	; 0x45e8 <process_sms_body+0x1ca>
        if(*ptr != ';')
    46de:	1b 33       	cpi	r17, 0x3B	; 59
    46e0:	09 f0       	breq	.+2      	; 0x46e4 <process_sms_body+0x2c6>
    46e2:	82 cf       	rjmp	.-252    	; 0x45e8 <process_sms_body+0x1ca>
        set_pause_alarm_report_s(c);
    46e4:	0e 94 02 11 	call	0x2204	; 0x2204 <set_pause_alarm_report_s>
        ptr++;
    46e8:	09 81       	ldd	r16, Y+1	; 0x01
    46ea:	1a 81       	ldd	r17, Y+2	; 0x02
    46ec:	0f 5f       	subi	r16, 0xFF	; 255
    46ee:	1f 4f       	sbci	r17, 0xFF	; 255
        return ptr;
    46f0:	43 cf       	rjmp	.-378    	; 0x4578 <process_sms_body+0x15a>
    if(memcmp_P(ptr, PSTR("guard="), 6) == 0)
    46f2:	46 e0       	ldi	r20, 0x06	; 6
    46f4:	50 e0       	ldi	r21, 0x00	; 0
    46f6:	65 e7       	ldi	r22, 0x75	; 117
    46f8:	75 e0       	ldi	r23, 0x05	; 5
    46fa:	c8 01       	movw	r24, r16
    46fc:	0e 94 94 33 	call	0x6728	; 0x6728 <memcmp_P>
    4700:	89 2b       	or	r24, r25
    4702:	09 f5       	brne	.+66     	; 0x4746 <process_sms_body+0x328>
        if(*ptr == '0')
    4704:	f8 01       	movw	r30, r16
    4706:	86 81       	ldd	r24, Z+6	; 0x06
    4708:	80 33       	cpi	r24, 0x30	; 48
    470a:	d9 f0       	breq	.+54     	; 0x4742 <process_sms_body+0x324>
        else if(*ptr == '1')
    470c:	81 33       	cpi	r24, 0x31	; 49
    470e:	09 f0       	breq	.+2      	; 0x4712 <process_sms_body+0x2f4>
    4710:	6b cf       	rjmp	.-298    	; 0x45e8 <process_sms_body+0x1ca>
            temp = 1;
    4712:	cd 2c       	mov	r12, r13
        if(*++ptr != ';')
    4714:	c8 01       	movw	r24, r16
    4716:	07 96       	adiw	r24, 0x07	; 7
    4718:	9a 83       	std	Y+2, r25	; 0x02
    471a:	89 83       	std	Y+1, r24	; 0x01
    471c:	f8 01       	movw	r30, r16
    471e:	87 81       	ldd	r24, Z+7	; 0x07
    4720:	8b 33       	cpi	r24, 0x3B	; 59
    4722:	09 f0       	breq	.+2      	; 0x4726 <process_sms_body+0x308>
    4724:	61 cf       	rjmp	.-318    	; 0x45e8 <process_sms_body+0x1ca>
        set_local_guard(0);
    4726:	8e 2d       	mov	r24, r14
    4728:	0e 94 ab 10 	call	0x2156	; 0x2156 <set_local_guard>
        set_guard(temp);
    472c:	8c 2d       	mov	r24, r12
    472e:	0e 94 a5 10 	call	0x214a	; 0x214a <set_guard>
        set_zone_mask(0xF0);
    4732:	80 ef       	ldi	r24, 0xF0	; 240
    4734:	0e 94 cc 10 	call	0x2198	; 0x2198 <set_zone_mask>
        ptr++;
    4738:	09 81       	ldd	r16, Y+1	; 0x01
    473a:	1a 81       	ldd	r17, Y+2	; 0x02
    473c:	0f 5f       	subi	r16, 0xFF	; 255
    473e:	1f 4f       	sbci	r17, 0xFF	; 255
        return ptr;
    4740:	1b cf       	rjmp	.-458    	; 0x4578 <process_sms_body+0x15a>
            temp = 0;
    4742:	ce 2c       	mov	r12, r14
    4744:	e7 cf       	rjmp	.-50     	; 0x4714 <process_sms_body+0x2f6>
    if(memcmp_P(ptr, PSTR("local_guard="), 12) == 0)
    4746:	4c e0       	ldi	r20, 0x0C	; 12
    4748:	50 e0       	ldi	r21, 0x00	; 0
    474a:	68 e6       	ldi	r22, 0x68	; 104
    474c:	75 e0       	ldi	r23, 0x05	; 5
    474e:	c8 01       	movw	r24, r16
    4750:	0e 94 94 33 	call	0x6728	; 0x6728 <memcmp_P>
    4754:	89 2b       	or	r24, r25
    4756:	09 f5       	brne	.+66     	; 0x479a <process_sms_body+0x37c>
        if(*ptr == '0')
    4758:	f8 01       	movw	r30, r16
    475a:	84 85       	ldd	r24, Z+12	; 0x0c
    475c:	80 33       	cpi	r24, 0x30	; 48
    475e:	d9 f0       	breq	.+54     	; 0x4796 <process_sms_body+0x378>
        else if(*ptr == '1')
    4760:	81 33       	cpi	r24, 0x31	; 49
    4762:	09 f0       	breq	.+2      	; 0x4766 <process_sms_body+0x348>
    4764:	41 cf       	rjmp	.-382    	; 0x45e8 <process_sms_body+0x1ca>
            temp = 1;
    4766:	cd 2c       	mov	r12, r13
        if(*++ptr != ';')
    4768:	c8 01       	movw	r24, r16
    476a:	0d 96       	adiw	r24, 0x0d	; 13
    476c:	9a 83       	std	Y+2, r25	; 0x02
    476e:	89 83       	std	Y+1, r24	; 0x01
    4770:	f8 01       	movw	r30, r16
    4772:	85 85       	ldd	r24, Z+13	; 0x0d
    4774:	8b 33       	cpi	r24, 0x3B	; 59
    4776:	09 f0       	breq	.+2      	; 0x477a <process_sms_body+0x35c>
    4778:	37 cf       	rjmp	.-402    	; 0x45e8 <process_sms_body+0x1ca>
        set_guard(0);
    477a:	8e 2d       	mov	r24, r14
    477c:	0e 94 a5 10 	call	0x214a	; 0x214a <set_guard>
        set_local_guard(temp);
    4780:	8c 2d       	mov	r24, r12
    4782:	0e 94 ab 10 	call	0x2156	; 0x2156 <set_local_guard>
        set_zone_mask(0xF0);
    4786:	80 ef       	ldi	r24, 0xF0	; 240
    4788:	0e 94 cc 10 	call	0x2198	; 0x2198 <set_zone_mask>
        ptr++;
    478c:	09 81       	ldd	r16, Y+1	; 0x01
    478e:	1a 81       	ldd	r17, Y+2	; 0x02
    4790:	0f 5f       	subi	r16, 0xFF	; 255
    4792:	1f 4f       	sbci	r17, 0xFF	; 255
        return ptr;
    4794:	f1 ce       	rjmp	.-542    	; 0x4578 <process_sms_body+0x15a>
            temp = 0;
    4796:	ce 2c       	mov	r12, r14
    4798:	e7 cf       	rjmp	.-50     	; 0x4768 <process_sms_body+0x34a>
    if(memcmp_P(ptr, PSTR("autoguard="), 10) == 0)
    479a:	4a e0       	ldi	r20, 0x0A	; 10
    479c:	50 e0       	ldi	r21, 0x00	; 0
    479e:	6d e5       	ldi	r22, 0x5D	; 93
    47a0:	75 e0       	ldi	r23, 0x05	; 5
    47a2:	c8 01       	movw	r24, r16
    47a4:	0e 94 94 33 	call	0x6728	; 0x6728 <memcmp_P>
    47a8:	89 2b       	or	r24, r25
    47aa:	d9 f4       	brne	.+54     	; 0x47e2 <process_sms_body+0x3c4>
        if(*ptr == '0')
    47ac:	f8 01       	movw	r30, r16
    47ae:	82 85       	ldd	r24, Z+10	; 0x0a
    47b0:	80 33       	cpi	r24, 0x30	; 48
    47b2:	a9 f0       	breq	.+42     	; 0x47de <process_sms_body+0x3c0>
        else if(*ptr == '1')
    47b4:	81 33       	cpi	r24, 0x31	; 49
    47b6:	09 f0       	breq	.+2      	; 0x47ba <process_sms_body+0x39c>
    47b8:	17 cf       	rjmp	.-466    	; 0x45e8 <process_sms_body+0x1ca>
            temp = 1;
    47ba:	8d 2d       	mov	r24, r13
        if(*++ptr != ';')
    47bc:	98 01       	movw	r18, r16
    47be:	25 5f       	subi	r18, 0xF5	; 245
    47c0:	3f 4f       	sbci	r19, 0xFF	; 255
    47c2:	3a 83       	std	Y+2, r19	; 0x02
    47c4:	29 83       	std	Y+1, r18	; 0x01
    47c6:	f8 01       	movw	r30, r16
    47c8:	93 85       	ldd	r25, Z+11	; 0x0b
    47ca:	9b 33       	cpi	r25, 0x3B	; 59
    47cc:	09 f0       	breq	.+2      	; 0x47d0 <process_sms_body+0x3b2>
    47ce:	0c cf       	rjmp	.-488    	; 0x45e8 <process_sms_body+0x1ca>
        set_autoguard(temp);
    47d0:	0e 94 e6 10 	call	0x21cc	; 0x21cc <set_autoguard>
        ptr++;
    47d4:	09 81       	ldd	r16, Y+1	; 0x01
    47d6:	1a 81       	ldd	r17, Y+2	; 0x02
    47d8:	0f 5f       	subi	r16, 0xFF	; 255
    47da:	1f 4f       	sbci	r17, 0xFF	; 255
        return ptr;
    47dc:	cd ce       	rjmp	.-614    	; 0x4578 <process_sms_body+0x15a>
            temp = 0;
    47de:	8e 2d       	mov	r24, r14
    47e0:	ed cf       	rjmp	.-38     	; 0x47bc <process_sms_body+0x39e>
    if(memcmp_P(ptr, PSTR("accept_calls="), 13) == 0)
    47e2:	4d e0       	ldi	r20, 0x0D	; 13
    47e4:	50 e0       	ldi	r21, 0x00	; 0
    47e6:	6f e4       	ldi	r22, 0x4F	; 79
    47e8:	75 e0       	ldi	r23, 0x05	; 5
    47ea:	c8 01       	movw	r24, r16
    47ec:	0e 94 94 33 	call	0x6728	; 0x6728 <memcmp_P>
    47f0:	89 2b       	or	r24, r25
    47f2:	d9 f4       	brne	.+54     	; 0x482a <process_sms_body+0x40c>
        if(*ptr == '0')
    47f4:	f8 01       	movw	r30, r16
    47f6:	85 85       	ldd	r24, Z+13	; 0x0d
    47f8:	80 33       	cpi	r24, 0x30	; 48
    47fa:	a9 f0       	breq	.+42     	; 0x4826 <process_sms_body+0x408>
        else if(*ptr == '1')
    47fc:	81 33       	cpi	r24, 0x31	; 49
    47fe:	09 f0       	breq	.+2      	; 0x4802 <process_sms_body+0x3e4>
    4800:	f3 ce       	rjmp	.-538    	; 0x45e8 <process_sms_body+0x1ca>
            temp = 1;
    4802:	8d 2d       	mov	r24, r13
        if(*++ptr != ';')
    4804:	98 01       	movw	r18, r16
    4806:	22 5f       	subi	r18, 0xF2	; 242
    4808:	3f 4f       	sbci	r19, 0xFF	; 255
    480a:	3a 83       	std	Y+2, r19	; 0x02
    480c:	29 83       	std	Y+1, r18	; 0x01
    480e:	f8 01       	movw	r30, r16
    4810:	96 85       	ldd	r25, Z+14	; 0x0e
    4812:	9b 33       	cpi	r25, 0x3B	; 59
    4814:	09 f0       	breq	.+2      	; 0x4818 <process_sms_body+0x3fa>
    4816:	e8 ce       	rjmp	.-560    	; 0x45e8 <process_sms_body+0x1ca>
        set_accept_calls(temp);
    4818:	0e 94 8a 10 	call	0x2114	; 0x2114 <set_accept_calls>
        ptr++;
    481c:	09 81       	ldd	r16, Y+1	; 0x01
    481e:	1a 81       	ldd	r17, Y+2	; 0x02
    4820:	0f 5f       	subi	r16, 0xFF	; 255
    4822:	1f 4f       	sbci	r17, 0xFF	; 255
        return ptr;
    4824:	a9 ce       	rjmp	.-686    	; 0x4578 <process_sms_body+0x15a>
            temp = 0;
    4826:	8e 2d       	mov	r24, r14
    4828:	ed cf       	rjmp	.-38     	; 0x4804 <process_sms_body+0x3e6>
    if(memcmp_P(ptr, PSTR("accept_sms="), 13) == 0)
    482a:	4d e0       	ldi	r20, 0x0D	; 13
    482c:	50 e0       	ldi	r21, 0x00	; 0
    482e:	63 e4       	ldi	r22, 0x43	; 67
    4830:	75 e0       	ldi	r23, 0x05	; 5
    4832:	c8 01       	movw	r24, r16
    4834:	0e 94 94 33 	call	0x6728	; 0x6728 <memcmp_P>
    4838:	89 2b       	or	r24, r25
    483a:	d9 f4       	brne	.+54     	; 0x4872 <process_sms_body+0x454>
        if(*ptr == '0')
    483c:	f8 01       	movw	r30, r16
    483e:	85 85       	ldd	r24, Z+13	; 0x0d
    4840:	80 33       	cpi	r24, 0x30	; 48
    4842:	a9 f0       	breq	.+42     	; 0x486e <process_sms_body+0x450>
        else if(*ptr == '1')
    4844:	81 33       	cpi	r24, 0x31	; 49
    4846:	09 f0       	breq	.+2      	; 0x484a <process_sms_body+0x42c>
    4848:	cf ce       	rjmp	.-610    	; 0x45e8 <process_sms_body+0x1ca>
            temp = 1;
    484a:	8d 2d       	mov	r24, r13
        if(*++ptr != ';')
    484c:	98 01       	movw	r18, r16
    484e:	22 5f       	subi	r18, 0xF2	; 242
    4850:	3f 4f       	sbci	r19, 0xFF	; 255
    4852:	3a 83       	std	Y+2, r19	; 0x02
    4854:	29 83       	std	Y+1, r18	; 0x01
    4856:	f8 01       	movw	r30, r16
    4858:	96 85       	ldd	r25, Z+14	; 0x0e
    485a:	9b 33       	cpi	r25, 0x3B	; 59
    485c:	09 f0       	breq	.+2      	; 0x4860 <process_sms_body+0x442>
    485e:	c4 ce       	rjmp	.-632    	; 0x45e8 <process_sms_body+0x1ca>
        set_accept_sms(temp);
    4860:	0e 94 90 10 	call	0x2120	; 0x2120 <set_accept_sms>
        ptr++;
    4864:	09 81       	ldd	r16, Y+1	; 0x01
    4866:	1a 81       	ldd	r17, Y+2	; 0x02
    4868:	0f 5f       	subi	r16, 0xFF	; 255
    486a:	1f 4f       	sbci	r17, 0xFF	; 255
        return ptr;
    486c:	85 ce       	rjmp	.-758    	; 0x4578 <process_sms_body+0x15a>
            temp = 0;
    486e:	8e 2d       	mov	r24, r14
    4870:	ed cf       	rjmp	.-38     	; 0x484c <process_sms_body+0x42e>
    if(memcmp_P(ptr, PSTR("power_off_report_m="), 19) == 0)
    4872:	43 e1       	ldi	r20, 0x13	; 19
    4874:	50 e0       	ldi	r21, 0x00	; 0
    4876:	6f e2       	ldi	r22, 0x2F	; 47
    4878:	75 e0       	ldi	r23, 0x05	; 5
    487a:	c8 01       	movw	r24, r16
    487c:	0e 94 94 33 	call	0x6728	; 0x6728 <memcmp_P>
    4880:	89 2b       	or	r24, r25
    4882:	d9 f4       	brne	.+54     	; 0x48ba <process_sms_body+0x49c>
        if(*ptr == '0')
    4884:	f8 01       	movw	r30, r16
    4886:	83 89       	ldd	r24, Z+19	; 0x13
    4888:	80 33       	cpi	r24, 0x30	; 48
    488a:	a9 f0       	breq	.+42     	; 0x48b6 <process_sms_body+0x498>
        else if(*ptr == '1')
    488c:	81 33       	cpi	r24, 0x31	; 49
    488e:	09 f0       	breq	.+2      	; 0x4892 <process_sms_body+0x474>
    4890:	ab ce       	rjmp	.-682    	; 0x45e8 <process_sms_body+0x1ca>
            temp = 1;
    4892:	8d 2d       	mov	r24, r13
        if(*++ptr != ';')
    4894:	98 01       	movw	r18, r16
    4896:	2c 5e       	subi	r18, 0xEC	; 236
    4898:	3f 4f       	sbci	r19, 0xFF	; 255
    489a:	3a 83       	std	Y+2, r19	; 0x02
    489c:	29 83       	std	Y+1, r18	; 0x01
    489e:	f8 01       	movw	r30, r16
    48a0:	94 89       	ldd	r25, Z+20	; 0x14
    48a2:	9b 33       	cpi	r25, 0x3B	; 59
    48a4:	09 f0       	breq	.+2      	; 0x48a8 <process_sms_body+0x48a>
    48a6:	a0 ce       	rjmp	.-704    	; 0x45e8 <process_sms_body+0x1ca>
        set_interval_power_off_report(temp);
    48a8:	0e 94 99 10 	call	0x2132	; 0x2132 <set_interval_power_off_report>
        ptr++;
    48ac:	09 81       	ldd	r16, Y+1	; 0x01
    48ae:	1a 81       	ldd	r17, Y+2	; 0x02
    48b0:	0f 5f       	subi	r16, 0xFF	; 255
    48b2:	1f 4f       	sbci	r17, 0xFF	; 255
        return ptr;
    48b4:	61 ce       	rjmp	.-830    	; 0x4578 <process_sms_body+0x15a>
            temp = 0;
    48b6:	8e 2d       	mov	r24, r14
    48b8:	ed cf       	rjmp	.-38     	; 0x4894 <process_sms_body+0x476>
    if(memcmp_P(ptr, PSTR("power_on_report_m="), 19) == 0)
    48ba:	43 e1       	ldi	r20, 0x13	; 19
    48bc:	50 e0       	ldi	r21, 0x00	; 0
    48be:	6c e1       	ldi	r22, 0x1C	; 28
    48c0:	75 e0       	ldi	r23, 0x05	; 5
    48c2:	c8 01       	movw	r24, r16
    48c4:	0e 94 94 33 	call	0x6728	; 0x6728 <memcmp_P>
    48c8:	89 2b       	or	r24, r25
    48ca:	d9 f4       	brne	.+54     	; 0x4902 <process_sms_body+0x4e4>
        if(*ptr == '0')
    48cc:	f8 01       	movw	r30, r16
    48ce:	83 89       	ldd	r24, Z+19	; 0x13
    48d0:	80 33       	cpi	r24, 0x30	; 48
    48d2:	a9 f0       	breq	.+42     	; 0x48fe <process_sms_body+0x4e0>
        else if(*ptr == '1')
    48d4:	81 33       	cpi	r24, 0x31	; 49
    48d6:	09 f0       	breq	.+2      	; 0x48da <process_sms_body+0x4bc>
    48d8:	87 ce       	rjmp	.-754    	; 0x45e8 <process_sms_body+0x1ca>
            temp = 1;
    48da:	8d 2d       	mov	r24, r13
        if(*++ptr != ';')
    48dc:	98 01       	movw	r18, r16
    48de:	2c 5e       	subi	r18, 0xEC	; 236
    48e0:	3f 4f       	sbci	r19, 0xFF	; 255
    48e2:	3a 83       	std	Y+2, r19	; 0x02
    48e4:	29 83       	std	Y+1, r18	; 0x01
    48e6:	f8 01       	movw	r30, r16
    48e8:	94 89       	ldd	r25, Z+20	; 0x14
    48ea:	9b 33       	cpi	r25, 0x3B	; 59
    48ec:	09 f0       	breq	.+2      	; 0x48f0 <process_sms_body+0x4d2>
    48ee:	7c ce       	rjmp	.-776    	; 0x45e8 <process_sms_body+0x1ca>
        set_interval_power_on_report(temp);
    48f0:	0e 94 9f 10 	call	0x213e	; 0x213e <set_interval_power_on_report>
        ptr++;
    48f4:	09 81       	ldd	r16, Y+1	; 0x01
    48f6:	1a 81       	ldd	r17, Y+2	; 0x02
    48f8:	0f 5f       	subi	r16, 0xFF	; 255
    48fa:	1f 4f       	sbci	r17, 0xFF	; 255
        return ptr;
    48fc:	3d ce       	rjmp	.-902    	; 0x4578 <process_sms_body+0x15a>
            temp = 0;
    48fe:	8e 2d       	mov	r24, r14
    4900:	ed cf       	rjmp	.-38     	; 0x48dc <process_sms_body+0x4be>
	if(memcmp_P(ptr, PSTR("s_sensor="), 9) == 0)
    4902:	49 e0       	ldi	r20, 0x09	; 9
    4904:	50 e0       	ldi	r21, 0x00	; 0
    4906:	62 e1       	ldi	r22, 0x12	; 18
    4908:	75 e0       	ldi	r23, 0x05	; 5
    490a:	c8 01       	movw	r24, r16
    490c:	0e 94 94 33 	call	0x6728	; 0x6728 <memcmp_P>
    4910:	89 2b       	or	r24, r25
    4912:	d9 f4       	brne	.+54     	; 0x494a <process_sms_body+0x52c>
 		if(*ptr == '0')
    4914:	f8 01       	movw	r30, r16
    4916:	81 85       	ldd	r24, Z+9	; 0x09
    4918:	80 33       	cpi	r24, 0x30	; 48
    491a:	a9 f0       	breq	.+42     	; 0x4946 <process_sms_body+0x528>
 		else if(*ptr == '1')
    491c:	81 33       	cpi	r24, 0x31	; 49
    491e:	09 f0       	breq	.+2      	; 0x4922 <process_sms_body+0x504>
    4920:	63 ce       	rjmp	.-826    	; 0x45e8 <process_sms_body+0x1ca>
 			temp = 1;
    4922:	8d 2d       	mov	r24, r13
 		if(*++ptr != ';')
    4924:	98 01       	movw	r18, r16
    4926:	26 5f       	subi	r18, 0xF6	; 246
    4928:	3f 4f       	sbci	r19, 0xFF	; 255
    492a:	3a 83       	std	Y+2, r19	; 0x02
    492c:	29 83       	std	Y+1, r18	; 0x01
    492e:	f8 01       	movw	r30, r16
    4930:	92 85       	ldd	r25, Z+10	; 0x0a
    4932:	9b 33       	cpi	r25, 0x3B	; 59
    4934:	09 f0       	breq	.+2      	; 0x4938 <process_sms_body+0x51a>
    4936:	58 ce       	rjmp	.-848    	; 0x45e8 <process_sms_body+0x1ca>
        set_single_sensor(temp);
    4938:	0e 94 08 11 	call	0x2210	; 0x2210 <set_single_sensor>
 		ptr++;
    493c:	09 81       	ldd	r16, Y+1	; 0x01
    493e:	1a 81       	ldd	r17, Y+2	; 0x02
    4940:	0f 5f       	subi	r16, 0xFF	; 255
    4942:	1f 4f       	sbci	r17, 0xFF	; 255
 		return ptr;
    4944:	19 ce       	rjmp	.-974    	; 0x4578 <process_sms_body+0x15a>
 			temp = 0;
    4946:	8e 2d       	mov	r24, r14
    4948:	ed cf       	rjmp	.-38     	; 0x4924 <process_sms_body+0x506>
    if(memcmp_P(ptr, PSTR("mtime_sens_ms="), 13) == 0)
    494a:	4d e0       	ldi	r20, 0x0D	; 13
    494c:	50 e0       	ldi	r21, 0x00	; 0
    494e:	63 e0       	ldi	r22, 0x03	; 3
    4950:	75 e0       	ldi	r23, 0x05	; 5
    4952:	c8 01       	movw	r24, r16
    4954:	0e 94 94 33 	call	0x6728	; 0x6728 <memcmp_P>
    4958:	89 2b       	or	r24, r25
    495a:	09 f0       	breq	.+2      	; 0x495e <process_sms_body+0x540>
    495c:	45 ce       	rjmp	.-886    	; 0x45e8 <process_sms_body+0x1ca>
        ptr+=13;
    495e:	c8 01       	movw	r24, r16
    4960:	0d 96       	adiw	r24, 0x0d	; 13
    4962:	9a 83       	std	Y+2, r25	; 0x02
    4964:	89 83       	std	Y+1, r24	; 0x01
        if(isdigit(*ptr) == 0)
    4966:	f8 01       	movw	r30, r16
    4968:	25 85       	ldd	r18, Z+13	; 0x0d
    496a:	02 2e       	mov	r0, r18
    496c:	00 0c       	add	r0, r0
    496e:	33 0b       	sbc	r19, r19
    4970:	20 53       	subi	r18, 0x30	; 48
    4972:	31 09       	sbc	r19, r1
    4974:	2a 30       	cpi	r18, 0x0A	; 10
    4976:	31 05       	cpc	r19, r1
    4978:	08 f0       	brcs	.+2      	; 0x497c <process_sms_body+0x55e>
    497a:	36 ce       	rjmp	.-916    	; 0x45e8 <process_sms_body+0x1ca>
        c = strtoul(ptr, &ptr, 10);
    497c:	4a e0       	ldi	r20, 0x0A	; 10
    497e:	50 e0       	ldi	r21, 0x00	; 0
    4980:	be 01       	movw	r22, r28
    4982:	6f 5f       	subi	r22, 0xFF	; 255
    4984:	7f 4f       	sbci	r23, 0xFF	; 255
    4986:	0e 94 20 32 	call	0x6440	; 0x6440 <strtoul>
    498a:	86 2f       	mov	r24, r22
    498c:	97 2f       	mov	r25, r23
        if(c > 20000)
    498e:	81 32       	cpi	r24, 0x21	; 33
    4990:	fe e4       	ldi	r31, 0x4E	; 78
    4992:	9f 07       	cpc	r25, r31
    4994:	08 f0       	brcs	.+2      	; 0x4998 <process_sms_body+0x57a>
    4996:	28 ce       	rjmp	.-944    	; 0x45e8 <process_sms_body+0x1ca>
        if(*ptr != ';')
    4998:	e9 81       	ldd	r30, Y+1	; 0x01
    499a:	fa 81       	ldd	r31, Y+2	; 0x02
    499c:	20 81       	ld	r18, Z
    499e:	2b 33       	cpi	r18, 0x3B	; 59
    49a0:	09 f0       	breq	.+2      	; 0x49a4 <process_sms_body+0x586>
    49a2:	22 ce       	rjmp	.-956    	; 0x45e8 <process_sms_body+0x1ca>
        set_mtime_sens(c);
    49a4:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <set_mtime_sens>
        ptr++;
    49a8:	09 81       	ldd	r16, Y+1	; 0x01
    49aa:	1a 81       	ldd	r17, Y+2	; 0x02
    49ac:	0f 5f       	subi	r16, 0xFF	; 255
    49ae:	1f 4f       	sbci	r17, 0xFF	; 255
        return ptr;
    49b0:	e3 cd       	rjmp	.-1082   	; 0x4578 <process_sms_body+0x15a>
        if((find_phone_in_phone_list(get_phone_number(), ADMIN_LIST) == 0))
    49b2:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <get_phone_number>
    49b6:	61 e0       	ldi	r22, 0x01	; 1
    49b8:	0e 94 e3 21 	call	0x43c6	; 0x43c6 <find_phone_in_phone_list>
    49bc:	88 23       	and	r24, r24
    49be:	01 f1       	breq	.+64     	; 0x4a00 <process_sms_body+0x5e2>
        ptr += 4;
    49c0:	0c 5f       	subi	r16, 0xFC	; 252
    49c2:	1f 4f       	sbci	r17, 0xFF	; 255
        sms_text[0] = 0; // терминируем строку
    49c4:	19 82       	std	Y+1, r1	; 0x01
        i=0;
    49c6:	31 2c       	mov	r3, r1
            ptr = get_param(ptr, &sms_text[strlen(sms_text)]);
    49c8:	ce 01       	movw	r24, r28
    49ca:	01 96       	adiw	r24, 0x01	; 1
    49cc:	5c 01       	movw	r10, r24
        sprintf_P(sms_text, PSTR("interval_after_button_m=%um;"), get_interval_after_button_m());
    49ce:	0f 2e       	mov	r0, r31
    49d0:	f9 eb       	ldi	r31, 0xB9	; 185
    49d2:	4f 2e       	mov	r4, r31
    49d4:	f4 e0       	ldi	r31, 0x04	; 4
    49d6:	5f 2e       	mov	r5, r31
    49d8:	f0 2d       	mov	r31, r0
        sms_text += sprintf_P(sms_text, PSTR("adminphones="));
    49da:	0f 2e       	mov	r0, r31
    49dc:	f9 ee       	ldi	r31, 0xE9	; 233
    49de:	8f 2e       	mov	r8, r31
    49e0:	f4 e0       	ldi	r31, 0x04	; 4
    49e2:	9f 2e       	mov	r9, r31
    49e4:	f0 2d       	mov	r31, r0
            sms_text += sprintf_P(sms_text, PSTR("%s,"), &get_phones(i)[0]);
    49e6:	0f 2e       	mov	r0, r31
    49e8:	f5 ee       	ldi	r31, 0xE5	; 229
    49ea:	cf 2e       	mov	r12, r31
    49ec:	f4 e0       	ldi	r31, 0x04	; 4
    49ee:	df 2e       	mov	r13, r31
    49f0:	f0 2d       	mov	r31, r0
        sprintf_P(sms_text, PSTR(";"));
    49f2:	0f 2e       	mov	r0, r31
    49f4:	f3 ee       	ldi	r31, 0xE3	; 227
    49f6:	6f 2e       	mov	r6, r31
    49f8:	f4 e0       	ldi	r31, 0x04	; 4
    49fa:	7f 2e       	mov	r7, r31
    49fc:	f0 2d       	mov	r31, r0
    49fe:	5a c0       	rjmp	.+180    	; 0x4ab4 <process_sms_body+0x696>
            send_sms_p(PSTR("Access denied"), get_phone_number());
    4a00:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <get_phone_number>
    4a04:	68 2f       	mov	r22, r24
    4a06:	79 2f       	mov	r23, r25
    4a08:	87 ea       	ldi	r24, 0xA7	; 167
    4a0a:	96 e0       	ldi	r25, 0x06	; 6
    4a0c:	0e 94 d5 15 	call	0x2baa	; 0x2baa <send_sms_p>
            return;
    4a10:	f6 cd       	rjmp	.-1044   	; 0x45fe <process_sms_body+0x1e0>
        str += 12;
    4a12:	04 5f       	subi	r16, 0xF4	; 244
    4a14:	1f 4f       	sbci	r17, 0xFF	; 255
        sms_text += sprintf_P(sms_text, PSTR("adminphones="));
    4a16:	9f 92       	push	r9
    4a18:	8f 92       	push	r8
    4a1a:	ff 92       	push	r15
    4a1c:	ef 92       	push	r14
    4a1e:	0e 94 68 34 	call	0x68d0	; 0x68d0 <sprintf_P>
    4a22:	e8 0e       	add	r14, r24
    4a24:	f9 1e       	adc	r15, r25
    4a26:	0f 90       	pop	r0
    4a28:	0f 90       	pop	r0
    4a2a:	0f 90       	pop	r0
    4a2c:	0f 90       	pop	r0
        n=0;
    4a2e:	21 2c       	mov	r2, r1
    4a30:	cf 55       	subi	r28, 0x5F	; 95
    4a32:	df 4f       	sbci	r29, 0xFF	; 255
    4a34:	19 83       	std	Y+1, r17	; 0x01
    4a36:	08 83       	st	Y, r16
    4a38:	c1 5a       	subi	r28, 0xA1	; 161
    4a3a:	d0 40       	sbci	r29, 0x00	; 0
    4a3c:	12 2d       	mov	r17, r2
            if(get_phones(i)[0] != '+')
    4a3e:	81 2f       	mov	r24, r17
    4a40:	0e 94 ae 10 	call	0x215c	; 0x215c <get_phones>
    4a44:	fc 01       	movw	r30, r24
    4a46:	80 81       	ld	r24, Z
    4a48:	8b 32       	cpi	r24, 0x2B	; 43
    4a4a:	01 f5       	brne	.+64     	; 0x4a8c <process_sms_body+0x66e>
            sms_text += sprintf_P(sms_text, PSTR("%s,"), &get_phones(i)[0]);
    4a4c:	81 2f       	mov	r24, r17
    4a4e:	0e 94 ae 10 	call	0x215c	; 0x215c <get_phones>
    4a52:	9f 93       	push	r25
    4a54:	8f 93       	push	r24
    4a56:	df 92       	push	r13
    4a58:	cf 92       	push	r12
    4a5a:	ff 92       	push	r15
    4a5c:	ef 92       	push	r14
    4a5e:	0e 94 68 34 	call	0x68d0	; 0x68d0 <sprintf_P>
    4a62:	e8 0e       	add	r14, r24
    4a64:	f9 1e       	adc	r15, r25
            n++; // количество напечатанных телефонов
    4a66:	1f 5f       	subi	r17, 0xFF	; 255
        for(i=0; i<TOTAL_ADMIN_NUMBER; i++)
    4a68:	0f 90       	pop	r0
    4a6a:	0f 90       	pop	r0
    4a6c:	0f 90       	pop	r0
    4a6e:	0f 90       	pop	r0
    4a70:	0f 90       	pop	r0
    4a72:	0f 90       	pop	r0
    4a74:	15 30       	cpi	r17, 0x05	; 5
    4a76:	19 f7       	brne	.-58     	; 0x4a3e <process_sms_body+0x620>
    4a78:	cf 55       	subi	r28, 0x5F	; 95
    4a7a:	df 4f       	sbci	r29, 0xFF	; 255
    4a7c:	08 81       	ld	r16, Y
    4a7e:	19 81       	ldd	r17, Y+1	; 0x01
    4a80:	c1 5a       	subi	r28, 0xA1	; 161
    4a82:	d0 40       	sbci	r29, 0x00	; 0
            sms_text--;
    4a84:	f1 e0       	ldi	r31, 0x01	; 1
    4a86:	ef 1a       	sub	r14, r31
    4a88:	f1 08       	sbc	r15, r1
    4a8a:	09 c0       	rjmp	.+18     	; 0x4a9e <process_sms_body+0x680>
        if(n)
    4a8c:	21 2e       	mov	r2, r17
    4a8e:	cf 55       	subi	r28, 0x5F	; 95
    4a90:	df 4f       	sbci	r29, 0xFF	; 255
    4a92:	08 81       	ld	r16, Y
    4a94:	19 81       	ldd	r17, Y+1	; 0x01
    4a96:	c1 5a       	subi	r28, 0xA1	; 161
    4a98:	d0 40       	sbci	r29, 0x00	; 0
    4a9a:	21 10       	cpse	r2, r1
    4a9c:	f3 cf       	rjmp	.-26     	; 0x4a84 <process_sms_body+0x666>
        sprintf_P(sms_text, PSTR(";"));
    4a9e:	7f 92       	push	r7
    4aa0:	6f 92       	push	r6
    4aa2:	ff 92       	push	r15
    4aa4:	ef 92       	push	r14
    4aa6:	0e 94 68 34 	call	0x68d0	; 0x68d0 <sprintf_P>
        return str;
    4aaa:	0f 90       	pop	r0
    4aac:	0f 90       	pop	r0
    4aae:	0f 90       	pop	r0
    4ab0:	0f 90       	pop	r0
                i++;
    4ab2:	33 94       	inc	r3
        while(ptr && *ptr)
    4ab4:	f8 01       	movw	r30, r16
    4ab6:	80 81       	ld	r24, Z
    4ab8:	88 23       	and	r24, r24
    4aba:	09 f4       	brne	.+2      	; 0x4abe <process_sms_body+0x6a0>
    4abc:	a1 c1       	rjmp	.+834    	; 0x4e00 <process_sms_body+0x9e2>
            ptr = get_param(ptr, &sms_text[strlen(sms_text)]);
    4abe:	f5 01       	movw	r30, r10
    4ac0:	01 90       	ld	r0, Z+
    4ac2:	00 20       	and	r0, r0
    4ac4:	e9 f7       	brne	.-6      	; 0x4ac0 <process_sms_body+0x6a2>
    4ac6:	cf 01       	movw	r24, r30
    4ac8:	01 97       	sbiw	r24, 0x01	; 1
    4aca:	7c 01       	movw	r14, r24
    if(memcmp_P(str, PSTR("adminphones;"), 12) == 0)
    4acc:	4c e0       	ldi	r20, 0x0C	; 12
    4ace:	50 e0       	ldi	r21, 0x00	; 0
    4ad0:	66 ef       	ldi	r22, 0xF6	; 246
    4ad2:	74 e0       	ldi	r23, 0x04	; 4
    4ad4:	c8 01       	movw	r24, r16
    4ad6:	0e 94 94 33 	call	0x6728	; 0x6728 <memcmp_P>
    4ada:	89 2b       	or	r24, r25
    4adc:	09 f4       	brne	.+2      	; 0x4ae0 <process_sms_body+0x6c2>
    4ade:	99 cf       	rjmp	.-206    	; 0x4a12 <process_sms_body+0x5f4>
    else if(memcmp_P(str, PSTR("btninterval;"), 12) == 0)
    4ae0:	4c e0       	ldi	r20, 0x0C	; 12
    4ae2:	50 e0       	ldi	r21, 0x00	; 0
    4ae4:	66 ed       	ldi	r22, 0xD6	; 214
    4ae6:	74 e0       	ldi	r23, 0x04	; 4
    4ae8:	c8 01       	movw	r24, r16
    4aea:	0e 94 94 33 	call	0x6728	; 0x6728 <memcmp_P>
    4aee:	89 2b       	or	r24, r25
    4af0:	d9 f1       	breq	.+118    	; 0x4b68 <process_sms_body+0x74a>
    else if(memcmp_P(str, PSTR("aftermotion;"), 12) == 0)
    4af2:	4c e0       	ldi	r20, 0x0C	; 12
    4af4:	50 e0       	ldi	r21, 0x00	; 0
    4af6:	6c ea       	ldi	r22, 0xAC	; 172
    4af8:	74 e0       	ldi	r23, 0x04	; 4
    4afa:	c8 01       	movw	r24, r16
    4afc:	0e 94 94 33 	call	0x6728	; 0x6728 <memcmp_P>
    4b00:	89 2b       	or	r24, r25
    4b02:	09 f4       	brne	.+2      	; 0x4b06 <process_sms_body+0x6e8>
    4b04:	44 c0       	rjmp	.+136    	; 0x4b8e <process_sms_body+0x770>
    else if(memcmp_P(str, PSTR("autoguard;"), 10) == 0)
    4b06:	4a e0       	ldi	r20, 0x0A	; 10
    4b08:	50 e0       	ldi	r21, 0x00	; 0
    4b0a:	64 e8       	ldi	r22, 0x84	; 132
    4b0c:	74 e0       	ldi	r23, 0x04	; 4
    4b0e:	c8 01       	movw	r24, r16
    4b10:	0e 94 94 33 	call	0x6728	; 0x6728 <memcmp_P>
    4b14:	89 2b       	or	r24, r25
    4b16:	09 f4       	brne	.+2      	; 0x4b1a <process_sms_body+0x6fc>
    4b18:	4f c0       	rjmp	.+158    	; 0x4bb8 <process_sms_body+0x79a>
    else if(memcmp_P(str, PSTR("accept_calls;"), 13) == 0)
    4b1a:	4d e0       	ldi	r20, 0x0D	; 13
    4b1c:	50 e0       	ldi	r21, 0x00	; 0
    4b1e:	68 e6       	ldi	r22, 0x68	; 104
    4b20:	74 e0       	ldi	r23, 0x04	; 4
    4b22:	c8 01       	movw	r24, r16
    4b24:	0e 94 94 33 	call	0x6728	; 0x6728 <memcmp_P>
    4b28:	89 2b       	or	r24, r25
    4b2a:	09 f4       	brne	.+2      	; 0x4b2e <process_sms_body+0x710>
    4b2c:	5a c0       	rjmp	.+180    	; 0x4be2 <process_sms_body+0x7c4>
    else if(memcmp_P(str, PSTR("accept_sms;"), 13) == 0)
    4b2e:	4d e0       	ldi	r20, 0x0D	; 13
    4b30:	50 e0       	ldi	r21, 0x00	; 0
    4b32:	6b e4       	ldi	r22, 0x4B	; 75
    4b34:	74 e0       	ldi	r23, 0x04	; 4
    4b36:	c8 01       	movw	r24, r16
    4b38:	0e 94 94 33 	call	0x6728	; 0x6728 <memcmp_P>
    4b3c:	89 2b       	or	r24, r25
    4b3e:	09 f4       	brne	.+2      	; 0x4b42 <process_sms_body+0x724>
    4b40:	65 c0       	rjmp	.+202    	; 0x4c0c <process_sms_body+0x7ee>
    else if(memcmp_P(str, PSTR("mtime_sens_ms;"), 13) == 0)
    4b42:	4d e0       	ldi	r20, 0x0D	; 13
    4b44:	50 e0       	ldi	r21, 0x00	; 0
    4b46:	6d e2       	ldi	r22, 0x2D	; 45
    4b48:	74 e0       	ldi	r23, 0x04	; 4
    4b4a:	c8 01       	movw	r24, r16
    4b4c:	0e 94 94 33 	call	0x6728	; 0x6728 <memcmp_P>
    4b50:	89 2b       	or	r24, r25
    4b52:	09 f4       	brne	.+2      	; 0x4b56 <process_sms_body+0x738>
    4b54:	70 c0       	rjmp	.+224    	; 0x4c36 <process_sms_body+0x818>
            send_sms_p(PSTR("error"), get_phone_number());
    4b56:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <get_phone_number>
    4b5a:	68 2f       	mov	r22, r24
    4b5c:	79 2f       	mov	r23, r25
    4b5e:	81 ea       	ldi	r24, 0xA1	; 161
    4b60:	96 e0       	ldi	r25, 0x06	; 6
    4b62:	0e 94 d5 15 	call	0x2baa	; 0x2baa <send_sms_p>
    4b66:	4b cd       	rjmp	.-1386   	; 0x45fe <process_sms_body+0x1e0>
        str += 12;
    4b68:	04 5f       	subi	r16, 0xF4	; 244
    4b6a:	1f 4f       	sbci	r17, 0xFF	; 255
        sprintf_P(sms_text, PSTR("interval_after_button_m=%um;"), get_interval_after_button_m());
    4b6c:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <get_interval_after_button_m>
    4b70:	9f 93       	push	r25
    4b72:	8f 93       	push	r24
    4b74:	5f 92       	push	r5
    4b76:	4f 92       	push	r4
    4b78:	ff 92       	push	r15
    4b7a:	ef 92       	push	r14
    4b7c:	0e 94 68 34 	call	0x68d0	; 0x68d0 <sprintf_P>
        return str;
    4b80:	0f 90       	pop	r0
    4b82:	0f 90       	pop	r0
    4b84:	0f 90       	pop	r0
    4b86:	0f 90       	pop	r0
    4b88:	0f 90       	pop	r0
    4b8a:	0f 90       	pop	r0
    4b8c:	92 cf       	rjmp	.-220    	; 0x4ab2 <process_sms_body+0x694>
        str += 12;
    4b8e:	04 5f       	subi	r16, 0xF4	; 244
    4b90:	1f 4f       	sbci	r17, 0xFF	; 255
        sprintf_P(sms_text, PSTR("interval_after_motion_h=%uh;"), get_interval_after_motion_m());
    4b92:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <get_interval_after_motion_m>
    4b96:	9f 93       	push	r25
    4b98:	8f 93       	push	r24
    4b9a:	8f e8       	ldi	r24, 0x8F	; 143
    4b9c:	94 e0       	ldi	r25, 0x04	; 4
    4b9e:	9f 93       	push	r25
    4ba0:	8f 93       	push	r24
    4ba2:	ff 92       	push	r15
    4ba4:	ef 92       	push	r14
    4ba6:	0e 94 68 34 	call	0x68d0	; 0x68d0 <sprintf_P>
        return str;
    4baa:	0f 90       	pop	r0
    4bac:	0f 90       	pop	r0
    4bae:	0f 90       	pop	r0
    4bb0:	0f 90       	pop	r0
    4bb2:	0f 90       	pop	r0
    4bb4:	0f 90       	pop	r0
    4bb6:	7d cf       	rjmp	.-262    	; 0x4ab2 <process_sms_body+0x694>
        str += 10;
    4bb8:	06 5f       	subi	r16, 0xF6	; 246
    4bba:	1f 4f       	sbci	r17, 0xFF	; 255
        sprintf_P(sms_text, PSTR("autoguard=%d;"), get_autoguard());
    4bbc:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <get_autoguard>
    4bc0:	1f 92       	push	r1
    4bc2:	8f 93       	push	r24
    4bc4:	86 e7       	ldi	r24, 0x76	; 118
    4bc6:	94 e0       	ldi	r25, 0x04	; 4
    4bc8:	9f 93       	push	r25
    4bca:	8f 93       	push	r24
    4bcc:	ff 92       	push	r15
    4bce:	ef 92       	push	r14
    4bd0:	0e 94 68 34 	call	0x68d0	; 0x68d0 <sprintf_P>
        return str;
    4bd4:	0f 90       	pop	r0
    4bd6:	0f 90       	pop	r0
    4bd8:	0f 90       	pop	r0
    4bda:	0f 90       	pop	r0
    4bdc:	0f 90       	pop	r0
    4bde:	0f 90       	pop	r0
    4be0:	68 cf       	rjmp	.-304    	; 0x4ab2 <process_sms_body+0x694>
        str += 13;
    4be2:	03 5f       	subi	r16, 0xF3	; 243
    4be4:	1f 4f       	sbci	r17, 0xFF	; 255
        sprintf_P(sms_text, PSTR("accept_calls=%d;"), get_accept_calls());
    4be6:	0e 94 8d 10 	call	0x211a	; 0x211a <get_accept_calls>
    4bea:	1f 92       	push	r1
    4bec:	8f 93       	push	r24
    4bee:	87 e5       	ldi	r24, 0x57	; 87
    4bf0:	94 e0       	ldi	r25, 0x04	; 4
    4bf2:	9f 93       	push	r25
    4bf4:	8f 93       	push	r24
    4bf6:	ff 92       	push	r15
    4bf8:	ef 92       	push	r14
    4bfa:	0e 94 68 34 	call	0x68d0	; 0x68d0 <sprintf_P>
        return str;
    4bfe:	0f 90       	pop	r0
    4c00:	0f 90       	pop	r0
    4c02:	0f 90       	pop	r0
    4c04:	0f 90       	pop	r0
    4c06:	0f 90       	pop	r0
    4c08:	0f 90       	pop	r0
    4c0a:	53 cf       	rjmp	.-346    	; 0x4ab2 <process_sms_body+0x694>
        str += 13;
    4c0c:	03 5f       	subi	r16, 0xF3	; 243
    4c0e:	1f 4f       	sbci	r17, 0xFF	; 255
        sprintf_P(sms_text, PSTR("accept_sms=%d;"), get_accept_sms());
    4c10:	0e 94 93 10 	call	0x2126	; 0x2126 <get_accept_sms>
    4c14:	1f 92       	push	r1
    4c16:	8f 93       	push	r24
    4c18:	8c e3       	ldi	r24, 0x3C	; 60
    4c1a:	94 e0       	ldi	r25, 0x04	; 4
    4c1c:	9f 93       	push	r25
    4c1e:	8f 93       	push	r24
    4c20:	ff 92       	push	r15
    4c22:	ef 92       	push	r14
    4c24:	0e 94 68 34 	call	0x68d0	; 0x68d0 <sprintf_P>
        return str;
    4c28:	0f 90       	pop	r0
    4c2a:	0f 90       	pop	r0
    4c2c:	0f 90       	pop	r0
    4c2e:	0f 90       	pop	r0
    4c30:	0f 90       	pop	r0
    4c32:	0f 90       	pop	r0
    4c34:	3e cf       	rjmp	.-388    	; 0x4ab2 <process_sms_body+0x694>
        str += 13;
    4c36:	03 5f       	subi	r16, 0xF3	; 243
    4c38:	1f 4f       	sbci	r17, 0xFF	; 255
        sprintf_P(sms_text, PSTR("mtime_sens_ms=%u;"), (uint16_t)get_mtime_sens());
    4c3a:	0e 94 cf 10 	call	0x219e	; 0x219e <get_mtime_sens>
    4c3e:	9f 93       	push	r25
    4c40:	8f 93       	push	r24
    4c42:	8b e1       	ldi	r24, 0x1B	; 27
    4c44:	94 e0       	ldi	r25, 0x04	; 4
    4c46:	9f 93       	push	r25
    4c48:	8f 93       	push	r24
    4c4a:	ff 92       	push	r15
    4c4c:	ef 92       	push	r14
    4c4e:	0e 94 68 34 	call	0x68d0	; 0x68d0 <sprintf_P>
        return str;
    4c52:	0f 90       	pop	r0
    4c54:	0f 90       	pop	r0
    4c56:	0f 90       	pop	r0
    4c58:	0f 90       	pop	r0
    4c5a:	0f 90       	pop	r0
    4c5c:	0f 90       	pop	r0
    4c5e:	29 cf       	rjmp	.-430    	; 0x4ab2 <process_sms_body+0x694>
        if((find_phone_in_phone_list(get_phone_number(), ADMIN_LIST) == 0))
    4c60:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <get_phone_number>
    4c64:	61 e0       	ldi	r22, 0x01	; 1
    4c66:	0e 94 e3 21 	call	0x43c6	; 0x43c6 <find_phone_in_phone_list>
    4c6a:	88 23       	and	r24, r24
    4c6c:	89 f0       	breq	.+34     	; 0x4c90 <process_sms_body+0x872>
        set_first_usage(0);
    4c6e:	80 e0       	ldi	r24, 0x00	; 0
    4c70:	0e 94 f6 10 	call	0x21ec	; 0x21ec <set_first_usage>
        EEPROM_update();
    4c74:	0e 94 81 10 	call	0x2102	; 0x2102 <EEPROM_update>
        send_sms_p(PSTR("Device reset default, send adminphones=NUMBER_PHONES"), get_phone_number());
    4c78:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <get_phone_number>
    4c7c:	68 2f       	mov	r22, r24
    4c7e:	79 2f       	mov	r23, r25
    4c80:	80 e5       	ldi	r24, 0x50	; 80
    4c82:	96 e0       	ldi	r25, 0x06	; 6
    4c84:	0e 94 d5 15 	call	0x2baa	; 0x2baa <send_sms_p>
        reset_mcu(1);
    4c88:	81 e0       	ldi	r24, 0x01	; 1
    4c8a:	0e 94 84 1a 	call	0x3508	; 0x3508 <reset_mcu>
    4c8e:	b7 cc       	rjmp	.-1682   	; 0x45fe <process_sms_body+0x1e0>
            send_sms_p(PSTR("Access denied"), get_phone_number());
    4c90:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <get_phone_number>
    4c94:	68 2f       	mov	r22, r24
    4c96:	79 2f       	mov	r23, r25
    4c98:	85 e8       	ldi	r24, 0x85	; 133
    4c9a:	96 e0       	ldi	r25, 0x06	; 6
    4c9c:	0e 94 d5 15 	call	0x2baa	; 0x2baa <send_sms_p>
            return;
    4ca0:	ae cc       	rjmp	.-1700   	; 0x45fe <process_sms_body+0x1e0>
        if((find_phone_in_phone_list(get_phone_number(), ADMIN_LIST) == 0))
    4ca2:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <get_phone_number>
    4ca6:	61 e0       	ldi	r22, 0x01	; 1
    4ca8:	0e 94 e3 21 	call	0x43c6	; 0x43c6 <find_phone_in_phone_list>
    4cac:	88 23       	and	r24, r24
    4cae:	61 f0       	breq	.+24     	; 0x4cc8 <process_sms_body+0x8aa>
        send_sms_p(PSTR("Reset command accepted."), get_phone_number());
    4cb0:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <get_phone_number>
    4cb4:	68 2f       	mov	r22, r24
    4cb6:	79 2f       	mov	r23, r25
    4cb8:	82 e2       	ldi	r24, 0x22	; 34
    4cba:	96 e0       	ldi	r25, 0x06	; 6
    4cbc:	0e 94 d5 15 	call	0x2baa	; 0x2baa <send_sms_p>
        reset_mcu(1);
    4cc0:	81 e0       	ldi	r24, 0x01	; 1
    4cc2:	0e 94 84 1a 	call	0x3508	; 0x3508 <reset_mcu>
    4cc6:	9b cc       	rjmp	.-1738   	; 0x45fe <process_sms_body+0x1e0>
            send_sms_p(PSTR("Access denied"), get_phone_number());
    4cc8:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <get_phone_number>
    4ccc:	68 2f       	mov	r22, r24
    4cce:	79 2f       	mov	r23, r25
    4cd0:	8a e3       	ldi	r24, 0x3A	; 58
    4cd2:	96 e0       	ldi	r25, 0x06	; 6
    4cd4:	0e 94 d5 15 	call	0x2baa	; 0x2baa <send_sms_p>
            return;
    4cd8:	92 cc       	rjmp	.-1756   	; 0x45fe <process_sms_body+0x1e0>
        if((find_phone_in_phone_list(get_phone_number(), ADMIN_LIST) == 0))
    4cda:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <get_phone_number>
    4cde:	61 e0       	ldi	r22, 0x01	; 1
    4ce0:	0e 94 e3 21 	call	0x43c6	; 0x43c6 <find_phone_in_phone_list>
    4ce4:	88 23       	and	r24, r24
    4ce6:	49 f0       	breq	.+18     	; 0x4cfa <process_sms_body+0x8dc>
        send_sms_p(help_text, get_phone_number());
    4ce8:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <get_phone_number>
    4cec:	68 2f       	mov	r22, r24
    4cee:	79 2f       	mov	r23, r25
    4cf0:	88 e1       	ldi	r24, 0x18	; 24
    4cf2:	98 e0       	ldi	r25, 0x08	; 8
    4cf4:	0e 94 d5 15 	call	0x2baa	; 0x2baa <send_sms_p>
    4cf8:	82 cc       	rjmp	.-1788   	; 0x45fe <process_sms_body+0x1e0>
            send_sms_p(PSTR("Access denied"), get_phone_number());
    4cfa:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <get_phone_number>
    4cfe:	68 2f       	mov	r22, r24
    4d00:	79 2f       	mov	r23, r25
    4d02:	8e e0       	ldi	r24, 0x0E	; 14
    4d04:	96 e0       	ldi	r25, 0x06	; 6
    4d06:	0e 94 d5 15 	call	0x2baa	; 0x2baa <send_sms_p>
            return;
    4d0a:	79 cc       	rjmp	.-1806   	; 0x45fe <process_sms_body+0x1e0>
        if((find_phone_in_phone_list(get_phone_number(), ADMIN_LIST) == 0))
    4d0c:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <get_phone_number>
    4d10:	61 e0       	ldi	r22, 0x01	; 1
    4d12:	0e 94 e3 21 	call	0x43c6	; 0x43c6 <find_phone_in_phone_list>
    4d16:	88 23       	and	r24, r24
    4d18:	49 f0       	breq	.+18     	; 0x4d2c <process_sms_body+0x90e>
        send_sms_p(help_get, get_phone_number());
    4d1a:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <get_phone_number>
    4d1e:	68 2f       	mov	r22, r24
    4d20:	79 2f       	mov	r23, r25
    4d22:	87 e7       	ldi	r24, 0x77	; 119
    4d24:	97 e0       	ldi	r25, 0x07	; 7
    4d26:	0e 94 d5 15 	call	0x2baa	; 0x2baa <send_sms_p>
    4d2a:	69 cc       	rjmp	.-1838   	; 0x45fe <process_sms_body+0x1e0>
            send_sms_p(PSTR("Access denied"), get_phone_number());
    4d2c:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <get_phone_number>
    4d30:	68 2f       	mov	r22, r24
    4d32:	79 2f       	mov	r23, r25
    4d34:	87 ef       	ldi	r24, 0xF7	; 247
    4d36:	95 e0       	ldi	r25, 0x05	; 5
    4d38:	0e 94 d5 15 	call	0x2baa	; 0x2baa <send_sms_p>
            return;
    4d3c:	60 cc       	rjmp	.-1856   	; 0x45fe <process_sms_body+0x1e0>
        if((find_phone_in_phone_list(get_phone_number(), ADMIN_LIST) == 0))
    4d3e:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <get_phone_number>
    4d42:	61 e0       	ldi	r22, 0x01	; 1
    4d44:	0e 94 e3 21 	call	0x43c6	; 0x43c6 <find_phone_in_phone_list>
    4d48:	88 23       	and	r24, r24
    4d4a:	49 f0       	breq	.+18     	; 0x4d5e <process_sms_body+0x940>
        send_sms_p(help_set, get_phone_number());
    4d4c:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <get_phone_number>
    4d50:	68 2f       	mov	r22, r24
    4d52:	79 2f       	mov	r23, r25
    4d54:	86 ed       	ldi	r24, 0xD6	; 214
    4d56:	96 e0       	ldi	r25, 0x06	; 6
    4d58:	0e 94 d5 15 	call	0x2baa	; 0x2baa <send_sms_p>
    4d5c:	50 cc       	rjmp	.-1888   	; 0x45fe <process_sms_body+0x1e0>
            send_sms_p(PSTR("Access denied"), get_phone_number());
    4d5e:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <get_phone_number>
    4d62:	68 2f       	mov	r22, r24
    4d64:	79 2f       	mov	r23, r25
    4d66:	80 ee       	ldi	r24, 0xE0	; 224
    4d68:	95 e0       	ldi	r25, 0x05	; 5
    4d6a:	0e 94 d5 15 	call	0x2baa	; 0x2baa <send_sms_p>
            return;
    4d6e:	47 cc       	rjmp	.-1906   	; 0x45fe <process_sms_body+0x1e0>
        if((find_phone_in_phone_list(get_phone_number(), ADMIN_LIST) == 0))
    4d70:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <get_phone_number>
    4d74:	61 e0       	ldi	r22, 0x01	; 1
    4d76:	0e 94 e3 21 	call	0x43c6	; 0x43c6 <find_phone_in_phone_list>
    4d7a:	88 23       	and	r24, r24
    4d7c:	29 f0       	breq	.+10     	; 0x4d88 <process_sms_body+0x96a>
        send_sms_report(get_phone_number());
    4d7e:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <get_phone_number>
    4d82:	0e 94 4a 0b 	call	0x1694	; 0x1694 <send_sms_report>
    4d86:	3b cc       	rjmp	.-1930   	; 0x45fe <process_sms_body+0x1e0>
            send_sms_p(PSTR("Access denied"), get_phone_number());
    4d88:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <get_phone_number>
    4d8c:	68 2f       	mov	r22, r24
    4d8e:	79 2f       	mov	r23, r25
    4d90:	8a ec       	ldi	r24, 0xCA	; 202
    4d92:	95 e0       	ldi	r25, 0x05	; 5
    4d94:	0e 94 d5 15 	call	0x2baa	; 0x2baa <send_sms_p>
            return;
    4d98:	32 cc       	rjmp	.-1948   	; 0x45fe <process_sms_body+0x1e0>
        if( get_admin_mode() == 0 || (find_phone_in_phone_list(get_phone_number(), ADMIN_LIST) == 1))
    4d9a:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <get_admin_mode>
    4d9e:	88 23       	and	r24, r24
    4da0:	39 f0       	breq	.+14     	; 0x4db0 <process_sms_body+0x992>
    4da2:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <get_phone_number>
    4da6:	61 e0       	ldi	r22, 0x01	; 1
    4da8:	0e 94 e3 21 	call	0x43c6	; 0x43c6 <find_phone_in_phone_list>
    4dac:	81 30       	cpi	r24, 0x01	; 1
    4dae:	c1 f4       	brne	.+48     	; 0x4de0 <process_sms_body+0x9c2>
            ptr = set_phones(ptr, &get_phones(0)[0], TOTAL_ADMIN_NUMBER);
    4db0:	80 e0       	ldi	r24, 0x00	; 0
    4db2:	0e 94 ae 10 	call	0x215c	; 0x215c <get_phones>
    4db6:	68 2f       	mov	r22, r24
    4db8:	79 2f       	mov	r23, r25
    4dba:	45 e0       	ldi	r20, 0x05	; 5
    4dbc:	c8 01       	movw	r24, r16
    4dbe:	0c 96       	adiw	r24, 0x0c	; 12
    4dc0:	0e 94 58 21 	call	0x42b0	; 0x42b0 <set_phones>
            set_admin_mode(1);
    4dc4:	81 e0       	ldi	r24, 0x01	; 1
    4dc6:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <set_admin_mode>
            EEPROM_update();
    4dca:	0e 94 81 10 	call	0x2102	; 0x2102 <EEPROM_update>
            send_sms_p(PSTR("Ok"), get_phone_number());
    4dce:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <get_phone_number>
    4dd2:	68 2f       	mov	r22, r24
    4dd4:	79 2f       	mov	r23, r25
    4dd6:	8a eb       	ldi	r24, 0xBA	; 186
    4dd8:	95 e0       	ldi	r25, 0x05	; 5
    4dda:	0e 94 d5 15 	call	0x2baa	; 0x2baa <send_sms_p>
            return;
    4dde:	0f cc       	rjmp	.-2018   	; 0x45fe <process_sms_body+0x1e0>
            send_sms_p(PSTR("Access denied"), get_phone_number());
    4de0:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <get_phone_number>
    4de4:	68 2f       	mov	r22, r24
    4de6:	79 2f       	mov	r23, r25
    4de8:	8c ea       	ldi	r24, 0xAC	; 172
    4dea:	95 e0       	ldi	r25, 0x05	; 5
    4dec:	0e 94 d5 15 	call	0x2baa	; 0x2baa <send_sms_p>
            return;
    4df0:	06 cc       	rjmp	.-2036   	; 0x45fe <process_sms_body+0x1e0>
        if(*++ptr != ';')
    4df2:	f8 01       	movw	r30, r16
    4df4:	87 81       	ldd	r24, Z+7	; 0x07
    4df6:	8b 33       	cpi	r24, 0x3B	; 59
    4df8:	09 f0       	breq	.+2      	; 0x4dfc <process_sms_body+0x9de>
    4dfa:	01 cc       	rjmp	.-2046   	; 0x45fe <process_sms_body+0x1e0>
            DigitalWrite(PIN_LIGHT, LOW);
    4dfc:	5f 98       	cbi	0x0b, 7	; 11
    4dfe:	ff cb       	rjmp	.-2050   	; 0x45fe <process_sms_body+0x1e0>
        if(i && !err)
    4e00:	33 20       	and	r3, r3
    4e02:	09 f4       	brne	.+2      	; 0x4e06 <process_sms_body+0x9e8>
    4e04:	fc cb       	rjmp	.-2056   	; 0x45fe <process_sms_body+0x1e0>
            send_sms(sms_text, get_phone_number());
    4e06:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <get_phone_number>
    4e0a:	68 2f       	mov	r22, r24
    4e0c:	79 2f       	mov	r23, r25
    4e0e:	ce 01       	movw	r24, r28
    4e10:	01 96       	adiw	r24, 0x01	; 1
    4e12:	0e 94 43 15 	call	0x2a86	; 0x2a86 <send_sms>
    4e16:	f3 cb       	rjmp	.-2074   	; 0x45fe <process_sms_body+0x1e0>
        if(i && !err)
    4e18:	ff 20       	and	r15, r15
    4e1a:	09 f4       	brne	.+2      	; 0x4e1e <process_sms_body+0xa00>
    4e1c:	e5 cb       	rjmp	.-2102   	; 0x45e8 <process_sms_body+0x1ca>
            EEPROM_update();
    4e1e:	0e 94 81 10 	call	0x2102	; 0x2102 <EEPROM_update>
            send_sms_p(PSTR("ok"), get_phone_number());
    4e22:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <get_phone_number>
    4e26:	68 2f       	mov	r22, r24
    4e28:	79 2f       	mov	r23, r25
    4e2a:	80 ec       	ldi	r24, 0xC0	; 192
    4e2c:	96 e0       	ldi	r25, 0x06	; 6
    4e2e:	0e 94 d5 15 	call	0x2baa	; 0x2baa <send_sms_p>
    4e32:	e5 cb       	rjmp	.-2102   	; 0x45fe <process_sms_body+0x1e0>

00004e34 <set_my_phone>:
//*******************************************************************************************************************
void set_my_phone(void)
{
    set_phones("+380713318090;", &get_phones(0)[0], 1);
    4e34:	80 e0       	ldi	r24, 0x00	; 0
    4e36:	0e 94 ae 10 	call	0x215c	; 0x215c <get_phones>
    4e3a:	68 2f       	mov	r22, r24
    4e3c:	79 2f       	mov	r23, r25
    4e3e:	41 e0       	ldi	r20, 0x01	; 1
    4e40:	86 ef       	ldi	r24, 0xF6	; 246
    4e42:	92 e0       	ldi	r25, 0x02	; 2
    4e44:	0e 94 58 21 	call	0x42b0	; 0x42b0 <set_phones>
    set_admin_mode(1);
    4e48:	81 e0       	ldi	r24, 0x01	; 1
    4e4a:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <set_admin_mode>
}
    4e4e:	08 95       	ret

00004e50 <__vector_7>:
#define set_tx_pin_high()      ( SOFTUART_TXPORT |=  ( 1 << SOFTUART_TXBIT ) )
#define set_tx_pin_low()       ( SOFTUART_TXPORT &= ~( 1 << SOFTUART_TXBIT ) )
#define get_rx_pin_status()    ( SOFTUART_RXPIN  &   ( 1 << SOFTUART_RXBIT ) )

ISR(SOFTUART_T_COMP_LABEL)
{
    4e50:	1f 92       	push	r1
    4e52:	1f b6       	in	r1, 0x3f	; 63
    4e54:	1f 92       	push	r1
    4e56:	11 24       	eor	r1, r1
    4e58:	8f 93       	push	r24
    4e5a:	9f 93       	push	r25
    4e5c:	ef 93       	push	r30
    4e5e:	ff 93       	push	r31

	unsigned char start_bit, flag_in;
	unsigned char tmp;

	// Transmitter Section
	if ( flag_tx_busy == SU_TRUE ) {
    4e60:	80 91 41 05 	lds	r24, 0x0541	; 0x800541 <flag_tx_busy>
    4e64:	81 30       	cpi	r24, 0x01	; 1
    4e66:	39 f1       	breq	.+78     	; 0x4eb6 <__vector_7+0x66>
		}
		timer_tx_ctr = tmp;
	}

	// Receiver Section
	if ( flag_rx_off == SU_FALSE ) {
    4e68:	80 91 43 05 	lds	r24, 0x0543	; 0x800543 <flag_rx_off>
    4e6c:	81 11       	cpse	r24, r1
    4e6e:	80 c0       	rjmp	.+256    	; 0x4f70 <__vector_7+0x120>
		if ( flag_rx_waiting_for_stop_bit ) {
    4e70:	80 91 3c 05 	lds	r24, 0x053C	; 0x80053c <flag_rx_waiting_for_stop_bit.4>
    4e74:	88 23       	and	r24, r24
    4e76:	09 f4       	brne	.+2      	; 0x4e7a <__vector_7+0x2a>
    4e78:	45 c0       	rjmp	.+138    	; 0x4f04 <__vector_7+0xb4>
			if ( --timer_rx_ctr == 0 ) {
    4e7a:	80 91 3b 05 	lds	r24, 0x053B	; 0x80053b <timer_rx_ctr.3>
    4e7e:	81 50       	subi	r24, 0x01	; 1
    4e80:	80 93 3b 05 	sts	0x053B, r24	; 0x80053b <timer_rx_ctr.3>
    4e84:	81 11       	cpse	r24, r1
    4e86:	74 c0       	rjmp	.+232    	; 0x4f70 <__vector_7+0x120>
				flag_rx_waiting_for_stop_bit = SU_FALSE;
    4e88:	10 92 3c 05 	sts	0x053C, r1	; 0x80053c <flag_rx_waiting_for_stop_bit.4>
				flag_rx_ready = SU_FALSE;
    4e8c:	10 92 42 05 	sts	0x0542, r1	; 0x800542 <flag_rx_ready>
				inbuf[qin] = internal_rx_buffer;
    4e90:	e0 91 45 05 	lds	r30, 0x0545	; 0x800545 <qin>
    4e94:	f0 e0       	ldi	r31, 0x00	; 0
    4e96:	80 91 3a 05 	lds	r24, 0x053A	; 0x80053a <internal_rx_buffer.2>
    4e9a:	ea 5b       	subi	r30, 0xBA	; 186
    4e9c:	fa 4f       	sbci	r31, 0xFA	; 250
    4e9e:	80 83       	st	Z, r24
				if ( ++qin >= SOFTUART_IN_BUF_SIZE ) {
    4ea0:	80 91 45 05 	lds	r24, 0x0545	; 0x800545 <qin>
    4ea4:	8f 5f       	subi	r24, 0xFF	; 255
    4ea6:	80 93 45 05 	sts	0x0545, r24	; 0x800545 <qin>
    4eaa:	80 32       	cpi	r24, 0x20	; 32
    4eac:	08 f4       	brcc	.+2      	; 0x4eb0 <__vector_7+0x60>
    4eae:	60 c0       	rjmp	.+192    	; 0x4f70 <__vector_7+0x120>
					// overflow - reset inbuf-index
					qin = 0;
    4eb0:	10 92 45 05 	sts	0x0545, r1	; 0x800545 <qin>
    4eb4:	5d c0       	rjmp	.+186    	; 0x4f70 <__vector_7+0x120>
		tmp = timer_tx_ctr;
    4eb6:	80 91 40 05 	lds	r24, 0x0540	; 0x800540 <timer_tx_ctr>
		if ( --tmp == 0 ) { // if ( --timer_tx_ctr <= 0 )
    4eba:	9f ef       	ldi	r25, 0xFF	; 255
    4ebc:	98 0f       	add	r25, r24
    4ebe:	81 30       	cpi	r24, 0x01	; 1
    4ec0:	e1 f4       	brne	.+56     	; 0x4efa <__vector_7+0xaa>
			if ( internal_tx_buffer & 0x01 ) {
    4ec2:	80 91 3d 05 	lds	r24, 0x053D	; 0x80053d <internal_tx_buffer>
    4ec6:	90 91 3e 05 	lds	r25, 0x053E	; 0x80053e <internal_tx_buffer+0x1>
    4eca:	80 ff       	sbrs	r24, 0
    4ecc:	19 c0       	rjmp	.+50     	; 0x4f00 <__vector_7+0xb0>
				set_tx_pin_high();
    4ece:	5b 9a       	sbi	0x0b, 3	; 11
			internal_tx_buffer >>= 1;
    4ed0:	80 91 3d 05 	lds	r24, 0x053D	; 0x80053d <internal_tx_buffer>
    4ed4:	90 91 3e 05 	lds	r25, 0x053E	; 0x80053e <internal_tx_buffer+0x1>
    4ed8:	96 95       	lsr	r25
    4eda:	87 95       	ror	r24
    4edc:	90 93 3e 05 	sts	0x053E, r25	; 0x80053e <internal_tx_buffer+0x1>
    4ee0:	80 93 3d 05 	sts	0x053D, r24	; 0x80053d <internal_tx_buffer>
			if ( --bits_left_in_tx == 0 ) {
    4ee4:	80 91 3f 05 	lds	r24, 0x053F	; 0x80053f <bits_left_in_tx>
    4ee8:	81 50       	subi	r24, 0x01	; 1
    4eea:	80 93 3f 05 	sts	0x053F, r24	; 0x80053f <bits_left_in_tx>
			tmp = 3; // timer_tx_ctr = 3;
    4eee:	93 e0       	ldi	r25, 0x03	; 3
			if ( --bits_left_in_tx == 0 ) {
    4ef0:	81 11       	cpse	r24, r1
    4ef2:	03 c0       	rjmp	.+6      	; 0x4efa <__vector_7+0xaa>
				flag_tx_busy = SU_FALSE;
    4ef4:	10 92 41 05 	sts	0x0541, r1	; 0x800541 <flag_tx_busy>
			tmp = 3; // timer_tx_ctr = 3;
    4ef8:	93 e0       	ldi	r25, 0x03	; 3
		timer_tx_ctr = tmp;
    4efa:	90 93 40 05 	sts	0x0540, r25	; 0x800540 <timer_tx_ctr>
    4efe:	b4 cf       	rjmp	.-152    	; 0x4e68 <__vector_7+0x18>
				set_tx_pin_low();
    4f00:	5b 98       	cbi	0x0b, 3	; 11
    4f02:	e6 cf       	rjmp	.-52     	; 0x4ed0 <__vector_7+0x80>
				}
			}
		}
		else {  // rx_test_busy
			if ( flag_rx_ready == SU_FALSE ) {
    4f04:	80 91 42 05 	lds	r24, 0x0542	; 0x800542 <flag_rx_ready>
    4f08:	81 11       	cpse	r24, r1
    4f0a:	10 c0       	rjmp	.+32     	; 0x4f2c <__vector_7+0xdc>
				start_bit = get_rx_pin_status();
				// test for start bit
				if ( start_bit == 0 ) {
    4f0c:	4a 99       	sbic	0x09, 2	; 9
    4f0e:	30 c0       	rjmp	.+96     	; 0x4f70 <__vector_7+0x120>
					flag_rx_ready      = SU_TRUE;
    4f10:	81 e0       	ldi	r24, 0x01	; 1
    4f12:	80 93 42 05 	sts	0x0542, r24	; 0x800542 <flag_rx_ready>
					internal_rx_buffer = 0;
    4f16:	10 92 3a 05 	sts	0x053A, r1	; 0x80053a <internal_rx_buffer.2>
					timer_rx_ctr       = 4;
    4f1a:	94 e0       	ldi	r25, 0x04	; 4
    4f1c:	90 93 3b 05 	sts	0x053B, r25	; 0x80053b <timer_rx_ctr.3>
					bits_left_in_rx    = RX_NUM_OF_BITS;
    4f20:	98 e0       	ldi	r25, 0x08	; 8
    4f22:	90 93 39 05 	sts	0x0539, r25	; 0x800539 <bits_left_in_rx.1>
					rx_mask            = 1;
    4f26:	80 93 38 05 	sts	0x0538, r24	; 0x800538 <rx_mask.0>
    4f2a:	22 c0       	rjmp	.+68     	; 0x4f70 <__vector_7+0x120>
				}
			}
			else {  // rx_busy
				tmp = timer_rx_ctr;
    4f2c:	80 91 3b 05 	lds	r24, 0x053B	; 0x80053b <timer_rx_ctr.3>
				if ( --tmp == 0 ) { // if ( --timer_rx_ctr == 0 ) {
    4f30:	9f ef       	ldi	r25, 0xFF	; 255
    4f32:	98 0f       	add	r25, r24
    4f34:	81 30       	cpi	r24, 0x01	; 1
    4f36:	d1 f4       	brne	.+52     	; 0x4f6c <__vector_7+0x11c>
					// rcv
					tmp = 3;
					flag_in = get_rx_pin_status();
					if ( flag_in ) {
    4f38:	4a 9b       	sbis	0x09, 2	; 9
    4f3a:	07 c0       	rjmp	.+14     	; 0x4f4a <__vector_7+0xfa>
						internal_rx_buffer |= rx_mask;
    4f3c:	80 91 3a 05 	lds	r24, 0x053A	; 0x80053a <internal_rx_buffer.2>
    4f40:	90 91 38 05 	lds	r25, 0x0538	; 0x800538 <rx_mask.0>
    4f44:	89 2b       	or	r24, r25
    4f46:	80 93 3a 05 	sts	0x053A, r24	; 0x80053a <internal_rx_buffer.2>
					}
					rx_mask <<= 1;
    4f4a:	80 91 38 05 	lds	r24, 0x0538	; 0x800538 <rx_mask.0>
    4f4e:	88 0f       	add	r24, r24
    4f50:	80 93 38 05 	sts	0x0538, r24	; 0x800538 <rx_mask.0>
					if ( --bits_left_in_rx == 0 ) {
    4f54:	80 91 39 05 	lds	r24, 0x0539	; 0x800539 <bits_left_in_rx.1>
    4f58:	81 50       	subi	r24, 0x01	; 1
    4f5a:	80 93 39 05 	sts	0x0539, r24	; 0x800539 <bits_left_in_rx.1>
					tmp = 3;
    4f5e:	93 e0       	ldi	r25, 0x03	; 3
					if ( --bits_left_in_rx == 0 ) {
    4f60:	81 11       	cpse	r24, r1
    4f62:	04 c0       	rjmp	.+8      	; 0x4f6c <__vector_7+0x11c>
						flag_rx_waiting_for_stop_bit = SU_TRUE;
    4f64:	81 e0       	ldi	r24, 0x01	; 1
    4f66:	80 93 3c 05 	sts	0x053C, r24	; 0x80053c <flag_rx_waiting_for_stop_bit.4>
					tmp = 3;
    4f6a:	93 e0       	ldi	r25, 0x03	; 3
					}
				}
				timer_rx_ctr = tmp;
    4f6c:	90 93 3b 05 	sts	0x053B, r25	; 0x80053b <timer_rx_ctr.3>
			}
		}
	}
}
    4f70:	ff 91       	pop	r31
    4f72:	ef 91       	pop	r30
    4f74:	9f 91       	pop	r25
    4f76:	8f 91       	pop	r24
    4f78:	1f 90       	pop	r1
    4f7a:	1f be       	out	0x3f, r1	; 63
    4f7c:	1f 90       	pop	r1
    4f7e:	18 95       	reti

00004f80 <softuart_init>:
	SREG = sreg_tmp;
}

void softuart_init( void )
{
	flag_tx_busy  = SU_FALSE;
    4f80:	10 92 41 05 	sts	0x0541, r1	; 0x800541 <flag_tx_busy>
	flag_rx_ready = SU_FALSE;
    4f84:	10 92 42 05 	sts	0x0542, r1	; 0x800542 <flag_rx_ready>
	flag_rx_off   = SU_FALSE;
    4f88:	10 92 43 05 	sts	0x0543, r1	; 0x800543 <flag_rx_off>

	set_tx_pin_high(); /* mt: set to high to avoid garbage on init */
    4f8c:	5b 9a       	sbi	0x0b, 3	; 11
	SOFTUART_TXDDR |=  ( 1 << SOFTUART_TXBIT );
    4f8e:	53 9a       	sbi	0x0a, 3	; 10
	SOFTUART_RXDDR &= ~( 1 << SOFTUART_RXBIT );
    4f90:	52 98       	cbi	0x0a, 2	; 10
	sreg_tmp = SREG;
    4f92:	9f b7       	in	r25, 0x3f	; 63
	cli();
    4f94:	f8 94       	cli
	SOFTUART_T_COMP_REG = SOFTUART_TIMERTOP;     /* set top */
    4f96:	84 e4       	ldi	r24, 0x44	; 68
    4f98:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	SOFTUART_T_CONTR_REGA = SOFTUART_CTC_MASKA | SOFTUART_PRESC_MASKA;
    4f9c:	82 e0       	ldi	r24, 0x02	; 2
    4f9e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
	SOFTUART_T_CONTR_REGB = SOFTUART_CTC_MASKB | SOFTUART_PRESC_MASKB;
    4fa2:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
	SOFTUART_T_INTCTL_REG |= SOFTUART_CMPINT_EN_MASK;
    4fa6:	e0 e7       	ldi	r30, 0x70	; 112
    4fa8:	f0 e0       	ldi	r31, 0x00	; 0
    4faa:	80 81       	ld	r24, Z
    4fac:	82 60       	ori	r24, 0x02	; 2
    4fae:	80 83       	st	Z, r24
	SOFTUART_T_CNT_REG = 0; /* reset counter */
    4fb0:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	SREG = sreg_tmp;
    4fb4:	9f bf       	out	0x3f, r25	; 63

	io_init();
	timer_init();
}
    4fb6:	08 95       	ret

00004fb8 <softuart_turn_rx_on>:
	// add watchdog-reset here if needed
}

void softuart_turn_rx_on( void )
{
	flag_rx_off = SU_FALSE;
    4fb8:	10 92 43 05 	sts	0x0543, r1	; 0x800543 <flag_rx_off>
}
    4fbc:	08 95       	ret

00004fbe <softuart_turn_rx_off>:

void softuart_turn_rx_off( void )
{
	flag_rx_off = SU_TRUE;
    4fbe:	81 e0       	ldi	r24, 0x01	; 1
    4fc0:	80 93 43 05 	sts	0x0543, r24	; 0x800543 <flag_rx_off>
}
    4fc4:	08 95       	ret

00004fc6 <softuart_getchar>:

char softuart_getchar( void )
{
	char ch;

	while ( qout == qin ) {
    4fc6:	90 91 44 05 	lds	r25, 0x0544	; 0x800544 <qout>
    4fca:	80 91 45 05 	lds	r24, 0x0545	; 0x800545 <qin>
    4fce:	98 17       	cp	r25, r24
    4fd0:	e1 f3       	breq	.-8      	; 0x4fca <softuart_getchar+0x4>
		idle();
	}
	ch = inbuf[qout];
    4fd2:	e9 2f       	mov	r30, r25
    4fd4:	f0 e0       	ldi	r31, 0x00	; 0
    4fd6:	ea 5b       	subi	r30, 0xBA	; 186
    4fd8:	fa 4f       	sbci	r31, 0xFA	; 250
    4fda:	80 81       	ld	r24, Z
	if ( ++qout >= SOFTUART_IN_BUF_SIZE ) {
    4fdc:	9f 5f       	subi	r25, 0xFF	; 255
    4fde:	90 32       	cpi	r25, 0x20	; 32
    4fe0:	18 f4       	brcc	.+6      	; 0x4fe8 <softuart_getchar+0x22>
    4fe2:	90 93 44 05 	sts	0x0544, r25	; 0x800544 <qout>
    4fe6:	08 95       	ret
		qout = 0;
    4fe8:	10 92 44 05 	sts	0x0544, r1	; 0x800544 <qout>
	}

	return( ch );
}
    4fec:	08 95       	ret

00004fee <softuart_kbhit>:

unsigned char softuart_kbhit( void )
{
	return( qin != qout );
    4fee:	90 91 45 05 	lds	r25, 0x0545	; 0x800545 <qin>
    4ff2:	81 e0       	ldi	r24, 0x01	; 1
    4ff4:	20 91 44 05 	lds	r18, 0x0544	; 0x800544 <qout>
    4ff8:	29 13       	cpse	r18, r25
}
    4ffa:	08 95       	ret
	return( qin != qout );
    4ffc:	80 e0       	ldi	r24, 0x00	; 0
    4ffe:	fd cf       	rjmp	.-6      	; 0x4ffa <softuart_kbhit+0xc>

00005000 <softuart_flush_input_buffer>:

void softuart_flush_input_buffer( void )
{
	qin  = 0;
    5000:	10 92 45 05 	sts	0x0545, r1	; 0x800545 <qin>
	qout = 0;
    5004:	10 92 44 05 	sts	0x0544, r1	; 0x800544 <qout>
}
    5008:	08 95       	ret

0000500a <softuart_transmit_busy>:

unsigned char softuart_transmit_busy( void )
{
	return ( flag_tx_busy == SU_TRUE ) ? 1 : 0;
    500a:	90 91 41 05 	lds	r25, 0x0541	; 0x800541 <flag_tx_busy>
    500e:	81 e0       	ldi	r24, 0x01	; 1
    5010:	91 30       	cpi	r25, 0x01	; 1
    5012:	09 f0       	breq	.+2      	; 0x5016 <softuart_transmit_busy+0xc>
    5014:	80 e0       	ldi	r24, 0x00	; 0
}
    5016:	08 95       	ret

00005018 <softuart_putchar>:

void softuart_putchar(  char ch )
{
	while ( flag_tx_busy == SU_TRUE ) {
    5018:	90 91 41 05 	lds	r25, 0x0541	; 0x800541 <flag_tx_busy>
    501c:	91 30       	cpi	r25, 0x01	; 1
    501e:	e1 f3       	breq	.-8      	; 0x5018 <softuart_putchar>
		; // wait for transmitter ready
		  // add watchdog-reset here if needed;
	}

	// invoke_UART_transmit
	timer_tx_ctr       = 3;
    5020:	93 e0       	ldi	r25, 0x03	; 3
    5022:	90 93 40 05 	sts	0x0540, r25	; 0x800540 <timer_tx_ctr>
	bits_left_in_tx    = TX_NUM_OF_BITS;
    5026:	9a e0       	ldi	r25, 0x0A	; 10
    5028:	90 93 3f 05 	sts	0x053F, r25	; 0x80053f <bits_left_in_tx>
	internal_tx_buffer = ( ch << 1 ) | 0x200;
    502c:	88 0f       	add	r24, r24
    502e:	99 0b       	sbc	r25, r25
    5030:	92 60       	ori	r25, 0x02	; 2
    5032:	90 93 3e 05 	sts	0x053E, r25	; 0x80053e <internal_tx_buffer+0x1>
    5036:	80 93 3d 05 	sts	0x053D, r24	; 0x80053d <internal_tx_buffer>
	flag_tx_busy       = SU_TRUE;
    503a:	81 e0       	ldi	r24, 0x01	; 1
    503c:	80 93 41 05 	sts	0x0541, r24	; 0x800541 <flag_tx_busy>
}
    5040:	08 95       	ret

00005042 <softuart_puts>:

void softuart_puts( char *s )
{
    5042:	cf 93       	push	r28
    5044:	df 93       	push	r29
    5046:	c8 2f       	mov	r28, r24
    5048:	d9 2f       	mov	r29, r25
	while ( *s ) {
    504a:	88 81       	ld	r24, Y
    504c:	88 23       	and	r24, r24
    504e:	31 f0       	breq	.+12     	; 0x505c <softuart_puts+0x1a>
    5050:	21 96       	adiw	r28, 0x01	; 1
		softuart_putchar( *s++ );
    5052:	0e 94 0c 28 	call	0x5018	; 0x5018 <softuart_putchar>
	while ( *s ) {
    5056:	89 91       	ld	r24, Y+
    5058:	81 11       	cpse	r24, r1
    505a:	fb cf       	rjmp	.-10     	; 0x5052 <softuart_puts+0x10>
	}
}
    505c:	df 91       	pop	r29
    505e:	cf 91       	pop	r28
    5060:	08 95       	ret

00005062 <softuart_puts_ln>:
void softuart_puts_ln(  char *s )
{
    5062:	cf 93       	push	r28
    5064:	df 93       	push	r29
    5066:	c8 2f       	mov	r28, r24
    5068:	d9 2f       	mov	r29, r25
	while ( *s ) {
    506a:	88 81       	ld	r24, Y
    506c:	88 23       	and	r24, r24
    506e:	31 f0       	breq	.+12     	; 0x507c <softuart_puts_ln+0x1a>
    5070:	21 96       	adiw	r28, 0x01	; 1
		softuart_putchar( *s++ );
    5072:	0e 94 0c 28 	call	0x5018	; 0x5018 <softuart_putchar>
	while ( *s ) {
    5076:	89 91       	ld	r24, Y+
    5078:	81 11       	cpse	r24, r1
    507a:	fb cf       	rjmp	.-10     	; 0x5072 <softuart_puts_ln+0x10>
	}
	softuart_puts("\r\n" );
    507c:	85 e0       	ldi	r24, 0x05	; 5
    507e:	93 e0       	ldi	r25, 0x03	; 3
    5080:	0e 94 21 28 	call	0x5042	; 0x5042 <softuart_puts>
}
    5084:	df 91       	pop	r29
    5086:	cf 91       	pop	r28
    5088:	08 95       	ret

0000508a <softuart_puts_p>:
void softuart_puts_p( const char *prg_s )
{
    508a:	cf 93       	push	r28
    508c:	df 93       	push	r29
    508e:	e8 2f       	mov	r30, r24
    5090:	f9 2f       	mov	r31, r25
	char c;

	while ( ( c = pgm_read_byte( prg_s++ ) ) ) {
    5092:	ef 01       	movw	r28, r30
    5094:	21 96       	adiw	r28, 0x01	; 1
    5096:	84 91       	lpm	r24, Z
    5098:	88 23       	and	r24, r24
    509a:	39 f0       	breq	.+14     	; 0x50aa <softuart_puts_p+0x20>
		softuart_putchar(c);
    509c:	0e 94 0c 28 	call	0x5018	; 0x5018 <softuart_putchar>
	while ( ( c = pgm_read_byte( prg_s++ ) ) ) {
    50a0:	fe 01       	movw	r30, r28
    50a2:	84 91       	lpm	r24, Z
    50a4:	21 96       	adiw	r28, 0x01	; 1
    50a6:	81 11       	cpse	r24, r1
    50a8:	f9 cf       	rjmp	.-14     	; 0x509c <softuart_puts_p+0x12>
	}
	softuart_puts( "\r\n" );
    50aa:	85 e0       	ldi	r24, 0x05	; 5
    50ac:	93 e0       	ldi	r25, 0x03	; 3
    50ae:	0e 94 21 28 	call	0x5042	; 0x5042 <softuart_puts>
}
    50b2:	df 91       	pop	r29
    50b4:	cf 91       	pop	r28
    50b6:	08 95       	ret

000050b8 <check_internet>:
//*************************************************************************************************
void check_internet(void)
{
    static uint8_t _temp_flag = 0;

    if(flag_internet == 0 && _temp_flag == 0)
    50b8:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <flag_internet>
    50bc:	81 11       	cpse	r24, r1
    50be:	0b c0       	rjmp	.+22     	; 0x50d6 <check_internet+0x1e>
    50c0:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <_temp_flag.2>
    50c4:	81 11       	cpse	r24, r1
    if(flag_internet == 1 && _temp_flag == 1)
    {
        _temp_flag = 0;
        send_sms_admins(PSTR("Internet OK"));
    }
}
    50c6:	08 95       	ret
        _temp_flag = 1;
    50c8:	81 e0       	ldi	r24, 0x01	; 1
    50ca:	80 93 66 05 	sts	0x0566, r24	; 0x800566 <_temp_flag.2>
        send_sms_admins(PSTR("No Internet"));
    50ce:	85 ec       	ldi	r24, 0xC5	; 197
    50d0:	98 e0       	ldi	r25, 0x08	; 8
    50d2:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <send_sms_admins>
    if(flag_internet == 1 && _temp_flag == 1)
    50d6:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <flag_internet>
    50da:	81 30       	cpi	r24, 0x01	; 1
    50dc:	a1 f7       	brne	.-24     	; 0x50c6 <check_internet+0xe>
    50de:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <_temp_flag.2>
    50e2:	81 30       	cpi	r24, 0x01	; 1
    50e4:	81 f7       	brne	.-32     	; 0x50c6 <check_internet+0xe>
        _temp_flag = 0;
    50e6:	10 92 66 05 	sts	0x0566, r1	; 0x800566 <_temp_flag.2>
        send_sms_admins(PSTR("Internet OK"));
    50ea:	89 eb       	ldi	r24, 0xB9	; 185
    50ec:	98 e0       	ldi	r25, 0x08	; 8
    50ee:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <send_sms_admins>
}
    50f2:	e9 cf       	rjmp	.-46     	; 0x50c6 <check_internet+0xe>

000050f4 <Crc8>:
    0x82, 0xB3, 0xE0, 0xD1, 0x46, 0x77, 0x24, 0x15,
    0x3B, 0x0A, 0x59, 0x68, 0xFF, 0xCE, 0x9D, 0xAC
};

unsigned char Crc8(char *pcBlock, unsigned char len)
{
    50f4:	48 2f       	mov	r20, r24
    50f6:	59 2f       	mov	r21, r25
    unsigned char crc = 0xFF;

    while (len--)
    50f8:	8f ef       	ldi	r24, 0xFF	; 255
    50fa:	86 0f       	add	r24, r22
    50fc:	66 23       	and	r22, r22
    50fe:	b9 f0       	breq	.+46     	; 0x512e <Crc8+0x3a>
    5100:	68 2f       	mov	r22, r24
    5102:	70 e0       	ldi	r23, 0x00	; 0
    5104:	6f 5f       	subi	r22, 0xFF	; 255
    5106:	7f 4f       	sbci	r23, 0xFF	; 255
    5108:	64 0f       	add	r22, r20
    510a:	75 1f       	adc	r23, r21
    unsigned char crc = 0xFF;
    510c:	8f ef       	ldi	r24, 0xFF	; 255
        crc = Crc8Table[crc ^ *pcBlock++];
    510e:	fa 01       	movw	r30, r20
    5110:	4f 5f       	subi	r20, 0xFF	; 255
    5112:	5f 4f       	sbci	r21, 0xFF	; 255
    5114:	20 81       	ld	r18, Z
    5116:	02 2e       	mov	r0, r18
    5118:	00 0c       	add	r0, r0
    511a:	33 0b       	sbc	r19, r19
    511c:	28 27       	eor	r18, r24
    511e:	f9 01       	movw	r30, r18
    5120:	e4 5f       	subi	r30, 0xF4	; 244
    5122:	fe 4f       	sbci	r31, 0xFE	; 254
    5124:	80 81       	ld	r24, Z
    while (len--)
    5126:	46 17       	cp	r20, r22
    5128:	57 07       	cpc	r21, r23
    512a:	89 f7       	brne	.-30     	; 0x510e <Crc8+0x1a>
    512c:	08 95       	ret
    unsigned char crc = 0xFF;
    512e:	8f ef       	ldi	r24, 0xFF	; 255

    return crc;
}
    5130:	08 95       	ret

00005132 <send_state>:
{
    5132:	ef 92       	push	r14
    5134:	ff 92       	push	r15
    5136:	0f 93       	push	r16
    5138:	1f 93       	push	r17
    513a:	cf 93       	push	r28
    513c:	df 93       	push	r29
    513e:	cd b7       	in	r28, 0x3d	; 61
    5140:	de b7       	in	r29, 0x3e	; 62
    5142:	cc 57       	subi	r28, 0x7C	; 124
    5144:	d1 09       	sbc	r29, r1
    5146:	0f b6       	in	r0, 0x3f	; 63
    5148:	f8 94       	cli
    514a:	de bf       	out	0x3e, r29	; 62
    514c:	0f be       	out	0x3f, r0	; 63
    514e:	cd bf       	out	0x3d, r28	; 61
        report[0] = '+';
    5150:	8b e2       	ldi	r24, 0x2B	; 43
    5152:	89 83       	std	Y+1, r24	; 0x01
        report[1] = 'U';
    5154:	85 e5       	ldi	r24, 0x55	; 85
    5156:	8a 83       	std	Y+2, r24	; 0x02
        report[2] = ':';
    5158:	8a e3       	ldi	r24, 0x3A	; 58
    515a:	8b 83       	std	Y+3, r24	; 0x03
        ptr += sprintf_P(ptr, PSTR("d=%s&"), get_arr_dep());//deposit simcard
    515c:	0e 94 a7 1f 	call	0x3f4e	; 0x3f4e <get_arr_dep>
    5160:	9f 93       	push	r25
    5162:	8f 93       	push	r24
    5164:	86 e3       	ldi	r24, 0x36	; 54
    5166:	99 e0       	ldi	r25, 0x09	; 9
    5168:	9f 93       	push	r25
    516a:	8f 93       	push	r24
    516c:	8e 01       	movw	r16, r28
    516e:	0c 5f       	subi	r16, 0xFC	; 252
    5170:	1f 4f       	sbci	r17, 0xFF	; 255
    5172:	1f 93       	push	r17
    5174:	0f 93       	push	r16
    5176:	0e 94 68 34 	call	0x68d0	; 0x68d0 <sprintf_P>
    517a:	08 0f       	add	r16, r24
    517c:	19 1f       	adc	r17, r25
        ptr += sprintf_P(ptr, PSTR("g=%u&"), get_guard());//get state guard
    517e:	0e 94 a2 10 	call	0x2144	; 0x2144 <get_guard>
    5182:	1f 92       	push	r1
    5184:	8f 93       	push	r24
    5186:	80 e3       	ldi	r24, 0x30	; 48
    5188:	99 e0       	ldi	r25, 0x09	; 9
    518a:	9f 93       	push	r25
    518c:	8f 93       	push	r24
    518e:	1f 93       	push	r17
    5190:	0f 93       	push	r16
    5192:	0e 94 68 34 	call	0x68d0	; 0x68d0 <sprintf_P>
    5196:	08 0f       	add	r16, r24
    5198:	19 1f       	adc	r17, r25
        ptr += sprintf_P(ptr, PSTR("lg=%u&"), get_local_guard());// get state local guard
    519a:	0e 94 a8 10 	call	0x2150	; 0x2150 <get_local_guard>
    519e:	1f 92       	push	r1
    51a0:	8f 93       	push	r24
    51a2:	89 e2       	ldi	r24, 0x29	; 41
    51a4:	99 e0       	ldi	r25, 0x09	; 9
    51a6:	9f 93       	push	r25
    51a8:	8f 93       	push	r24
    51aa:	1f 93       	push	r17
    51ac:	0f 93       	push	r16
    51ae:	0e 94 68 34 	call	0x68d0	; 0x68d0 <sprintf_P>
    51b2:	08 0f       	add	r16, r24
    51b4:	19 1f       	adc	r17, r25
        ptr += sprintf_P(ptr, PSTR("ti=%d&"), get_temperature_mcu());//get mcu temperature
    51b6:	0e 94 44 0b 	call	0x1688	; 0x1688 <get_temperature_mcu>
    51ba:	28 2f       	mov	r18, r24
    51bc:	08 2e       	mov	r0, r24
    51be:	00 0c       	add	r0, r0
    51c0:	33 0b       	sbc	r19, r19
    51c2:	3f 93       	push	r19
    51c4:	8f 93       	push	r24
    51c6:	82 e2       	ldi	r24, 0x22	; 34
    51c8:	99 e0       	ldi	r25, 0x09	; 9
    51ca:	9f 93       	push	r25
    51cc:	8f 93       	push	r24
    51ce:	1f 93       	push	r17
    51d0:	0f 93       	push	r16
    51d2:	0e 94 68 34 	call	0x68d0	; 0x68d0 <sprintf_P>
    51d6:	08 0f       	add	r16, r24
    51d8:	19 1f       	adc	r17, r25
        ptr += sprintf_P(ptr, PSTR("te=%d&"), get_temperature_18b20());// get ext 18b20 temperature
    51da:	0e 94 3e 0b 	call	0x167c	; 0x167c <get_temperature_18b20>
    51de:	28 2f       	mov	r18, r24
    51e0:	08 2e       	mov	r0, r24
    51e2:	00 0c       	add	r0, r0
    51e4:	33 0b       	sbc	r19, r19
    51e6:	3f 93       	push	r19
    51e8:	8f 93       	push	r24
    51ea:	8b e1       	ldi	r24, 0x1B	; 27
    51ec:	99 e0       	ldi	r25, 0x09	; 9
    51ee:	9f 93       	push	r25
    51f0:	8f 93       	push	r24
    51f2:	1f 93       	push	r17
    51f4:	0f 93       	push	r16
    51f6:	0e 94 68 34 	call	0x68d0	; 0x68d0 <sprintf_P>
    51fa:	08 0f       	add	r16, r24
    51fc:	19 1f       	adc	r17, r25
        ptr += sprintf_P(ptr, PSTR("m=%u&"), get_reset_count_mcu()); //get count reset mcu
    51fe:	0e 94 ba 10 	call	0x2174	; 0x2174 <get_reset_count_mcu>
    5202:	1f 92       	push	r1
    5204:	8f 93       	push	r24
    5206:	85 e1       	ldi	r24, 0x15	; 21
    5208:	99 e0       	ldi	r25, 0x09	; 9
    520a:	9f 93       	push	r25
    520c:	8f 93       	push	r24
    520e:	1f 93       	push	r17
    5210:	0f 93       	push	r16
    5212:	0e 94 68 34 	call	0x68d0	; 0x68d0 <sprintf_P>
    5216:	08 0f       	add	r16, r24
    5218:	19 1f       	adc	r17, r25
        ptr += sprintf_P(ptr, PSTR("sig=%u&"), get_signal_strength());// get signal from gsm
    521a:	0f b6       	in	r0, 0x3f	; 63
    521c:	f8 94       	cli
    521e:	de bf       	out	0x3e, r29	; 62
    5220:	0f be       	out	0x3f, r0	; 63
    5222:	cd bf       	out	0x3d, r28	; 61
    5224:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <get_signal_strength>
    5228:	1f 92       	push	r1
    522a:	8f 93       	push	r24
    522c:	8d e0       	ldi	r24, 0x0D	; 13
    522e:	99 e0       	ldi	r25, 0x09	; 9
    5230:	9f 93       	push	r25
    5232:	8f 93       	push	r24
    5234:	1f 93       	push	r17
    5236:	0f 93       	push	r16
    5238:	0e 94 68 34 	call	0x68d0	; 0x68d0 <sprintf_P>
    523c:	08 0f       	add	r16, r24
    523e:	19 1f       	adc	r17, r25
        ptr += sprintf_P(ptr, PSTR("r=%u&"), get_registered_in_gsm_network());// get state regitered gsm
    5240:	0e 94 aa 1f 	call	0x3f54	; 0x3f54 <get_registered_in_gsm_network>
    5244:	1f 92       	push	r1
    5246:	8f 93       	push	r24
    5248:	87 e0       	ldi	r24, 0x07	; 7
    524a:	99 e0       	ldi	r25, 0x09	; 9
    524c:	9f 93       	push	r25
    524e:	8f 93       	push	r24
    5250:	1f 93       	push	r17
    5252:	0f 93       	push	r16
    5254:	0e 94 68 34 	call	0x68d0	; 0x68d0 <sprintf_P>
    5258:	08 0f       	add	r16, r24
    525a:	19 1f       	adc	r17, r25
        if(get_time_without_power_s() == 0)
    525c:	0e 94 2b 07 	call	0xe56	; 0xe56 <get_time_without_power_s>
    5260:	ed 96       	adiw	r28, 0x3d	; 61
    5262:	6c af       	std	Y+60, r22	; 0x3c
    5264:	7d af       	std	Y+61, r23	; 0x3d
    5266:	8e af       	std	Y+62, r24	; 0x3e
    5268:	9f af       	std	Y+63, r25	; 0x3f
    526a:	ed 97       	sbiw	r28, 0x3d	; 61
    526c:	0f b6       	in	r0, 0x3f	; 63
    526e:	f8 94       	cli
    5270:	de bf       	out	0x3e, r29	; 62
    5272:	0f be       	out	0x3f, r0	; 63
    5274:	cd bf       	out	0x3d, r28	; 61
    5276:	67 2b       	or	r22, r23
    5278:	68 2b       	or	r22, r24
    527a:	69 2b       	or	r22, r25
    527c:	09 f0       	breq	.+2      	; 0x5280 <send_state+0x14e>
    527e:	a6 c0       	rjmp	.+332    	; 0x53cc <send_state+0x29a>
            ptr += sprintf_P(ptr, PSTR("b=%u&"), 110); //if have ext power -> in battery 110%
    5280:	1f 92       	push	r1
    5282:	8e e6       	ldi	r24, 0x6E	; 110
    5284:	8f 93       	push	r24
    5286:	81 e0       	ldi	r24, 0x01	; 1
    5288:	99 e0       	ldi	r25, 0x09	; 9
    528a:	9f 93       	push	r25
    528c:	8f 93       	push	r24
    528e:	1f 93       	push	r17
    5290:	0f 93       	push	r16
    5292:	0e 94 68 34 	call	0x68d0	; 0x68d0 <sprintf_P>
    5296:	08 0f       	add	r16, r24
    5298:	19 1f       	adc	r17, r25
    529a:	0f 90       	pop	r0
    529c:	0f 90       	pop	r0
    529e:	0f 90       	pop	r0
    52a0:	0f 90       	pop	r0
    52a2:	0f 90       	pop	r0
    52a4:	0f 90       	pop	r0
        ptr += sprintf_P(ptr, PSTR("s=%u&"), get_flag_for_send()); // sent flag alarm
    52a6:	0e 94 26 0b 	call	0x164c	; 0x164c <get_flag_for_send>
    52aa:	1f 92       	push	r1
    52ac:	8f 93       	push	r24
    52ae:	85 ef       	ldi	r24, 0xF5	; 245
    52b0:	98 e0       	ldi	r25, 0x08	; 8
    52b2:	9f 93       	push	r25
    52b4:	8f 93       	push	r24
    52b6:	1f 93       	push	r17
    52b8:	0f 93       	push	r16
    52ba:	0e 94 68 34 	call	0x68d0	; 0x68d0 <sprintf_P>
    52be:	08 0f       	add	r16, r24
    52c0:	19 1f       	adc	r17, r25
        ptr += sprintf_P(ptr, PSTR("l=%u&"), get_light()); // get state light
    52c2:	0e 94 20 0b 	call	0x1640	; 0x1640 <get_light>
    52c6:	1f 92       	push	r1
    52c8:	8f 93       	push	r24
    52ca:	8f ee       	ldi	r24, 0xEF	; 239
    52cc:	98 e0       	ldi	r25, 0x08	; 8
    52ce:	9f 93       	push	r25
    52d0:	8f 93       	push	r24
    52d2:	1f 93       	push	r17
    52d4:	0f 93       	push	r16
    52d6:	0e 94 68 34 	call	0x68d0	; 0x68d0 <sprintf_P>
    52da:	08 0f       	add	r16, r24
    52dc:	19 1f       	adc	r17, r25
        ptr += sprintf_P(ptr, PSTR("z=%u&"), get_beep_on()); // get state buzzer
    52de:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <get_beep_on>
    52e2:	1f 92       	push	r1
    52e4:	8f 93       	push	r24
    52e6:	89 ee       	ldi	r24, 0xE9	; 233
    52e8:	98 e0       	ldi	r25, 0x08	; 8
    52ea:	9f 93       	push	r25
    52ec:	8f 93       	push	r24
    52ee:	1f 93       	push	r17
    52f0:	0f 93       	push	r16
    52f2:	0e 94 68 34 	call	0x68d0	; 0x68d0 <sprintf_P>
    52f6:	08 0f       	add	r16, r24
    52f8:	19 1f       	adc	r17, r25
        ptr += sprintf_P(ptr, PSTR("mi=%u&"), get_flag_motion_inside()); // get state motion_inside
    52fa:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <get_flag_motion_inside>
    52fe:	1f 92       	push	r1
    5300:	8f 93       	push	r24
    5302:	82 ee       	ldi	r24, 0xE2	; 226
    5304:	98 e0       	ldi	r25, 0x08	; 8
    5306:	9f 93       	push	r25
    5308:	8f 93       	push	r24
    530a:	1f 93       	push	r17
    530c:	0f 93       	push	r16
    530e:	0e 94 68 34 	call	0x68d0	; 0x68d0 <sprintf_P>
    5312:	08 0f       	add	r16, r24
    5314:	19 1f       	adc	r17, r25
        ptr += sprintf_P(ptr, PSTR("bm=%u&"), get_flag_busy_mdm());//flag busy modem
    5316:	0e 94 bc 1f 	call	0x3f78	; 0x3f78 <get_flag_busy_mdm>
    531a:	1f 92       	push	r1
    531c:	8f 93       	push	r24
    531e:	8b ed       	ldi	r24, 0xDB	; 219
    5320:	98 e0       	ldi	r25, 0x08	; 8
    5322:	9f 93       	push	r25
    5324:	8f 93       	push	r24
    5326:	1f 93       	push	r17
    5328:	0f 93       	push	r16
    532a:	0e 94 68 34 	call	0x68d0	; 0x68d0 <sprintf_P>
    532e:	08 0f       	add	r16, r24
    5330:	19 1f       	adc	r17, r25
        ptr += sprintf_P(ptr, PSTR("t=%lu"), get_time_s()); //get time in second from start mcu
    5332:	0e 94 29 2c 	call	0x5852	; 0x5852 <get_time_s>
    5336:	9f 93       	push	r25
    5338:	8f 93       	push	r24
    533a:	7f 93       	push	r23
    533c:	6f 93       	push	r22
    533e:	85 ed       	ldi	r24, 0xD5	; 213
    5340:	98 e0       	ldi	r25, 0x08	; 8
    5342:	9f 93       	push	r25
    5344:	8f 93       	push	r24
    5346:	1f 93       	push	r17
    5348:	0f 93       	push	r16
    534a:	0e 94 68 34 	call	0x68d0	; 0x68d0 <sprintf_P>
    534e:	08 0f       	add	r16, r24
    5350:	19 1f       	adc	r17, r25
        unsigned short crc = Crc8(report, strlen(report));
    5352:	ce 01       	movw	r24, r28
    5354:	01 96       	adiw	r24, 0x01	; 1
    5356:	7c 01       	movw	r14, r24
    5358:	fc 01       	movw	r30, r24
    535a:	01 90       	ld	r0, Z+
    535c:	00 20       	and	r0, r0
    535e:	e9 f7       	brne	.-6      	; 0x535a <send_state+0x228>
    5360:	31 97       	sbiw	r30, 0x01	; 1
    5362:	bf 01       	movw	r22, r30
    5364:	68 1b       	sub	r22, r24
    5366:	79 0b       	sbc	r23, r25
    5368:	0f b6       	in	r0, 0x3f	; 63
    536a:	f8 94       	cli
    536c:	de bf       	out	0x3e, r29	; 62
    536e:	0f be       	out	0x3f, r0	; 63
    5370:	cd bf       	out	0x3d, r28	; 61
    5372:	0e 94 7a 28 	call	0x50f4	; 0x50f4 <Crc8>
        ptr += sprintf_P(ptr, PSTR(";%u"), crc); // get crc8
    5376:	1f 92       	push	r1
    5378:	8f 93       	push	r24
    537a:	81 ed       	ldi	r24, 0xD1	; 209
    537c:	98 e0       	ldi	r25, 0x08	; 8
    537e:	9f 93       	push	r25
    5380:	8f 93       	push	r24
    5382:	1f 93       	push	r17
    5384:	0f 93       	push	r16
    5386:	0e 94 68 34 	call	0x68d0	; 0x68d0 <sprintf_P>
        softuart_puts_ln(report); // send report to openwrt
    538a:	c7 01       	movw	r24, r14
    538c:	0e 94 31 28 	call	0x5062	; 0x5062 <softuart_puts_ln>
        timestamp_send = get_time_s();
    5390:	0e 94 29 2c 	call	0x5852	; 0x5852 <get_time_s>
    5394:	60 93 6d 05 	sts	0x056D, r22	; 0x80056d <timestamp_send>
    5398:	70 93 6e 05 	sts	0x056E, r23	; 0x80056e <timestamp_send+0x1>
    539c:	80 93 6f 05 	sts	0x056F, r24	; 0x80056f <timestamp_send+0x2>
    53a0:	90 93 70 05 	sts	0x0570, r25	; 0x800570 <timestamp_send+0x3>
}
    53a4:	0f 90       	pop	r0
    53a6:	0f 90       	pop	r0
    53a8:	0f 90       	pop	r0
    53aa:	0f 90       	pop	r0
    53ac:	0f 90       	pop	r0
    53ae:	0f 90       	pop	r0
    53b0:	c4 58       	subi	r28, 0x84	; 132
    53b2:	df 4f       	sbci	r29, 0xFF	; 255
    53b4:	0f b6       	in	r0, 0x3f	; 63
    53b6:	f8 94       	cli
    53b8:	de bf       	out	0x3e, r29	; 62
    53ba:	0f be       	out	0x3f, r0	; 63
    53bc:	cd bf       	out	0x3d, r28	; 61
    53be:	df 91       	pop	r29
    53c0:	cf 91       	pop	r28
    53c2:	1f 91       	pop	r17
    53c4:	0f 91       	pop	r16
    53c6:	ff 90       	pop	r15
    53c8:	ef 90       	pop	r14
    53ca:	08 95       	ret
            ptr += sprintf_P(ptr, PSTR("b=%u&"), get_battery_level());// if not ext power get battery level
    53cc:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <get_battery_level>
    53d0:	1f 92       	push	r1
    53d2:	8f 93       	push	r24
    53d4:	8b ef       	ldi	r24, 0xFB	; 251
    53d6:	98 e0       	ldi	r25, 0x08	; 8
    53d8:	9f 93       	push	r25
    53da:	8f 93       	push	r24
    53dc:	1f 93       	push	r17
    53de:	0f 93       	push	r16
    53e0:	0e 94 68 34 	call	0x68d0	; 0x68d0 <sprintf_P>
    53e4:	08 0f       	add	r16, r24
    53e6:	19 1f       	adc	r17, r25
    53e8:	0f 90       	pop	r0
    53ea:	0f 90       	pop	r0
    53ec:	0f 90       	pop	r0
    53ee:	0f 90       	pop	r0
    53f0:	0f 90       	pop	r0
    53f2:	0f 90       	pop	r0
    53f4:	58 cf       	rjmp	.-336    	; 0x52a6 <send_state+0x174>

000053f6 <get_message_from_openwrt>:
{
    53f6:	cf 93       	push	r28
    53f8:	df 93       	push	r29
    53fa:	cd b7       	in	r28, 0x3d	; 61
    53fc:	de b7       	in	r29, 0x3e	; 62
    53fe:	64 97       	sbiw	r28, 0x14	; 20
    5400:	0f b6       	in	r0, 0x3f	; 63
    5402:	f8 94       	cli
    5404:	de bf       	out	0x3e, r29	; 62
    5406:	0f be       	out	0x3f, r0	; 63
    5408:	cd bf       	out	0x3d, r28	; 61
    if((get_time_s() - time_stamp) > 10)
    540a:	0e 94 29 2c 	call	0x5852	; 0x5852 <get_time_s>
    540e:	69 8b       	std	Y+17, r22	; 0x11
    5410:	7a 8b       	std	Y+18, r23	; 0x12
    5412:	8b 8b       	std	Y+19, r24	; 0x13
    5414:	9c 8b       	std	Y+20, r25	; 0x14
    5416:	80 91 69 05 	lds	r24, 0x0569	; 0x800569 <time_stamp.22>
    541a:	90 91 6a 05 	lds	r25, 0x056A	; 0x80056a <time_stamp.22+0x1>
    541e:	a0 91 6b 05 	lds	r26, 0x056B	; 0x80056b <time_stamp.22+0x2>
    5422:	b0 91 6c 05 	lds	r27, 0x056C	; 0x80056c <time_stamp.22+0x3>
    5426:	29 89       	ldd	r18, Y+17	; 0x11
    5428:	3a 89       	ldd	r19, Y+18	; 0x12
    542a:	4b 89       	ldd	r20, Y+19	; 0x13
    542c:	5c 89       	ldd	r21, Y+20	; 0x14
    542e:	28 1b       	sub	r18, r24
    5430:	39 0b       	sbc	r19, r25
    5432:	4a 0b       	sbc	r20, r26
    5434:	5b 0b       	sbc	r21, r27
    5436:	da 01       	movw	r26, r20
    5438:	c9 01       	movw	r24, r18
    543a:	0b 97       	sbiw	r24, 0x0b	; 11
    543c:	a1 05       	cpc	r26, r1
    543e:	b1 05       	cpc	r27, r1
    5440:	28 f0       	brcs	.+10     	; 0x544c <get_message_from_openwrt+0x56>
        if(state)
    5442:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <state.21>
    5446:	81 11       	cpse	r24, r1
            state = 0;
    5448:	10 92 68 05 	sts	0x0568, r1	; 0x800568 <state.21>
    if(softuart_kbhit())
    544c:	0e 94 f7 27 	call	0x4fee	; 0x4fee <softuart_kbhit>
    5450:	88 23       	and	r24, r24
    5452:	01 f1       	breq	.+64     	; 0x5494 <get_message_from_openwrt+0x9e>
        time_stamp = get_time_s();
    5454:	0e 94 29 2c 	call	0x5852	; 0x5852 <get_time_s>
    5458:	60 93 69 05 	sts	0x0569, r22	; 0x800569 <time_stamp.22>
    545c:	70 93 6a 05 	sts	0x056A, r23	; 0x80056a <time_stamp.22+0x1>
    5460:	80 93 6b 05 	sts	0x056B, r24	; 0x80056b <time_stamp.22+0x2>
    5464:	90 93 6c 05 	sts	0x056C, r25	; 0x80056c <time_stamp.22+0x3>
        ch = softuart_getchar();
    5468:	0e 94 e3 27 	call	0x4fc6	; 0x4fc6 <softuart_getchar>
        switch(state)
    546c:	90 91 68 05 	lds	r25, 0x0568	; 0x800568 <state.21>
    5470:	99 23       	and	r25, r25
    5472:	21 f0       	breq	.+8      	; 0x547c <get_message_from_openwrt+0x86>
    5474:	93 30       	cpi	r25, 0x03	; 3
    5476:	81 f0       	breq	.+32     	; 0x5498 <get_message_from_openwrt+0xa2>
    5478:	80 e0       	ldi	r24, 0x00	; 0
    547a:	29 c0       	rjmp	.+82     	; 0x54ce <get_message_from_openwrt+0xd8>
            if((ch != 0) && (ch != '\n'))
    547c:	88 23       	and	r24, r24
    547e:	51 f0       	breq	.+20     	; 0x5494 <get_message_from_openwrt+0x9e>
    5480:	8a 30       	cpi	r24, 0x0A	; 10
    5482:	41 f0       	breq	.+16     	; 0x5494 <get_message_from_openwrt+0x9e>
                data[0] = ch;
    5484:	80 93 71 05 	sts	0x0571, r24	; 0x800571 <data>
                i = 1;
    5488:	81 e0       	ldi	r24, 0x01	; 1
    548a:	80 93 67 05 	sts	0x0567, r24	; 0x800567 <i.20>
                state = 3;
    548e:	83 e0       	ldi	r24, 0x03	; 3
    5490:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <state.21>
    return 0;
    5494:	80 e0       	ldi	r24, 0x00	; 0
    5496:	1b c0       	rjmp	.+54     	; 0x54ce <get_message_from_openwrt+0xd8>
            data[i] = ch;
    5498:	e0 91 67 05 	lds	r30, 0x0567	; 0x800567 <i.20>
    549c:	ae 2f       	mov	r26, r30
    549e:	b0 e0       	ldi	r27, 0x00	; 0
    54a0:	af 58       	subi	r26, 0x8F	; 143
    54a2:	ba 4f       	sbci	r27, 0xFA	; 250
    54a4:	8c 93       	st	X, r24
            i++;
    54a6:	ef 5f       	subi	r30, 0xFF	; 255
    54a8:	e0 93 67 05 	sts	0x0567, r30	; 0x800567 <i.20>
            if(i>=SOFTUART_IN_BUF_SIZE-1)
    54ac:	ef 31       	cpi	r30, 0x1F	; 31
    54ae:	c0 f4       	brcc	.+48     	; 0x54e0 <get_message_from_openwrt+0xea>
            if(i>=2)
    54b0:	e2 30       	cpi	r30, 0x02	; 2
    54b2:	80 f3       	brcs	.-32     	; 0x5494 <get_message_from_openwrt+0x9e>
                if((data[i-1] == '\n'))
    54b4:	f0 e0       	ldi	r31, 0x00	; 0
    54b6:	e0 59       	subi	r30, 0x90	; 144
    54b8:	fa 4f       	sbci	r31, 0xFA	; 250
    54ba:	80 81       	ld	r24, Z
    54bc:	8a 30       	cpi	r24, 0x0A	; 10
    54be:	51 f7       	brne	.-44     	; 0x5494 <get_message_from_openwrt+0x9e>
                    state = 0;
    54c0:	10 92 68 05 	sts	0x0568, r1	; 0x800568 <state.21>
        if(ptr[0] == 'a' && ptr[1] == 'v')
    54c4:	80 91 71 05 	lds	r24, 0x0571	; 0x800571 <data>
    54c8:	81 36       	cpi	r24, 0x61	; 97
    54ca:	79 f0       	breq	.+30     	; 0x54ea <get_message_from_openwrt+0xf4>
    return 0;
    54cc:	80 e0       	ldi	r24, 0x00	; 0
}
    54ce:	64 96       	adiw	r28, 0x14	; 20
    54d0:	0f b6       	in	r0, 0x3f	; 63
    54d2:	f8 94       	cli
    54d4:	de bf       	out	0x3e, r29	; 62
    54d6:	0f be       	out	0x3f, r0	; 63
    54d8:	cd bf       	out	0x3d, r28	; 61
    54da:	df 91       	pop	r29
    54dc:	cf 91       	pop	r28
    54de:	08 95       	ret
                i=0;
    54e0:	10 92 67 05 	sts	0x0567, r1	; 0x800567 <i.20>
                state = 0; // переполнение входного буфера
    54e4:	10 92 68 05 	sts	0x0568, r1	; 0x800568 <state.21>
                break;
    54e8:	d5 cf       	rjmp	.-86     	; 0x5494 <get_message_from_openwrt+0x9e>
        if(ptr[0] == 'a' && ptr[1] == 'v')
    54ea:	80 91 72 05 	lds	r24, 0x0572	; 0x800572 <data+0x1>
    54ee:	86 37       	cpi	r24, 0x76	; 118
    54f0:	11 f0       	breq	.+4      	; 0x54f6 <get_message_from_openwrt+0x100>
    return 0;
    54f2:	80 e0       	ldi	r24, 0x00	; 0
    54f4:	ec cf       	rjmp	.-40     	; 0x54ce <get_message_from_openwrt+0xd8>
            if(strstr_P(ptr, PSTR("lamp=1")))
    54f6:	62 e9       	ldi	r22, 0x92	; 146
    54f8:	79 e0       	ldi	r23, 0x09	; 9
    54fa:	83 e7       	ldi	r24, 0x73	; 115
    54fc:	95 e0       	ldi	r25, 0x05	; 5
    54fe:	0e 94 aa 33 	call	0x6754	; 0x6754 <strstr_P>
    5502:	89 2b       	or	r24, r25
    5504:	09 f0       	breq	.+2      	; 0x5508 <get_message_from_openwrt+0x112>
    5506:	5f c0       	rjmp	.+190    	; 0x55c6 <get_message_from_openwrt+0x1d0>
            else if(strstr_P(ptr, PSTR("lamp=0")))
    5508:	6b e8       	ldi	r22, 0x8B	; 139
    550a:	79 e0       	ldi	r23, 0x09	; 9
    550c:	83 e7       	ldi	r24, 0x73	; 115
    550e:	95 e0       	ldi	r25, 0x05	; 5
    5510:	0e 94 aa 33 	call	0x6754	; 0x6754 <strstr_P>
    5514:	89 2b       	or	r24, r25
    5516:	09 f0       	breq	.+2      	; 0x551a <get_message_from_openwrt+0x124>
    5518:	5d c0       	rjmp	.+186    	; 0x55d4 <get_message_from_openwrt+0x1de>
            else if(strstr_P(ptr, PSTR("m_g=1")))
    551a:	65 e8       	ldi	r22, 0x85	; 133
    551c:	79 e0       	ldi	r23, 0x09	; 9
    551e:	83 e7       	ldi	r24, 0x73	; 115
    5520:	95 e0       	ldi	r25, 0x05	; 5
    5522:	0e 94 aa 33 	call	0x6754	; 0x6754 <strstr_P>
    5526:	89 2b       	or	r24, r25
    5528:	09 f0       	breq	.+2      	; 0x552c <get_message_from_openwrt+0x136>
    552a:	58 c0       	rjmp	.+176    	; 0x55dc <get_message_from_openwrt+0x1e6>
            else if(strstr_P(ptr, PSTR("m_g=0")))
    552c:	6f e7       	ldi	r22, 0x7F	; 127
    552e:	79 e0       	ldi	r23, 0x09	; 9
    5530:	83 e7       	ldi	r24, 0x73	; 115
    5532:	95 e0       	ldi	r25, 0x05	; 5
    5534:	0e 94 aa 33 	call	0x6754	; 0x6754 <strstr_P>
    5538:	89 2b       	or	r24, r25
    553a:	09 f0       	breq	.+2      	; 0x553e <get_message_from_openwrt+0x148>
    553c:	5b c0       	rjmp	.+182    	; 0x55f4 <get_message_from_openwrt+0x1fe>
            else if(strstr_P(ptr, PSTR("l_g=1")))
    553e:	69 e7       	ldi	r22, 0x79	; 121
    5540:	79 e0       	ldi	r23, 0x09	; 9
    5542:	83 e7       	ldi	r24, 0x73	; 115
    5544:	95 e0       	ldi	r25, 0x05	; 5
    5546:	0e 94 aa 33 	call	0x6754	; 0x6754 <strstr_P>
    554a:	89 2b       	or	r24, r25
    554c:	09 f0       	breq	.+2      	; 0x5550 <get_message_from_openwrt+0x15a>
    554e:	5b c0       	rjmp	.+182    	; 0x5606 <get_message_from_openwrt+0x210>
            else if(strstr_P(ptr, PSTR("l_g=0")))
    5550:	63 e7       	ldi	r22, 0x73	; 115
    5552:	79 e0       	ldi	r23, 0x09	; 9
    5554:	83 e7       	ldi	r24, 0x73	; 115
    5556:	95 e0       	ldi	r25, 0x05	; 5
    5558:	0e 94 aa 33 	call	0x6754	; 0x6754 <strstr_P>
    555c:	89 2b       	or	r24, r25
    555e:	09 f0       	breq	.+2      	; 0x5562 <get_message_from_openwrt+0x16c>
    5560:	61 c0       	rjmp	.+194    	; 0x5624 <get_message_from_openwrt+0x22e>
            else if(strstr_P(ptr, PSTR("buz=0")))
    5562:	6d e6       	ldi	r22, 0x6D	; 109
    5564:	79 e0       	ldi	r23, 0x09	; 9
    5566:	83 e7       	ldi	r24, 0x73	; 115
    5568:	95 e0       	ldi	r25, 0x05	; 5
    556a:	0e 94 aa 33 	call	0x6754	; 0x6754 <strstr_P>
    556e:	89 2b       	or	r24, r25
    5570:	09 f0       	breq	.+2      	; 0x5574 <get_message_from_openwrt+0x17e>
    5572:	64 c0       	rjmp	.+200    	; 0x563c <get_message_from_openwrt+0x246>
            else if(strstr_P(ptr, PSTR("buz=1")))
    5574:	67 e6       	ldi	r22, 0x67	; 103
    5576:	79 e0       	ldi	r23, 0x09	; 9
    5578:	83 e7       	ldi	r24, 0x73	; 115
    557a:	95 e0       	ldi	r25, 0x05	; 5
    557c:	0e 94 aa 33 	call	0x6754	; 0x6754 <strstr_P>
    5580:	89 2b       	or	r24, r25
    5582:	09 f0       	breq	.+2      	; 0x5586 <get_message_from_openwrt+0x190>
    5584:	5e c0       	rjmp	.+188    	; 0x5642 <get_message_from_openwrt+0x24c>
            else if(strstr_P(ptr, PSTR("ussd")))
    5586:	62 e6       	ldi	r22, 0x62	; 98
    5588:	79 e0       	ldi	r23, 0x09	; 9
    558a:	83 e7       	ldi	r24, 0x73	; 115
    558c:	95 e0       	ldi	r25, 0x05	; 5
    558e:	0e 94 aa 33 	call	0x6754	; 0x6754 <strstr_P>
    5592:	89 2b       	or	r24, r25
    5594:	09 f0       	breq	.+2      	; 0x5598 <get_message_from_openwrt+0x1a2>
    5596:	5a c0       	rjmp	.+180    	; 0x564c <get_message_from_openwrt+0x256>
            else if(strstr_P(ptr, PSTR("reboot_all")))
    5598:	67 e5       	ldi	r22, 0x57	; 87
    559a:	79 e0       	ldi	r23, 0x09	; 9
    559c:	83 e7       	ldi	r24, 0x73	; 115
    559e:	95 e0       	ldi	r25, 0x05	; 5
    55a0:	0e 94 aa 33 	call	0x6754	; 0x6754 <strstr_P>
    55a4:	89 2b       	or	r24, r25
    55a6:	09 f0       	breq	.+2      	; 0x55aa <get_message_from_openwrt+0x1b4>
    55a8:	55 c0       	rjmp	.+170    	; 0x5654 <get_message_from_openwrt+0x25e>
            else if(strstr_P(ptr, PSTR("reboot_gsm")))
    55aa:	6c e4       	ldi	r22, 0x4C	; 76
    55ac:	79 e0       	ldi	r23, 0x09	; 9
    55ae:	83 e7       	ldi	r24, 0x73	; 115
    55b0:	95 e0       	ldi	r25, 0x05	; 5
    55b2:	0e 94 aa 33 	call	0x6754	; 0x6754 <strstr_P>
    55b6:	89 2b       	or	r24, r25
    55b8:	09 f4       	brne	.+2      	; 0x55bc <get_message_from_openwrt+0x1c6>
    55ba:	51 c0       	rjmp	.+162    	; 0x565e <get_message_from_openwrt+0x268>
                reset_mcu(0);
    55bc:	80 e0       	ldi	r24, 0x00	; 0
    55be:	0e 94 84 1a 	call	0x3508	; 0x3508 <reset_mcu>
                return 1;
    55c2:	81 e0       	ldi	r24, 0x01	; 1
    55c4:	84 cf       	rjmp	.-248    	; 0x54ce <get_message_from_openwrt+0xd8>
                set_light(1);
    55c6:	81 e0       	ldi	r24, 0x01	; 1
    55c8:	0e 94 18 0b 	call	0x1630	; 0x1630 <set_light>
            send_state();
    55cc:	0e 94 99 28 	call	0x5132	; 0x5132 <send_state>
            return 1;
    55d0:	81 e0       	ldi	r24, 0x01	; 1
    55d2:	7d cf       	rjmp	.-262    	; 0x54ce <get_message_from_openwrt+0xd8>
                set_light(0);
    55d4:	80 e0       	ldi	r24, 0x00	; 0
    55d6:	0e 94 18 0b 	call	0x1630	; 0x1630 <set_light>
    55da:	f8 cf       	rjmp	.-16     	; 0x55cc <get_message_from_openwrt+0x1d6>
                set_local_guard(0);
    55dc:	80 e0       	ldi	r24, 0x00	; 0
    55de:	0e 94 ab 10 	call	0x2156	; 0x2156 <set_local_guard>
                set_guard(1);
    55e2:	81 e0       	ldi	r24, 0x01	; 1
    55e4:	0e 94 a5 10 	call	0x214a	; 0x214a <set_guard>
                set_flg_rst(1);
    55e8:	81 e0       	ldi	r24, 0x01	; 1
    55ea:	0e 94 38 0b 	call	0x1670	; 0x1670 <set_flg_rst>
                EEPROM_update();
    55ee:	0e 94 81 10 	call	0x2102	; 0x2102 <EEPROM_update>
    55f2:	ec cf       	rjmp	.-40     	; 0x55cc <get_message_from_openwrt+0x1d6>
                set_guard(0);
    55f4:	80 e0       	ldi	r24, 0x00	; 0
    55f6:	0e 94 a5 10 	call	0x214a	; 0x214a <set_guard>
                set_flg_rst(1);
    55fa:	81 e0       	ldi	r24, 0x01	; 1
    55fc:	0e 94 38 0b 	call	0x1670	; 0x1670 <set_flg_rst>
                EEPROM_update();
    5600:	0e 94 81 10 	call	0x2102	; 0x2102 <EEPROM_update>
    5604:	e3 cf       	rjmp	.-58     	; 0x55cc <get_message_from_openwrt+0x1d6>
                set_guard(0);
    5606:	80 e0       	ldi	r24, 0x00	; 0
    5608:	0e 94 a5 10 	call	0x214a	; 0x214a <set_guard>
                set_local_guard(1);
    560c:	81 e0       	ldi	r24, 0x01	; 1
    560e:	0e 94 ab 10 	call	0x2156	; 0x2156 <set_local_guard>
                set_flg_rst(1);
    5612:	81 e0       	ldi	r24, 0x01	; 1
    5614:	0e 94 38 0b 	call	0x1670	; 0x1670 <set_flg_rst>
                set_flag_motion_inside(0);
    5618:	80 e0       	ldi	r24, 0x00	; 0
    561a:	0e 94 80 0c 	call	0x1900	; 0x1900 <set_flag_motion_inside>
                EEPROM_update();
    561e:	0e 94 81 10 	call	0x2102	; 0x2102 <EEPROM_update>
    5622:	d4 cf       	rjmp	.-88     	; 0x55cc <get_message_from_openwrt+0x1d6>
                set_local_guard(0);
    5624:	80 e0       	ldi	r24, 0x00	; 0
    5626:	0e 94 ab 10 	call	0x2156	; 0x2156 <set_local_guard>
                set_flag_motion_inside(0);
    562a:	80 e0       	ldi	r24, 0x00	; 0
    562c:	0e 94 80 0c 	call	0x1900	; 0x1900 <set_flag_motion_inside>
                set_flg_rst(1);
    5630:	81 e0       	ldi	r24, 0x01	; 1
    5632:	0e 94 38 0b 	call	0x1670	; 0x1670 <set_flg_rst>
                EEPROM_update();
    5636:	0e 94 81 10 	call	0x2102	; 0x2102 <EEPROM_update>
    563a:	c8 cf       	rjmp	.-112    	; 0x55cc <get_message_from_openwrt+0x1d6>
                buzzer_stop();
    563c:	0e 94 c0 2b 	call	0x5780	; 0x5780 <buzzer_stop>
    5640:	c5 cf       	rjmp	.-118    	; 0x55cc <get_message_from_openwrt+0x1d6>
                buzzer_non_block(30000);
    5642:	80 e3       	ldi	r24, 0x30	; 48
    5644:	95 e7       	ldi	r25, 0x75	; 117
    5646:	0e 94 e0 2c 	call	0x59c0	; 0x59c0 <buzzer_non_block>
    564a:	c0 cf       	rjmp	.-128    	; 0x55cc <get_message_from_openwrt+0x1d6>
                send_USSD(0);
    564c:	80 e0       	ldi	r24, 0x00	; 0
    564e:	0e 94 e5 1c 	call	0x39ca	; 0x39ca <send_USSD>
    5652:	bc cf       	rjmp	.-136    	; 0x55cc <get_message_from_openwrt+0x1d6>
                reset_mcu(1);
    5654:	81 e0       	ldi	r24, 0x01	; 1
    5656:	0e 94 84 1a 	call	0x3508	; 0x3508 <reset_mcu>
                return 1;
    565a:	81 e0       	ldi	r24, 0x01	; 1
    565c:	38 cf       	rjmp	.-400    	; 0x54ce <get_message_from_openwrt+0xd8>
            else if(strstr_P(ptr, PSTR("ping0")))
    565e:	66 e4       	ldi	r22, 0x46	; 70
    5660:	79 e0       	ldi	r23, 0x09	; 9
    5662:	83 e7       	ldi	r24, 0x73	; 115
    5664:	95 e0       	ldi	r25, 0x05	; 5
    5666:	0e 94 aa 33 	call	0x6754	; 0x6754 <strstr_P>
    566a:	89 2b       	or	r24, r25
    566c:	31 f0       	breq	.+12     	; 0x567a <get_message_from_openwrt+0x284>
                set_val(flag_internet, 0);
    566e:	8f b7       	in	r24, 0x3f	; 63
    5670:	f8 94       	cli
    5672:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <flag_internet>
    5676:	8f bf       	out	0x3f, r24	; 63
    5678:	a9 cf       	rjmp	.-174    	; 0x55cc <get_message_from_openwrt+0x1d6>
            else if(strstr_P(ptr, PSTR("ping1")))
    567a:	60 e4       	ldi	r22, 0x40	; 64
    567c:	79 e0       	ldi	r23, 0x09	; 9
    567e:	83 e7       	ldi	r24, 0x73	; 115
    5680:	95 e0       	ldi	r25, 0x05	; 5
    5682:	0e 94 aa 33 	call	0x6754	; 0x6754 <strstr_P>
    5686:	89 2b       	or	r24, r25
    5688:	39 f0       	breq	.+14     	; 0x5698 <get_message_from_openwrt+0x2a2>
                set_val(flag_internet, 1);
    568a:	8f b7       	in	r24, 0x3f	; 63
    568c:	f8 94       	cli
    568e:	91 e0       	ldi	r25, 0x01	; 1
    5690:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <flag_internet>
    5694:	8f bf       	out	0x3f, r24	; 63
    5696:	9a cf       	rjmp	.-204    	; 0x55cc <get_message_from_openwrt+0x1d6>
            else if(strstr_P(ptr, PSTR("*10")))
    5698:	6c e3       	ldi	r22, 0x3C	; 60
    569a:	79 e0       	ldi	r23, 0x09	; 9
    569c:	83 e7       	ldi	r24, 0x73	; 115
    569e:	95 e0       	ldi	r25, 0x05	; 5
    56a0:	0e 94 aa 33 	call	0x6754	; 0x6754 <strstr_P>
    56a4:	89 2b       	or	r24, r25
    56a6:	09 f4       	brne	.+2      	; 0x56aa <get_message_from_openwrt+0x2b4>
    56a8:	91 cf       	rjmp	.-222    	; 0x55cc <get_message_from_openwrt+0x1d6>
                memcpy(_str, ptr, 16);
    56aa:	80 e1       	ldi	r24, 0x10	; 16
    56ac:	e8 e7       	ldi	r30, 0x78	; 120
    56ae:	f5 e0       	ldi	r31, 0x05	; 5
    56b0:	de 01       	movw	r26, r28
    56b2:	11 96       	adiw	r26, 0x01	; 1
    56b4:	01 90       	ld	r0, Z+
    56b6:	0d 92       	st	X+, r0
    56b8:	8a 95       	dec	r24
    56ba:	e1 f7       	brne	.-8      	; 0x56b4 <get_message_from_openwrt+0x2be>
                top_up_balance(_str);
    56bc:	ce 01       	movw	r24, r28
    56be:	01 96       	adiw	r24, 0x01	; 1
    56c0:	0e 94 04 1f 	call	0x3e08	; 0x3e08 <top_up_balance>
    56c4:	83 cf       	rjmp	.-250    	; 0x55cc <get_message_from_openwrt+0x1d6>

000056c6 <timer_send_state>:
{
    56c6:	cf 93       	push	r28
    56c8:	df 93       	push	r29
    56ca:	00 d0       	rcall	.+0      	; 0x56cc <timer_send_state+0x6>
    56cc:	00 d0       	rcall	.+0      	; 0x56ce <timer_send_state+0x8>
    56ce:	cd b7       	in	r28, 0x3d	; 61
    56d0:	de b7       	in	r29, 0x3e	; 62
    if(get_flg_rst() == 1)
    56d2:	0e 94 32 0b 	call	0x1664	; 0x1664 <get_flg_rst>
    56d6:	81 30       	cpi	r24, 0x01	; 1
    56d8:	09 f1       	breq	.+66     	; 0x571c <timer_send_state+0x56>
    else if(get_time_s() >= timestamp_send + 30)
    56da:	0e 94 29 2c 	call	0x5852	; 0x5852 <get_time_s>
    56de:	69 83       	std	Y+1, r22	; 0x01
    56e0:	7a 83       	std	Y+2, r23	; 0x02
    56e2:	8b 83       	std	Y+3, r24	; 0x03
    56e4:	9c 83       	std	Y+4, r25	; 0x04
    56e6:	80 91 6d 05 	lds	r24, 0x056D	; 0x80056d <timestamp_send>
    56ea:	90 91 6e 05 	lds	r25, 0x056E	; 0x80056e <timestamp_send+0x1>
    56ee:	a0 91 6f 05 	lds	r26, 0x056F	; 0x80056f <timestamp_send+0x2>
    56f2:	b0 91 70 05 	lds	r27, 0x0570	; 0x800570 <timestamp_send+0x3>
    56f6:	4e 96       	adiw	r24, 0x1e	; 30
    56f8:	a1 1d       	adc	r26, r1
    56fa:	b1 1d       	adc	r27, r1
    56fc:	29 81       	ldd	r18, Y+1	; 0x01
    56fe:	3a 81       	ldd	r19, Y+2	; 0x02
    5700:	4b 81       	ldd	r20, Y+3	; 0x03
    5702:	5c 81       	ldd	r21, Y+4	; 0x04
    5704:	28 17       	cp	r18, r24
    5706:	39 07       	cpc	r19, r25
    5708:	4a 07       	cpc	r20, r26
    570a:	5b 07       	cpc	r21, r27
    570c:	70 f4       	brcc	.+28     	; 0x572a <timer_send_state+0x64>
}
    570e:	0f 90       	pop	r0
    5710:	0f 90       	pop	r0
    5712:	0f 90       	pop	r0
    5714:	0f 90       	pop	r0
    5716:	df 91       	pop	r29
    5718:	cf 91       	pop	r28
    571a:	08 95       	ret
        set_flag_for_send(0);
    571c:	80 e0       	ldi	r24, 0x00	; 0
    571e:	0e 94 2c 0b 	call	0x1658	; 0x1658 <set_flag_for_send>
        set_flg_rst(0);
    5722:	80 e0       	ldi	r24, 0x00	; 0
    5724:	0e 94 38 0b 	call	0x1670	; 0x1670 <set_flg_rst>
    5728:	f2 cf       	rjmp	.-28     	; 0x570e <timer_send_state+0x48>
        send_state();
    572a:	0e 94 99 28 	call	0x5132	; 0x5132 <send_state>
}
    572e:	ef cf       	rjmp	.-34     	; 0x570e <timer_send_state+0x48>

00005730 <timer0_init>:

//*******************************************************************************************************************
void timer0_init(void)
{
    // Clear registers
    TCCR0A = 0;
    5730:	14 bc       	out	0x24, r1	; 36
    TCCR0B = 0;
    5732:	15 bc       	out	0x25, r1	; 37
    TCNT0 = 0;
    5734:	16 bc       	out	0x26, r1	; 38

    // 1506.0240963855422 Hz (16000000/((165+1)*64))
    OCR0A = 165;
    5736:	85 ea       	ldi	r24, 0xA5	; 165
    5738:	87 bd       	out	0x27, r24	; 39
    // CTC
    TCCR0A |= (1 << WGM01);
    573a:	84 b5       	in	r24, 0x24	; 36
    573c:	82 60       	ori	r24, 0x02	; 2
    573e:	84 bd       	out	0x24, r24	; 36
    // Prescaler 64
    TCCR0B |= (1 << CS01) | (1 << CS00);
    5740:	85 b5       	in	r24, 0x25	; 37
    5742:	83 60       	ori	r24, 0x03	; 3
    5744:	85 bd       	out	0x25, r24	; 37
//  OCR0A = 82;
//  // CTC
//  TCCR0A |= (1 << WGM01);
//  // Prescaler 8
//  TCCR0B |= (1 << CS01);
}
    5746:	08 95       	ret

00005748 <timer1_init>:

// период переполнения 10 мс
void timer1_init(void)
{
    cli(); // stop interrupts
    5748:	f8 94       	cli
    TCCR1A = 0;
    574a:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    TCCR1B = 0;
    574e:	e1 e8       	ldi	r30, 0x81	; 129
    5750:	f0 e0       	ldi	r31, 0x00	; 0
    5752:	10 82       	st	Z, r1
    TCNT1 = 0;
    5754:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    5758:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>

    // 100 Hz (16000000/((624+1)*256))
    OCR1A = 624;
    575c:	80 e7       	ldi	r24, 0x70	; 112
    575e:	92 e0       	ldi	r25, 0x02	; 2
    5760:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    5764:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    // CTC
    TCCR1B |= (1 << WGM12);
    5768:	80 81       	ld	r24, Z
    576a:	88 60       	ori	r24, 0x08	; 8
    576c:	80 83       	st	Z, r24
    // Prescaler 256
    TCCR1B |= (1 << CS12);
    576e:	80 81       	ld	r24, Z
    5770:	84 60       	ori	r24, 0x04	; 4
    5772:	80 83       	st	Z, r24
    // Output Compare Match A Interrupt Enable
    TIMSK1 |= (1 << OCIE1A);
    5774:	ef e6       	ldi	r30, 0x6F	; 111
    5776:	f0 e0       	ldi	r31, 0x00	; 0
    5778:	80 81       	ld	r24, Z
    577a:	82 60       	ori	r24, 0x02	; 2
    577c:	80 83       	st	Z, r24
//  TCCR1B |= (1 << WGM12);
//  // Prescaler 8
//  TCCR1B |= (1 << CS11);
//  // Output Compare Match A Interrupt Enable
//  TIMSK1 |= (1 << OCIE1A);
}
    577e:	08 95       	ret

00005780 <buzzer_stop>:
//*******************************************************************************************************************
void buzzer_stop(void)
{
    buz_on = 0;
    buz_counter = 0;
    beep_on = 0;
    5780:	10 92 9e 05 	sts	0x059E, r1	; 0x80059e <beep_on>
    DigitalWrite(PIN_BUZZER, LOW);
    5784:	5d 98       	cbi	0x0b, 5	; 11
}
    5786:	08 95       	ret

00005788 <beep>:
    }
}
//**********************************************************
void beep(void)
{
    char tsreg=SREG;
    5788:	9f b7       	in	r25, 0x3f	; 63
    cli();
    578a:	f8 94       	cli
    TIMSK0 |= (1 << OCIE0A);
    578c:	ee e6       	ldi	r30, 0x6E	; 110
    578e:	f0 e0       	ldi	r31, 0x00	; 0
    5790:	80 81       	ld	r24, Z
    5792:	82 60       	ori	r24, 0x02	; 2
    5794:	80 83       	st	Z, r24
    SREG = tsreg;
    5796:	9f bf       	out	0x3f, r25	; 63
    sei();
    5798:	78 94       	sei
}
    579a:	08 95       	ret

0000579c <__vector_14>:

//*******************************************************************************************************************
ISR(TIMER0_COMPA_vect)
{
    579c:	1f 92       	push	r1
    579e:	1f b6       	in	r1, 0x3f	; 63
    57a0:	1f 92       	push	r1
    57a2:	11 24       	eor	r1, r1
    57a4:	8f 93       	push	r24
    57a6:	9f 93       	push	r25
    57a8:	ef 93       	push	r30
    57aa:	ff 93       	push	r31
    static uint8_t i = 0;
    DigitalLevelToggle(PIN_BEEP);
    57ac:	8b b1       	in	r24, 0x0b	; 11
    57ae:	90 e4       	ldi	r25, 0x40	; 64
    57b0:	89 27       	eor	r24, r25
    57b2:	8b b9       	out	0x0b, r24	; 11
    i++;
    57b4:	80 91 93 05 	lds	r24, 0x0593	; 0x800593 <i.3>
    57b8:	8f 5f       	subi	r24, 0xFF	; 255
    57ba:	80 93 93 05 	sts	0x0593, r24	; 0x800593 <i.3>
    if(i > 100)
    57be:	85 36       	cpi	r24, 0x65	; 101
    57c0:	40 f0       	brcs	.+16     	; 0x57d2 <__vector_14+0x36>
    {
        DigitalWrite(PIN_BEEP, LOW);
    57c2:	5e 98       	cbi	0x0b, 6	; 11
        i = 0;
    57c4:	10 92 93 05 	sts	0x0593, r1	; 0x800593 <i.3>
        TIMSK0 &= ~(1<< OCIE0A);
    57c8:	ee e6       	ldi	r30, 0x6E	; 110
    57ca:	f0 e0       	ldi	r31, 0x00	; 0
    57cc:	80 81       	ld	r24, Z
    57ce:	8d 7f       	andi	r24, 0xFD	; 253
    57d0:	80 83       	st	Z, r24
    }
}
    57d2:	ff 91       	pop	r31
    57d4:	ef 91       	pop	r30
    57d6:	9f 91       	pop	r25
    57d8:	8f 91       	pop	r24
    57da:	1f 90       	pop	r1
    57dc:	1f be       	out	0x3f, r1	; 63
    57de:	1f 90       	pop	r1
    57e0:	18 95       	reti

000057e2 <led_management>:
void led_management(void)
{
    static uint8_t i = 0;


    if(get_local_guard() == 1)
    57e2:	0e 94 a8 10 	call	0x2150	; 0x2150 <get_local_guard>
    57e6:	81 30       	cpi	r24, 0x01	; 1
    57e8:	71 f4       	brne	.+28     	; 0x5806 <led_management+0x24>
    {
        i++;
    57ea:	80 91 90 05 	lds	r24, 0x0590	; 0x800590 <i.0>
    57ee:	8f 5f       	subi	r24, 0xFF	; 255
    57f0:	80 93 90 05 	sts	0x0590, r24	; 0x800590 <i.0>
        if(i > 30) // every 300ms
    57f4:	8f 31       	cpi	r24, 0x1F	; 31
    57f6:	60 f0       	brcs	.+24     	; 0x5810 <led_management+0x2e>
        {
            DigitalLevelToggle(RED_LED);
    57f8:	85 b1       	in	r24, 0x05	; 5
    57fa:	90 e2       	ldi	r25, 0x20	; 32
    57fc:	89 27       	eor	r24, r25
    57fe:	85 b9       	out	0x05, r24	; 5
            i = 0;
    5800:	10 92 90 05 	sts	0x0590, r1	; 0x800590 <i.0>
    5804:	08 95       	ret
        }
    }
    else if(get_guard() == 0)
    5806:	0e 94 a2 10 	call	0x2144	; 0x2144 <get_guard>
    580a:	81 11       	cpse	r24, r1
    580c:	01 c0       	rjmp	.+2      	; 0x5810 <led_management+0x2e>
        DigitalWrite(RED_LED, LOW);
    580e:	2d 98       	cbi	0x05, 5	; 5
}
    5810:	08 95       	ret

00005812 <get_time_ms>:
//*******************************************************************************************************************

uint32_t get_time_ms(void)
{
    5812:	cf 93       	push	r28
    5814:	df 93       	push	r29
    5816:	00 d0       	rcall	.+0      	; 0x5818 <get_time_ms+0x6>
    5818:	00 d0       	rcall	.+0      	; 0x581a <get_time_ms+0x8>
    581a:	cd b7       	in	r28, 0x3d	; 61
    581c:	de b7       	in	r29, 0x3e	; 62
    return get_val(time_ms);
    581e:	8f b7       	in	r24, 0x3f	; 63
    5820:	f8 94       	cli
    5822:	20 91 a7 05 	lds	r18, 0x05A7	; 0x8005a7 <time_ms>
    5826:	30 91 a8 05 	lds	r19, 0x05A8	; 0x8005a8 <time_ms+0x1>
    582a:	40 91 a9 05 	lds	r20, 0x05A9	; 0x8005a9 <time_ms+0x2>
    582e:	50 91 aa 05 	lds	r21, 0x05AA	; 0x8005aa <time_ms+0x3>
    5832:	29 83       	std	Y+1, r18	; 0x01
    5834:	3a 83       	std	Y+2, r19	; 0x02
    5836:	4b 83       	std	Y+3, r20	; 0x03
    5838:	5c 83       	std	Y+4, r21	; 0x04
    583a:	8f bf       	out	0x3f, r24	; 63
}
    583c:	69 81       	ldd	r22, Y+1	; 0x01
    583e:	7a 81       	ldd	r23, Y+2	; 0x02
    5840:	8b 81       	ldd	r24, Y+3	; 0x03
    5842:	9c 81       	ldd	r25, Y+4	; 0x04
    5844:	0f 90       	pop	r0
    5846:	0f 90       	pop	r0
    5848:	0f 90       	pop	r0
    584a:	0f 90       	pop	r0
    584c:	df 91       	pop	r29
    584e:	cf 91       	pop	r28
    5850:	08 95       	ret

00005852 <get_time_s>:
//*******************************************************************************************************************

uint32_t get_time_s(void)
{
    5852:	cf 93       	push	r28
    5854:	df 93       	push	r29
    5856:	00 d0       	rcall	.+0      	; 0x5858 <get_time_s+0x6>
    5858:	00 d0       	rcall	.+0      	; 0x585a <get_time_s+0x8>
    585a:	cd b7       	in	r28, 0x3d	; 61
    585c:	de b7       	in	r29, 0x3e	; 62
    return get_val(time_s);
    585e:	8f b7       	in	r24, 0x3f	; 63
    5860:	f8 94       	cli
    5862:	20 91 a3 05 	lds	r18, 0x05A3	; 0x8005a3 <time_s>
    5866:	30 91 a4 05 	lds	r19, 0x05A4	; 0x8005a4 <time_s+0x1>
    586a:	40 91 a5 05 	lds	r20, 0x05A5	; 0x8005a5 <time_s+0x2>
    586e:	50 91 a6 05 	lds	r21, 0x05A6	; 0x8005a6 <time_s+0x3>
    5872:	29 83       	std	Y+1, r18	; 0x01
    5874:	3a 83       	std	Y+2, r19	; 0x02
    5876:	4b 83       	std	Y+3, r20	; 0x03
    5878:	5c 83       	std	Y+4, r21	; 0x04
    587a:	8f bf       	out	0x3f, r24	; 63
}
    587c:	69 81       	ldd	r22, Y+1	; 0x01
    587e:	7a 81       	ldd	r23, Y+2	; 0x02
    5880:	8b 81       	ldd	r24, Y+3	; 0x03
    5882:	9c 81       	ldd	r25, Y+4	; 0x04
    5884:	0f 90       	pop	r0
    5886:	0f 90       	pop	r0
    5888:	0f 90       	pop	r0
    588a:	0f 90       	pop	r0
    588c:	df 91       	pop	r29
    588e:	cf 91       	pop	r28
    5890:	08 95       	ret

00005892 <get_time_m>:

//*******************************************************************************************************************

uint32_t get_time_m(void)
{
    5892:	cf 93       	push	r28
    5894:	df 93       	push	r29
    5896:	00 d0       	rcall	.+0      	; 0x5898 <get_time_m+0x6>
    5898:	00 d0       	rcall	.+0      	; 0x589a <get_time_m+0x8>
    589a:	cd b7       	in	r28, 0x3d	; 61
    589c:	de b7       	in	r29, 0x3e	; 62
    return get_val(time_m);
    589e:	8f b7       	in	r24, 0x3f	; 63
    58a0:	f8 94       	cli
    58a2:	20 91 9f 05 	lds	r18, 0x059F	; 0x80059f <time_m>
    58a6:	30 91 a0 05 	lds	r19, 0x05A0	; 0x8005a0 <time_m+0x1>
    58aa:	40 91 a1 05 	lds	r20, 0x05A1	; 0x8005a1 <time_m+0x2>
    58ae:	50 91 a2 05 	lds	r21, 0x05A2	; 0x8005a2 <time_m+0x3>
    58b2:	29 83       	std	Y+1, r18	; 0x01
    58b4:	3a 83       	std	Y+2, r19	; 0x02
    58b6:	4b 83       	std	Y+3, r20	; 0x03
    58b8:	5c 83       	std	Y+4, r21	; 0x04
    58ba:	8f bf       	out	0x3f, r24	; 63
}
    58bc:	69 81       	ldd	r22, Y+1	; 0x01
    58be:	7a 81       	ldd	r23, Y+2	; 0x02
    58c0:	8b 81       	ldd	r24, Y+3	; 0x03
    58c2:	9c 81       	ldd	r25, Y+4	; 0x04
    58c4:	0f 90       	pop	r0
    58c6:	0f 90       	pop	r0
    58c8:	0f 90       	pop	r0
    58ca:	0f 90       	pop	r0
    58cc:	df 91       	pop	r29
    58ce:	cf 91       	pop	r28
    58d0:	08 95       	ret

000058d2 <reset_soft_wdt>:

//*******************************************************************************************************************

void reset_soft_wdt(void)
{
    set_val(soft_wdt, 0);
    58d2:	8f b7       	in	r24, 0x3f	; 63
    58d4:	f8 94       	cli
    58d6:	10 92 9b 05 	sts	0x059B, r1	; 0x80059b <soft_wdt+0x1>
    58da:	10 92 9a 05 	sts	0x059A, r1	; 0x80059a <soft_wdt>
    58de:	8f bf       	out	0x3f, r24	; 63
}
    58e0:	08 95       	ret

000058e2 <delay_ms>:
}

//*******************************************************************************************************************
// задержка на х милисекунд
void delay_ms(uint16_t delay)
{
    58e2:	cf 92       	push	r12
    58e4:	df 92       	push	r13
    58e6:	ef 92       	push	r14
    58e8:	ff 92       	push	r15
    58ea:	cf 93       	push	r28
    58ec:	df 93       	push	r29
    58ee:	00 d0       	rcall	.+0      	; 0x58f0 <delay_ms+0xe>
    58f0:	00 d0       	rcall	.+0      	; 0x58f2 <delay_ms+0x10>
    58f2:	cd b7       	in	r28, 0x3d	; 61
    58f4:	de b7       	in	r29, 0x3e	; 62
    58f6:	e8 2e       	mov	r14, r24
    58f8:	f9 2e       	mov	r15, r25
    uint32_t time_stamp = get_time_ms() + delay;
    58fa:	0e 94 09 2c 	call	0x5812	; 0x5812 <get_time_ms>
    58fe:	dc 01       	movw	r26, r24
    5900:	cb 01       	movw	r24, r22
    5902:	8e 0d       	add	r24, r14
    5904:	9f 1d       	adc	r25, r15
    5906:	a1 1d       	adc	r26, r1
    5908:	b1 1d       	adc	r27, r1
    590a:	6c 01       	movw	r12, r24
    590c:	7d 01       	movw	r14, r26
    _SLEEP();
    590e:	88 95       	sleep
    while((get_time_ms() < time_stamp))
    5910:	0d c0       	rjmp	.+26     	; 0x592c <delay_ms+0x4a>
    {
        while(is_queue_not_empty()) // тем временем, проверяем входной буфер
            get_message_from_mdm();
    5912:	0e 94 01 12 	call	0x2402	; 0x2402 <get_message_from_mdm>
        while(is_queue_not_empty()) // тем временем, проверяем входной буфер
    5916:	0e 94 51 2e 	call	0x5ca2	; 0x5ca2 <is_queue_not_empty>
    591a:	81 11       	cpse	r24, r1
    591c:	fa cf       	rjmp	.-12     	; 0x5912 <delay_ms+0x30>
    591e:	02 c0       	rjmp	.+4      	; 0x5924 <delay_ms+0x42>
        while(softuart_kbhit())// recv softuart
            get_message_from_openwrt();
    5920:	0e 94 fb 29 	call	0x53f6	; 0x53f6 <get_message_from_openwrt>
        while(softuart_kbhit())// recv softuart
    5924:	0e 94 f7 27 	call	0x4fee	; 0x4fee <softuart_kbhit>
    5928:	81 11       	cpse	r24, r1
    592a:	fa cf       	rjmp	.-12     	; 0x5920 <delay_ms+0x3e>
    while((get_time_ms() < time_stamp))
    592c:	0e 94 09 2c 	call	0x5812	; 0x5812 <get_time_ms>
    5930:	6c 15       	cp	r22, r12
    5932:	7d 05       	cpc	r23, r13
    5934:	8e 05       	cpc	r24, r14
    5936:	9f 05       	cpc	r25, r15
    5938:	70 f3       	brcs	.-36     	; 0x5916 <delay_ms+0x34>
    }
}
    593a:	0f 90       	pop	r0
    593c:	0f 90       	pop	r0
    593e:	0f 90       	pop	r0
    5940:	0f 90       	pop	r0
    5942:	df 91       	pop	r29
    5944:	cf 91       	pop	r28
    5946:	ff 90       	pop	r15
    5948:	ef 90       	pop	r14
    594a:	df 90       	pop	r13
    594c:	cf 90       	pop	r12
    594e:	08 95       	ret

00005950 <delay_s>:

//*******************************************************************************************************************
// задержка на х секунд
void delay_s(uint8_t delay)
{
    5950:	cf 92       	push	r12
    5952:	df 92       	push	r13
    5954:	ef 92       	push	r14
    5956:	ff 92       	push	r15
    5958:	cf 93       	push	r28
    595a:	df 93       	push	r29
    595c:	00 d0       	rcall	.+0      	; 0x595e <delay_s+0xe>
    595e:	00 d0       	rcall	.+0      	; 0x5960 <delay_s+0x10>
    5960:	cd b7       	in	r28, 0x3d	; 61
    5962:	de b7       	in	r29, 0x3e	; 62
    5964:	f8 2e       	mov	r15, r24
    uint32_t time_stamp = get_time_s() + delay;
    5966:	0e 94 29 2c 	call	0x5852	; 0x5852 <get_time_s>
    596a:	dc 01       	movw	r26, r24
    596c:	cb 01       	movw	r24, r22
    596e:	8f 0d       	add	r24, r15
    5970:	91 1d       	adc	r25, r1
    5972:	a1 1d       	adc	r26, r1
    5974:	b1 1d       	adc	r27, r1
    5976:	6c 01       	movw	r12, r24
    5978:	7d 01       	movw	r14, r26
    _SLEEP();
    597a:	88 95       	sleep
    while((get_time_s() < time_stamp))
    597c:	0d c0       	rjmp	.+26     	; 0x5998 <delay_s+0x48>
    {
        while(is_queue_not_empty()) // тем временем, проверяем входной буфер
            get_message_from_mdm();
    597e:	0e 94 01 12 	call	0x2402	; 0x2402 <get_message_from_mdm>
        while(is_queue_not_empty()) // тем временем, проверяем входной буфер
    5982:	0e 94 51 2e 	call	0x5ca2	; 0x5ca2 <is_queue_not_empty>
    5986:	81 11       	cpse	r24, r1
    5988:	fa cf       	rjmp	.-12     	; 0x597e <delay_s+0x2e>
    598a:	02 c0       	rjmp	.+4      	; 0x5990 <delay_s+0x40>
        while(softuart_kbhit())// recv softuart
            get_message_from_openwrt();
    598c:	0e 94 fb 29 	call	0x53f6	; 0x53f6 <get_message_from_openwrt>
        while(softuart_kbhit())// recv softuart
    5990:	0e 94 f7 27 	call	0x4fee	; 0x4fee <softuart_kbhit>
    5994:	81 11       	cpse	r24, r1
    5996:	fa cf       	rjmp	.-12     	; 0x598c <delay_s+0x3c>
    while((get_time_s() < time_stamp))
    5998:	0e 94 29 2c 	call	0x5852	; 0x5852 <get_time_s>
    599c:	6c 15       	cp	r22, r12
    599e:	7d 05       	cpc	r23, r13
    59a0:	8e 05       	cpc	r24, r14
    59a2:	9f 05       	cpc	r25, r15
    59a4:	70 f3       	brcs	.-36     	; 0x5982 <delay_s+0x32>
    }
}
    59a6:	0f 90       	pop	r0
    59a8:	0f 90       	pop	r0
    59aa:	0f 90       	pop	r0
    59ac:	0f 90       	pop	r0
    59ae:	df 91       	pop	r29
    59b0:	cf 91       	pop	r28
    59b2:	ff 90       	pop	r15
    59b4:	ef 90       	pop	r14
    59b6:	df 90       	pop	r13
    59b8:	cf 90       	pop	r12
    59ba:	08 95       	ret

000059bc <start_buzzer>:
//*******************************************************************************************************************
// звуковой сигнал
void start_buzzer(uint8_t mode)
{
    DigitalWrite(PIN_BUZZER, HIGH);
    59bc:	5d 9a       	sbi	0x0b, 5	; 11
//   DigitalWrite(PIN_BUZZER2, HIGH);
}
    59be:	08 95       	ret

000059c0 <buzzer_non_block>:
    cli();
    59c0:	f8 94       	cli
    beep_on = 1;
    59c2:	21 e0       	ldi	r18, 0x01	; 1
    59c4:	20 93 9e 05 	sts	0x059E, r18	; 0x80059e <beep_on>
    beep_counter = time_to_buz;
    59c8:	80 93 9c 05 	sts	0x059C, r24	; 0x80059c <beep_counter>
    59cc:	90 93 9d 05 	sts	0x059D, r25	; 0x80059d <beep_counter+0x1>
    start_buzzer(0);
    59d0:	80 e0       	ldi	r24, 0x00	; 0
    59d2:	0e 94 de 2c 	call	0x59bc	; 0x59bc <start_buzzer>
    sei();
    59d6:	78 94       	sei
}
    59d8:	08 95       	ret

000059da <stop_buzzer>:

//*******************************************************************************************************************
// звуковой сигнал
void stop_buzzer(void)
{
    DigitalWrite(PIN_BUZZER, LOW);
    59da:	5d 98       	cbi	0x0b, 5	; 11
//    DigitalWrite(PIN_BUZZER2, LOW);
}
    59dc:	08 95       	ret

000059de <__vector_11>:
{
    59de:	1f 92       	push	r1
    59e0:	0f 92       	push	r0
    59e2:	0f b6       	in	r0, 0x3f	; 63
    59e4:	0f 92       	push	r0
    59e6:	11 24       	eor	r1, r1
    59e8:	2f 93       	push	r18
    59ea:	3f 93       	push	r19
    59ec:	4f 93       	push	r20
    59ee:	5f 93       	push	r21
    59f0:	6f 93       	push	r22
    59f2:	7f 93       	push	r23
    59f4:	8f 93       	push	r24
    59f6:	9f 93       	push	r25
    59f8:	af 93       	push	r26
    59fa:	bf 93       	push	r27
    59fc:	ef 93       	push	r30
    59fe:	ff 93       	push	r31
    led_management();
    5a00:	0e 94 f1 2b 	call	0x57e2	; 0x57e2 <led_management>
    led_gsm();
    5a04:	0e 94 8e 1f 	call	0x3f1c	; 0x3f1c <led_gsm>
    check_motion();
    5a08:	0e 94 7c 20 	call	0x40f8	; 0x40f8 <check_motion>
    check_button();
    5a0c:	0e 94 c2 20 	call	0x4184	; 0x4184 <check_button>
    check_single_sensor();
    5a10:	0e 94 54 20 	call	0x40a8	; 0x40a8 <check_single_sensor>
    if(beep_on)
    5a14:	80 91 9e 05 	lds	r24, 0x059E	; 0x80059e <beep_on>
    5a18:	88 23       	and	r24, r24
    5a1a:	61 f0       	breq	.+24     	; 0x5a34 <__vector_11+0x56>
        if(beep_counter >= 10)
    5a1c:	80 91 9c 05 	lds	r24, 0x059C	; 0x80059c <beep_counter>
    5a20:	90 91 9d 05 	lds	r25, 0x059D	; 0x80059d <beep_counter+0x1>
    5a24:	8a 30       	cpi	r24, 0x0A	; 10
    5a26:	91 05       	cpc	r25, r1
    5a28:	88 f1       	brcs	.+98     	; 0x5a8c <__vector_11+0xae>
            beep_counter -= 10;
    5a2a:	0a 97       	sbiw	r24, 0x0a	; 10
    5a2c:	90 93 9d 05 	sts	0x059D, r25	; 0x80059d <beep_counter+0x1>
    5a30:	80 93 9c 05 	sts	0x059C, r24	; 0x80059c <beep_counter>
    time_ms+=10;
    5a34:	80 91 a7 05 	lds	r24, 0x05A7	; 0x8005a7 <time_ms>
    5a38:	90 91 a8 05 	lds	r25, 0x05A8	; 0x8005a8 <time_ms+0x1>
    5a3c:	a0 91 a9 05 	lds	r26, 0x05A9	; 0x8005a9 <time_ms+0x2>
    5a40:	b0 91 aa 05 	lds	r27, 0x05AA	; 0x8005aa <time_ms+0x3>
    5a44:	0a 96       	adiw	r24, 0x0a	; 10
    5a46:	a1 1d       	adc	r26, r1
    5a48:	b1 1d       	adc	r27, r1
    5a4a:	80 93 a7 05 	sts	0x05A7, r24	; 0x8005a7 <time_ms>
    5a4e:	90 93 a8 05 	sts	0x05A8, r25	; 0x8005a8 <time_ms+0x1>
    5a52:	a0 93 a9 05 	sts	0x05A9, r26	; 0x8005a9 <time_ms+0x2>
    5a56:	b0 93 aa 05 	sts	0x05AA, r27	; 0x8005aa <time_ms+0x3>
    i++;
    5a5a:	80 91 92 05 	lds	r24, 0x0592	; 0x800592 <i.2>
    5a5e:	8f 5f       	subi	r24, 0xFF	; 255
    if(i>=100) // 1 секунда
    5a60:	84 36       	cpi	r24, 0x64	; 100
    5a62:	e8 f4       	brcc	.+58     	; 0x5a9e <__vector_11+0xc0>
    i++;
    5a64:	80 93 92 05 	sts	0x0592, r24	; 0x800592 <i.2>
    _WDT_RESET(); // сброс сторожевого таймера
    5a68:	a8 95       	wdr
}
    5a6a:	ff 91       	pop	r31
    5a6c:	ef 91       	pop	r30
    5a6e:	bf 91       	pop	r27
    5a70:	af 91       	pop	r26
    5a72:	9f 91       	pop	r25
    5a74:	8f 91       	pop	r24
    5a76:	7f 91       	pop	r23
    5a78:	6f 91       	pop	r22
    5a7a:	5f 91       	pop	r21
    5a7c:	4f 91       	pop	r20
    5a7e:	3f 91       	pop	r19
    5a80:	2f 91       	pop	r18
    5a82:	0f 90       	pop	r0
    5a84:	0f be       	out	0x3f, r0	; 63
    5a86:	0f 90       	pop	r0
    5a88:	1f 90       	pop	r1
    5a8a:	18 95       	reti
            beep_counter = 0;
    5a8c:	10 92 9d 05 	sts	0x059D, r1	; 0x80059d <beep_counter+0x1>
    5a90:	10 92 9c 05 	sts	0x059C, r1	; 0x80059c <beep_counter>
            beep_on = 0;
    5a94:	10 92 9e 05 	sts	0x059E, r1	; 0x80059e <beep_on>
            stop_buzzer();
    5a98:	0e 94 ed 2c 	call	0x59da	; 0x59da <stop_buzzer>
    5a9c:	cb cf       	rjmp	.-106    	; 0x5a34 <__vector_11+0x56>
        i=0;
    5a9e:	10 92 92 05 	sts	0x0592, r1	; 0x800592 <i.2>
        time_s++;
    5aa2:	80 91 a3 05 	lds	r24, 0x05A3	; 0x8005a3 <time_s>
    5aa6:	90 91 a4 05 	lds	r25, 0x05A4	; 0x8005a4 <time_s+0x1>
    5aaa:	a0 91 a5 05 	lds	r26, 0x05A5	; 0x8005a5 <time_s+0x2>
    5aae:	b0 91 a6 05 	lds	r27, 0x05A6	; 0x8005a6 <time_s+0x3>
    5ab2:	01 96       	adiw	r24, 0x01	; 1
    5ab4:	a1 1d       	adc	r26, r1
    5ab6:	b1 1d       	adc	r27, r1
    5ab8:	80 93 a3 05 	sts	0x05A3, r24	; 0x8005a3 <time_s>
    5abc:	90 93 a4 05 	sts	0x05A4, r25	; 0x8005a4 <time_s+0x1>
    5ac0:	a0 93 a5 05 	sts	0x05A5, r26	; 0x8005a5 <time_s+0x2>
    5ac4:	b0 93 a6 05 	sts	0x05A6, r27	; 0x8005a6 <time_s+0x3>
        if(time_from_button_s < 0xFFFF)
    5ac8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <time_from_button_s>
    5acc:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <time_from_button_s+0x1>
    5ad0:	8f 3f       	cpi	r24, 0xFF	; 255
    5ad2:	98 07       	cpc	r25, r24
    5ad4:	29 f0       	breq	.+10     	; 0x5ae0 <__vector_11+0x102>
            time_from_button_s++;
    5ad6:	01 96       	adiw	r24, 0x01	; 1
    5ad8:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <time_from_button_s+0x1>
    5adc:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <time_from_button_s>
        soft_wdt++;
    5ae0:	80 91 9a 05 	lds	r24, 0x059A	; 0x80059a <soft_wdt>
    5ae4:	90 91 9b 05 	lds	r25, 0x059B	; 0x80059b <soft_wdt+0x1>
    5ae8:	01 96       	adiw	r24, 0x01	; 1
    5aea:	90 93 9b 05 	sts	0x059B, r25	; 0x80059b <soft_wdt+0x1>
    5aee:	80 93 9a 05 	sts	0x059A, r24	; 0x80059a <soft_wdt>
        j++;
    5af2:	20 91 91 05 	lds	r18, 0x0591	; 0x800591 <j.1>
    5af6:	2f 5f       	subi	r18, 0xFF	; 255
        if(j>=60)
    5af8:	2c 33       	cpi	r18, 0x3C	; 60
    5afa:	b8 f5       	brcc	.+110    	; 0x5b6a <__vector_11+0x18c>
        j++;
    5afc:	20 93 91 05 	sts	0x0591, r18	; 0x800591 <j.1>
        if(soft_wdt > 600) // 1200 секунд 20 минут
    5b00:	89 35       	cpi	r24, 0x59	; 89
    5b02:	92 40       	sbci	r25, 0x02	; 2
    5b04:	78 f0       	brcs	.+30     	; 0x5b24 <__vector_11+0x146>
            if(reset_s_wdt < 0xFFFF)
    5b06:	80 91 98 05 	lds	r24, 0x0598	; 0x800598 <reset_s_wdt>
    5b0a:	90 91 99 05 	lds	r25, 0x0599	; 0x800599 <reset_s_wdt+0x1>
    5b0e:	8f 3f       	cpi	r24, 0xFF	; 255
    5b10:	98 07       	cpc	r25, r24
    5b12:	29 f0       	breq	.+10     	; 0x5b1e <__vector_11+0x140>
                reset_s_wdt++;
    5b14:	01 96       	adiw	r24, 0x01	; 1
    5b16:	90 93 99 05 	sts	0x0599, r25	; 0x800599 <reset_s_wdt+0x1>
    5b1a:	80 93 98 05 	sts	0x0598, r24	; 0x800598 <reset_s_wdt>
            reset_mcu(1);
    5b1e:	81 e0       	ldi	r24, 0x01	; 1
    5b20:	0e 94 84 1a 	call	0x3508	; 0x3508 <reset_mcu>
    time_from_motion_s++; // счетчик переполнится через 136 лет
    5b24:	80 91 94 05 	lds	r24, 0x0594	; 0x800594 <time_from_motion_s>
    5b28:	90 91 95 05 	lds	r25, 0x0595	; 0x800595 <time_from_motion_s+0x1>
    5b2c:	a0 91 96 05 	lds	r26, 0x0596	; 0x800596 <time_from_motion_s+0x2>
    5b30:	b0 91 97 05 	lds	r27, 0x0597	; 0x800597 <time_from_motion_s+0x3>
    5b34:	01 96       	adiw	r24, 0x01	; 1
    5b36:	a1 1d       	adc	r26, r1
    5b38:	b1 1d       	adc	r27, r1
    5b3a:	80 93 94 05 	sts	0x0594, r24	; 0x800594 <time_from_motion_s>
    5b3e:	90 93 95 05 	sts	0x0595, r25	; 0x800595 <time_from_motion_s+0x1>
    5b42:	a0 93 96 05 	sts	0x0596, r26	; 0x800596 <time_from_motion_s+0x2>
    5b46:	b0 93 97 05 	sts	0x0597, r27	; 0x800597 <time_from_motion_s+0x3>
        if(get_guard() == 1 || (time_from_button_s < 0xFFFF))
    5b4a:	0e 94 a2 10 	call	0x2144	; 0x2144 <get_guard>
    5b4e:	81 30       	cpi	r24, 0x01	; 1
    5b50:	39 f0       	breq	.+14     	; 0x5b60 <__vector_11+0x182>
    5b52:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <time_from_button_s>
    5b56:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <time_from_button_s+0x1>
    5b5a:	01 96       	adiw	r24, 0x01	; 1
    5b5c:	09 f4       	brne	.+2      	; 0x5b60 <__vector_11+0x182>
    5b5e:	84 cf       	rjmp	.-248    	; 0x5a68 <__vector_11+0x8a>
            DigitalLevelToggle(RED_LED);
    5b60:	85 b1       	in	r24, 0x05	; 5
    5b62:	90 e2       	ldi	r25, 0x20	; 32
    5b64:	89 27       	eor	r24, r25
    5b66:	85 b9       	out	0x05, r24	; 5
    5b68:	7f cf       	rjmp	.-258    	; 0x5a68 <__vector_11+0x8a>
            j=0;
    5b6a:	10 92 91 05 	sts	0x0591, r1	; 0x800591 <j.1>
            time_m++;
    5b6e:	40 91 9f 05 	lds	r20, 0x059F	; 0x80059f <time_m>
    5b72:	50 91 a0 05 	lds	r21, 0x05A0	; 0x8005a0 <time_m+0x1>
    5b76:	60 91 a1 05 	lds	r22, 0x05A1	; 0x8005a1 <time_m+0x2>
    5b7a:	70 91 a2 05 	lds	r23, 0x05A2	; 0x8005a2 <time_m+0x3>
    5b7e:	4f 5f       	subi	r20, 0xFF	; 255
    5b80:	5f 4f       	sbci	r21, 0xFF	; 255
    5b82:	6f 4f       	sbci	r22, 0xFF	; 255
    5b84:	7f 4f       	sbci	r23, 0xFF	; 255
    5b86:	40 93 9f 05 	sts	0x059F, r20	; 0x80059f <time_m>
    5b8a:	50 93 a0 05 	sts	0x05A0, r21	; 0x8005a0 <time_m+0x1>
    5b8e:	60 93 a1 05 	sts	0x05A1, r22	; 0x8005a1 <time_m+0x2>
    5b92:	70 93 a2 05 	sts	0x05A2, r23	; 0x8005a2 <time_m+0x3>
    5b96:	b4 cf       	rjmp	.-152    	; 0x5b00 <__vector_11+0x122>

00005b98 <set_time_from_motion_s>:
//*******************************************************************************************************************

//////////////////////////////////////////////////
void set_time_from_motion_s(uint8_t time)
{
    set_val(time_from_motion_s, time);
    5b98:	2f b7       	in	r18, 0x3f	; 63
    5b9a:	f8 94       	cli
    5b9c:	90 e0       	ldi	r25, 0x00	; 0
    5b9e:	b0 e0       	ldi	r27, 0x00	; 0
    5ba0:	a0 e0       	ldi	r26, 0x00	; 0
    5ba2:	80 93 94 05 	sts	0x0594, r24	; 0x800594 <time_from_motion_s>
    5ba6:	90 93 95 05 	sts	0x0595, r25	; 0x800595 <time_from_motion_s+0x1>
    5baa:	a0 93 96 05 	sts	0x0596, r26	; 0x800596 <time_from_motion_s+0x2>
    5bae:	b0 93 97 05 	sts	0x0597, r27	; 0x800597 <time_from_motion_s+0x3>
    5bb2:	2f bf       	out	0x3f, r18	; 63
}
    5bb4:	08 95       	ret

00005bb6 <get_time_from_motion_s>:

uint32_t get_time_from_motion_s()
{
    5bb6:	cf 93       	push	r28
    5bb8:	df 93       	push	r29
    5bba:	cd b7       	in	r28, 0x3d	; 61
    5bbc:	de b7       	in	r29, 0x3e	; 62
    5bbe:	28 97       	sbiw	r28, 0x08	; 8
    5bc0:	0f b6       	in	r0, 0x3f	; 63
    5bc2:	f8 94       	cli
    5bc4:	de bf       	out	0x3e, r29	; 62
    5bc6:	0f be       	out	0x3f, r0	; 63
    5bc8:	cd bf       	out	0x3d, r28	; 61
    return get_val(time_from_motion_s);
    5bca:	8f b7       	in	r24, 0x3f	; 63
    5bcc:	f8 94       	cli
    5bce:	40 91 94 05 	lds	r20, 0x0594	; 0x800594 <time_from_motion_s>
    5bd2:	50 91 95 05 	lds	r21, 0x0595	; 0x800595 <time_from_motion_s+0x1>
    5bd6:	60 91 96 05 	lds	r22, 0x0596	; 0x800596 <time_from_motion_s+0x2>
    5bda:	70 91 97 05 	lds	r23, 0x0597	; 0x800597 <time_from_motion_s+0x3>
    5bde:	49 83       	std	Y+1, r20	; 0x01
    5be0:	5a 83       	std	Y+2, r21	; 0x02
    5be2:	6b 83       	std	Y+3, r22	; 0x03
    5be4:	7c 83       	std	Y+4, r23	; 0x04
    5be6:	8f bf       	out	0x3f, r24	; 63
    5be8:	89 81       	ldd	r24, Y+1	; 0x01
    5bea:	9a 81       	ldd	r25, Y+2	; 0x02
    5bec:	ab 81       	ldd	r26, Y+3	; 0x03
    5bee:	bc 81       	ldd	r27, Y+4	; 0x04
}
    5bf0:	bc 01       	movw	r22, r24
    5bf2:	cd 01       	movw	r24, r26
    5bf4:	28 96       	adiw	r28, 0x08	; 8
    5bf6:	0f b6       	in	r0, 0x3f	; 63
    5bf8:	f8 94       	cli
    5bfa:	de bf       	out	0x3e, r29	; 62
    5bfc:	0f be       	out	0x3f, r0	; 63
    5bfe:	cd bf       	out	0x3d, r28	; 61
    5c00:	df 91       	pop	r29
    5c02:	cf 91       	pop	r28
    5c04:	08 95       	ret

00005c06 <set_time_from_button_s>:

//////////////////// time_from_button_s //////////////////////////
void set_time_from_button_s(uint16_t time)
{
    set_val(time_from_button_s, time);
    5c06:	2f b7       	in	r18, 0x3f	; 63
    5c08:	f8 94       	cli
    5c0a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <time_from_button_s>
    5c0e:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <time_from_button_s+0x1>
    5c12:	2f bf       	out	0x3f, r18	; 63
}
    5c14:	08 95       	ret

00005c16 <get_time_from_button_s>:

uint16_t get_time_from_button_s()
{
    return get_val(time_from_button_s);
    5c16:	2f b7       	in	r18, 0x3f	; 63
    5c18:	f8 94       	cli
    5c1a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <time_from_button_s>
    5c1e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <time_from_button_s+0x1>
    5c22:	2f bf       	out	0x3f, r18	; 63
}
    5c24:	08 95       	ret

00005c26 <get_beep_on>:

//*******************************************************************************************************************

uint8_t get_beep_on(void)
{
    return get_val(beep_on);
    5c26:	9f b7       	in	r25, 0x3f	; 63
    5c28:	f8 94       	cli
    5c2a:	80 91 9e 05 	lds	r24, 0x059E	; 0x80059e <beep_on>
    5c2e:	9f bf       	out	0x3f, r25	; 63
}
    5c30:	08 95       	ret

00005c32 <init_uart>:
static unsigned char head;
static unsigned char tail;

void init_uart()
{
	UBRR0H = BAUD_PRESCALER >> 8;
    5c32:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = BAUD_PRESCALER;
    5c36:	87 e6       	ldi	r24, 0x67	; 103
    5c38:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

	// Set Frame Format
	UCSR0C = ASYNCHRONOUS | PARITY_MODE | STOP_BIT | DATA_BIT;
    5c3c:	86 e0       	ldi	r24, 0x06	; 6
    5c3e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UCSR0B = _BV(RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
    5c42:	88 e9       	ldi	r24, 0x98	; 152
    5c44:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>

	head = tail = 0;
    5c48:	10 92 ab 05 	sts	0x05AB, r1	; 0x8005ab <tail>
    5c4c:	10 92 ac 05 	sts	0x05AC, r1	; 0x8005ac <head>
}
    5c50:	08 95       	ret

00005c52 <__vector_18>:

//*******************************************************************************************************************

// USART Receiver interrupt service routine
ISR(USART_RX_vect)
{
    5c52:	8f 93       	push	r24
    5c54:	8f b7       	in	r24, 0x3f	; 63
    5c56:	8f 93       	push	r24
    5c58:	9f 93       	push	r25
    5c5a:	ef 93       	push	r30
    5c5c:	ff 93       	push	r31
	char status, data;

	status=UCSR0A;
    5c5e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	data=UDR0;
    5c62:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	if ((status & ((1<<FE0) | (1<<DOR0)))==0)
    5c66:	88 71       	andi	r24, 0x18	; 24
    5c68:	51 f4       	brne	.+20     	; 0x5c7e <__vector_18+0x2c>
	{
		uart_in_buf[head] = data;
    5c6a:	80 91 ac 05 	lds	r24, 0x05AC	; 0x8005ac <head>
    5c6e:	e8 2f       	mov	r30, r24
    5c70:	f0 e0       	ldi	r31, 0x00	; 0
    5c72:	e3 55       	subi	r30, 0x53	; 83
    5c74:	fa 4f       	sbci	r31, 0xFA	; 250
    5c76:	90 83       	st	Z, r25
		head = (head+1)&(UART_BUF_SIZE-1);
    5c78:	8f 5f       	subi	r24, 0xFF	; 255
    5c7a:	80 93 ac 05 	sts	0x05AC, r24	; 0x8005ac <head>
	}
}
    5c7e:	ff 91       	pop	r31
    5c80:	ef 91       	pop	r30
    5c82:	9f 91       	pop	r25
    5c84:	8f 91       	pop	r24
    5c86:	8f bf       	out	0x3f, r24	; 63
    5c88:	8f 91       	pop	r24
    5c8a:	18 95       	reti

00005c8c <get_byte_from_queue>:
//*******************************************************************************************************************

char get_byte_from_queue(void)
{
	char data;
	data = uart_in_buf[tail];
    5c8c:	80 91 ab 05 	lds	r24, 0x05AB	; 0x8005ab <tail>
    5c90:	e8 2f       	mov	r30, r24
    5c92:	f0 e0       	ldi	r31, 0x00	; 0
    5c94:	e3 55       	subi	r30, 0x53	; 83
    5c96:	fa 4f       	sbci	r31, 0xFA	; 250
	tail = (tail+1)&(UART_BUF_SIZE-1);
    5c98:	8f 5f       	subi	r24, 0xFF	; 255
    5c9a:	80 93 ab 05 	sts	0x05AB, r24	; 0x8005ab <tail>
	return data;
}
    5c9e:	80 81       	ld	r24, Z
    5ca0:	08 95       	ret

00005ca2 <is_queue_not_empty>:
//*******************************************************************************************************************

uint8_t is_queue_not_empty(void)
 {

	if(head!=tail)
    5ca2:	81 e0       	ldi	r24, 0x01	; 1
    5ca4:	20 91 ac 05 	lds	r18, 0x05AC	; 0x8005ac <head>
    5ca8:	90 91 ab 05 	lds	r25, 0x05AB	; 0x8005ab <tail>
    5cac:	29 13       	cpse	r18, r25

		return TRUE;
	else
		return FALSE;
}
    5cae:	08 95       	ret
	if(head!=tail)
    5cb0:	80 e0       	ldi	r24, 0x00	; 0
    5cb2:	fd cf       	rjmp	.-6      	; 0x5cae <is_queue_not_empty+0xc>

00005cb4 <uart_send_buf>:

//*******************************************************************************************************************

void uart_send_buf(char* buf, char len)
{
    5cb4:	cf 93       	push	r28
    5cb6:	df 93       	push	r29
    5cb8:	a8 2f       	mov	r26, r24
    5cba:	b9 2f       	mov	r27, r25
	while(len--)
    5cbc:	2f ef       	ldi	r18, 0xFF	; 255
    5cbe:	26 0f       	add	r18, r22
    5cc0:	66 23       	and	r22, r22
    5cc2:	89 f0       	breq	.+34     	; 0x5ce6 <uart_send_buf+0x32>
    5cc4:	30 e0       	ldi	r19, 0x00	; 0
    5cc6:	2f 5f       	subi	r18, 0xFF	; 255
    5cc8:	3f 4f       	sbci	r19, 0xFF	; 255
    5cca:	2a 0f       	add	r18, r26
    5ccc:	3b 1f       	adc	r19, r27
	{
		while( (UCSR0A & (1<<UDRE0)) == 0 ); // ждем готовности буферного регистра
    5cce:	e0 ec       	ldi	r30, 0xC0	; 192
    5cd0:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0 = *(buf++);
    5cd2:	c6 ec       	ldi	r28, 0xC6	; 198
    5cd4:	d0 e0       	ldi	r29, 0x00	; 0
		while( (UCSR0A & (1<<UDRE0)) == 0 ); // ждем готовности буферного регистра
    5cd6:	80 81       	ld	r24, Z
    5cd8:	85 ff       	sbrs	r24, 5
    5cda:	fd cf       	rjmp	.-6      	; 0x5cd6 <uart_send_buf+0x22>
		UDR0 = *(buf++);
    5cdc:	8d 91       	ld	r24, X+
    5cde:	88 83       	st	Y, r24
	while(len--)
    5ce0:	a2 17       	cp	r26, r18
    5ce2:	b3 07       	cpc	r27, r19
    5ce4:	c1 f7       	brne	.-16     	; 0x5cd6 <uart_send_buf+0x22>
	}
}
    5ce6:	df 91       	pop	r29
    5ce8:	cf 91       	pop	r28
    5cea:	08 95       	ret

00005cec <uart_send_str>:

//*******************************************************************************************************************

void uart_send_str(char *str)
{
    5cec:	cf 93       	push	r28
    5cee:	df 93       	push	r29
    5cf0:	a8 2f       	mov	r26, r24
    5cf2:	b9 2f       	mov	r27, r25
	while(*str)
    5cf4:	9c 91       	ld	r25, X
    5cf6:	99 23       	and	r25, r25
    5cf8:	61 f0       	breq	.+24     	; 0x5d12 <uart_send_str+0x26>
    5cfa:	11 96       	adiw	r26, 0x01	; 1
	{
		while( (UCSR0A & (1<<UDRE0)) == 0 ); // ждем готовности буферного регистра
    5cfc:	e0 ec       	ldi	r30, 0xC0	; 192
    5cfe:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0 = *str++;
    5d00:	c6 ec       	ldi	r28, 0xC6	; 198
    5d02:	d0 e0       	ldi	r29, 0x00	; 0
		while( (UCSR0A & (1<<UDRE0)) == 0 ); // ждем готовности буферного регистра
    5d04:	80 81       	ld	r24, Z
    5d06:	85 ff       	sbrs	r24, 5
    5d08:	fd cf       	rjmp	.-6      	; 0x5d04 <uart_send_str+0x18>
		UDR0 = *str++;
    5d0a:	98 83       	st	Y, r25
	while(*str)
    5d0c:	9d 91       	ld	r25, X+
    5d0e:	91 11       	cpse	r25, r1
    5d10:	f9 cf       	rjmp	.-14     	; 0x5d04 <uart_send_str+0x18>
	}
}
    5d12:	df 91       	pop	r29
    5d14:	cf 91       	pop	r28
    5d16:	08 95       	ret

00005d18 <uart_send_byte>:
}
//*******************************************************************************************************************

void uart_send_byte(char data)
{
	while( (UCSR0A & (1<<UDRE0)) == 0 ); // ждем готовности буферного регистра
    5d18:	e0 ec       	ldi	r30, 0xC0	; 192
    5d1a:	f0 e0       	ldi	r31, 0x00	; 0
    5d1c:	90 81       	ld	r25, Z
    5d1e:	95 ff       	sbrs	r25, 5
    5d20:	fd cf       	rjmp	.-6      	; 0x5d1c <uart_send_byte+0x4>
	UDR0 = data;
    5d22:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
    5d26:	08 95       	ret

00005d28 <uart_send_str_p>:
{
    5d28:	cf 93       	push	r28
    5d2a:	df 93       	push	r29
    5d2c:	e8 2f       	mov	r30, r24
    5d2e:	f9 2f       	mov	r31, r25
	while ((c = pgm_read_byte(progmem_s++))) {
    5d30:	ef 01       	movw	r28, r30
    5d32:	21 96       	adiw	r28, 0x01	; 1
    5d34:	84 91       	lpm	r24, Z
    5d36:	88 23       	and	r24, r24
    5d38:	39 f0       	breq	.+14     	; 0x5d48 <uart_send_str_p+0x20>
		uart_send_byte(c);
    5d3a:	0e 94 8c 2e 	call	0x5d18	; 0x5d18 <uart_send_byte>
	while ((c = pgm_read_byte(progmem_s++))) {
    5d3e:	fe 01       	movw	r30, r28
    5d40:	84 91       	lpm	r24, Z
    5d42:	21 96       	adiw	r28, 0x01	; 1
    5d44:	81 11       	cpse	r24, r1
    5d46:	f9 cf       	rjmp	.-14     	; 0x5d3a <uart_send_str_p+0x12>
}
    5d48:	df 91       	pop	r29
    5d4a:	cf 91       	pop	r28
    5d4c:	08 95       	ret

00005d4e <reset_uart_queue>:

//*******************************************************************************************************************

void reset_uart_queue(void)
{
	tail = head = 0;
    5d4e:	10 92 ac 05 	sts	0x05AC, r1	; 0x8005ac <head>
    5d52:	10 92 ab 05 	sts	0x05AB, r1	; 0x8005ab <tail>
}
    5d56:	08 95       	ret

00005d58 <uart_flush>:

void uart_flush(void)
{
    5d58:	8f 92       	push	r8
    5d5a:	9f 92       	push	r9
    5d5c:	af 92       	push	r10
    5d5e:	bf 92       	push	r11
    5d60:	ef 92       	push	r14
    5d62:	ff 92       	push	r15
    5d64:	0f 93       	push	r16
    5d66:	1f 93       	push	r17
    5d68:	cf 93       	push	r28
    5d6a:	df 93       	push	r29
    5d6c:	00 d0       	rcall	.+0      	; 0x5d6e <uart_flush+0x16>
    5d6e:	00 d0       	rcall	.+0      	; 0x5d70 <uart_flush+0x18>
    5d70:	0f 92       	push	r0
    5d72:	cd b7       	in	r28, 0x3d	; 61
    5d74:	de b7       	in	r29, 0x3e	; 62
	volatile char dummy;
	uint32_t time_stamp = get_time_s() + 3;
    5d76:	0e 94 29 2c 	call	0x5852	; 0x5852 <get_time_s>
    5d7a:	6a 83       	std	Y+2, r22	; 0x02
    5d7c:	7b 83       	std	Y+3, r23	; 0x03
    5d7e:	8c 83       	std	Y+4, r24	; 0x04
    5d80:	9d 83       	std	Y+5, r25	; 0x05
    5d82:	4b 01       	movw	r8, r22
    5d84:	5c 01       	movw	r10, r24
    5d86:	83 e0       	ldi	r24, 0x03	; 3
    5d88:	88 0e       	add	r8, r24
    5d8a:	91 1c       	adc	r9, r1
    5d8c:	a1 1c       	adc	r10, r1
    5d8e:	b1 1c       	adc	r11, r1
	while ( UCSR0A & (1<<RXC0) )
    5d90:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    5d94:	88 23       	and	r24, r24
    5d96:	dc f4       	brge	.+54     	; 0x5dce <uart_flush+0x76>
	{
        if(get_time_s() > time_stamp)
            return;
		dummy = UDR0;
    5d98:	0f 2e       	mov	r0, r31
    5d9a:	f6 ec       	ldi	r31, 0xC6	; 198
    5d9c:	ef 2e       	mov	r14, r31
    5d9e:	f1 2c       	mov	r15, r1
    5da0:	f0 2d       	mov	r31, r0
	while ( UCSR0A & (1<<RXC0) )
    5da2:	00 ec       	ldi	r16, 0xC0	; 192
    5da4:	10 e0       	ldi	r17, 0x00	; 0
        if(get_time_s() > time_stamp)
    5da6:	0e 94 29 2c 	call	0x5852	; 0x5852 <get_time_s>
    5daa:	6a 83       	std	Y+2, r22	; 0x02
    5dac:	7b 83       	std	Y+3, r23	; 0x03
    5dae:	8c 83       	std	Y+4, r24	; 0x04
    5db0:	9d 83       	std	Y+5, r25	; 0x05
    5db2:	86 16       	cp	r8, r22
    5db4:	97 06       	cpc	r9, r23
    5db6:	a8 06       	cpc	r10, r24
    5db8:	b9 06       	cpc	r11, r25
    5dba:	48 f0       	brcs	.+18     	; 0x5dce <uart_flush+0x76>
		dummy = UDR0;
    5dbc:	d7 01       	movw	r26, r14
    5dbe:	8c 91       	ld	r24, X
    5dc0:	89 83       	std	Y+1, r24	; 0x01
		dummy = dummy;
    5dc2:	89 81       	ldd	r24, Y+1	; 0x01
    5dc4:	89 83       	std	Y+1, r24	; 0x01
	while ( UCSR0A & (1<<RXC0) )
    5dc6:	f8 01       	movw	r30, r16
    5dc8:	80 81       	ld	r24, Z
    5dca:	88 23       	and	r24, r24
    5dcc:	64 f3       	brlt	.-40     	; 0x5da6 <uart_flush+0x4e>
	}
}
    5dce:	0f 90       	pop	r0
    5dd0:	0f 90       	pop	r0
    5dd2:	0f 90       	pop	r0
    5dd4:	0f 90       	pop	r0
    5dd6:	0f 90       	pop	r0
    5dd8:	df 91       	pop	r29
    5dda:	cf 91       	pop	r28
    5ddc:	1f 91       	pop	r17
    5dde:	0f 91       	pop	r16
    5de0:	ff 90       	pop	r15
    5de2:	ef 90       	pop	r14
    5de4:	bf 90       	pop	r11
    5de6:	af 90       	pop	r10
    5de8:	9f 90       	pop	r9
    5dea:	8f 90       	pop	r8
    5dec:	08 95       	ret

00005dee <__subvhi3>:
    5dee:	ac 01       	movw	r20, r24
    5df0:	9b 01       	movw	r18, r22
    5df2:	86 1b       	sub	r24, r22
    5df4:	97 0b       	sbc	r25, r23
    5df6:	53 27       	eor	r21, r19
    5df8:	28 27       	eor	r18, r24
    5dfa:	39 27       	eor	r19, r25
    5dfc:	20 95       	com	r18
    5dfe:	30 95       	com	r19
    5e00:	53 23       	and	r21, r19
    5e02:	57 fd       	sbrc	r21, 7
    5e04:	0e 94 68 33 	call	0x66d0	; 0x66d0 <abort>
    5e08:	08 95       	ret

00005e0a <__mulvhi3>:
    5e0a:	a4 e0       	ldi	r26, 0x04	; 4
    5e0c:	b0 e0       	ldi	r27, 0x00	; 0
    5e0e:	eb e0       	ldi	r30, 0x0B	; 11
    5e10:	ff e2       	ldi	r31, 0x2F	; 47
    5e12:	0c 94 a0 2f 	jmp	0x5f40	; 0x5f40 <__prologue_saves__+0x20>
    5e16:	db 01       	movw	r26, r22
    5e18:	40 e0       	ldi	r20, 0x00	; 0
    5e1a:	9c 01       	movw	r18, r24
    5e1c:	0e 94 72 2f 	call	0x5ee4	; 0x5ee4 <__mulhisi3>
    5e20:	69 83       	std	Y+1, r22	; 0x01
    5e22:	7a 83       	std	Y+2, r23	; 0x02
    5e24:	8b 83       	std	Y+3, r24	; 0x03
    5e26:	9c 83       	std	Y+4, r25	; 0x04
    5e28:	8a 81       	ldd	r24, Y+2	; 0x02
    5e2a:	88 0f       	add	r24, r24
    5e2c:	88 0b       	sbc	r24, r24
    5e2e:	98 2f       	mov	r25, r24
    5e30:	2b 81       	ldd	r18, Y+3	; 0x03
    5e32:	3c 81       	ldd	r19, Y+4	; 0x04
    5e34:	82 17       	cp	r24, r18
    5e36:	93 07       	cpc	r25, r19
    5e38:	09 f0       	breq	.+2      	; 0x5e3c <__mulvhi3+0x32>
    5e3a:	41 e0       	ldi	r20, 0x01	; 1
    5e3c:	41 11       	cpse	r20, r1
    5e3e:	0e 94 68 33 	call	0x66d0	; 0x66d0 <abort>
    5e42:	89 81       	ldd	r24, Y+1	; 0x01
    5e44:	9a 81       	ldd	r25, Y+2	; 0x02
    5e46:	24 96       	adiw	r28, 0x04	; 4
    5e48:	e2 e0       	ldi	r30, 0x02	; 2
    5e4a:	0c 94 bc 2f 	jmp	0x5f78	; 0x5f78 <__epilogue_restores__+0x20>

00005e4e <__negvhi2>:
    5e4e:	9c 01       	movw	r18, r24
    5e50:	90 e0       	ldi	r25, 0x00	; 0
    5e52:	44 27       	eor	r20, r20
    5e54:	55 27       	eor	r21, r21
    5e56:	42 1b       	sub	r20, r18
    5e58:	53 0b       	sbc	r21, r19
    5e5a:	21 15       	cp	r18, r1
    5e5c:	30 48       	sbci	r19, 0x80	; 128
    5e5e:	09 f4       	brne	.+2      	; 0x5e62 <__negvhi2+0x14>
    5e60:	91 e0       	ldi	r25, 0x01	; 1
    5e62:	91 11       	cpse	r25, r1
    5e64:	0e 94 68 33 	call	0x66d0	; 0x66d0 <abort>
    5e68:	ca 01       	movw	r24, r20
    5e6a:	08 95       	ret

00005e6c <__udivmodhi4>:
    5e6c:	aa 1b       	sub	r26, r26
    5e6e:	bb 1b       	sub	r27, r27
    5e70:	51 e1       	ldi	r21, 0x11	; 17
    5e72:	07 c0       	rjmp	.+14     	; 0x5e82 <__udivmodhi4_ep>

00005e74 <__udivmodhi4_loop>:
    5e74:	aa 1f       	adc	r26, r26
    5e76:	bb 1f       	adc	r27, r27
    5e78:	a6 17       	cp	r26, r22
    5e7a:	b7 07       	cpc	r27, r23
    5e7c:	10 f0       	brcs	.+4      	; 0x5e82 <__udivmodhi4_ep>
    5e7e:	a6 1b       	sub	r26, r22
    5e80:	b7 0b       	sbc	r27, r23

00005e82 <__udivmodhi4_ep>:
    5e82:	88 1f       	adc	r24, r24
    5e84:	99 1f       	adc	r25, r25
    5e86:	5a 95       	dec	r21
    5e88:	a9 f7       	brne	.-22     	; 0x5e74 <__udivmodhi4_loop>
    5e8a:	80 95       	com	r24
    5e8c:	90 95       	com	r25
    5e8e:	bc 01       	movw	r22, r24
    5e90:	cd 01       	movw	r24, r26
    5e92:	08 95       	ret

00005e94 <__udivmodsi4>:
    5e94:	a1 e2       	ldi	r26, 0x21	; 33
    5e96:	1a 2e       	mov	r1, r26
    5e98:	aa 1b       	sub	r26, r26
    5e9a:	bb 1b       	sub	r27, r27
    5e9c:	fd 01       	movw	r30, r26
    5e9e:	0d c0       	rjmp	.+26     	; 0x5eba <__udivmodsi4_ep>

00005ea0 <__udivmodsi4_loop>:
    5ea0:	aa 1f       	adc	r26, r26
    5ea2:	bb 1f       	adc	r27, r27
    5ea4:	ee 1f       	adc	r30, r30
    5ea6:	ff 1f       	adc	r31, r31
    5ea8:	a2 17       	cp	r26, r18
    5eaa:	b3 07       	cpc	r27, r19
    5eac:	e4 07       	cpc	r30, r20
    5eae:	f5 07       	cpc	r31, r21
    5eb0:	20 f0       	brcs	.+8      	; 0x5eba <__udivmodsi4_ep>
    5eb2:	a2 1b       	sub	r26, r18
    5eb4:	b3 0b       	sbc	r27, r19
    5eb6:	e4 0b       	sbc	r30, r20
    5eb8:	f5 0b       	sbc	r31, r21

00005eba <__udivmodsi4_ep>:
    5eba:	66 1f       	adc	r22, r22
    5ebc:	77 1f       	adc	r23, r23
    5ebe:	88 1f       	adc	r24, r24
    5ec0:	99 1f       	adc	r25, r25
    5ec2:	1a 94       	dec	r1
    5ec4:	69 f7       	brne	.-38     	; 0x5ea0 <__udivmodsi4_loop>
    5ec6:	60 95       	com	r22
    5ec8:	70 95       	com	r23
    5eca:	80 95       	com	r24
    5ecc:	90 95       	com	r25
    5ece:	9b 01       	movw	r18, r22
    5ed0:	ac 01       	movw	r20, r24
    5ed2:	bd 01       	movw	r22, r26
    5ed4:	cf 01       	movw	r24, r30
    5ed6:	08 95       	ret

00005ed8 <__tablejump2__>:
    5ed8:	ee 0f       	add	r30, r30
    5eda:	ff 1f       	adc	r31, r31
    5edc:	05 90       	lpm	r0, Z+
    5ede:	f4 91       	lpm	r31, Z
    5ee0:	e0 2d       	mov	r30, r0
    5ee2:	09 94       	ijmp

00005ee4 <__mulhisi3>:
    5ee4:	0e 94 7a 2f 	call	0x5ef4	; 0x5ef4 <__umulhisi3>
    5ee8:	33 23       	and	r19, r19
    5eea:	12 f4       	brpl	.+4      	; 0x5ef0 <__mulhisi3+0xc>
    5eec:	8a 1b       	sub	r24, r26
    5eee:	9b 0b       	sbc	r25, r27
    5ef0:	0c 94 8b 2f 	jmp	0x5f16	; 0x5f16 <__usmulhisi3_tail>

00005ef4 <__umulhisi3>:
    5ef4:	a2 9f       	mul	r26, r18
    5ef6:	b0 01       	movw	r22, r0
    5ef8:	b3 9f       	mul	r27, r19
    5efa:	c0 01       	movw	r24, r0
    5efc:	a3 9f       	mul	r26, r19
    5efe:	70 0d       	add	r23, r0
    5f00:	81 1d       	adc	r24, r1
    5f02:	11 24       	eor	r1, r1
    5f04:	91 1d       	adc	r25, r1
    5f06:	b2 9f       	mul	r27, r18
    5f08:	70 0d       	add	r23, r0
    5f0a:	81 1d       	adc	r24, r1
    5f0c:	11 24       	eor	r1, r1
    5f0e:	91 1d       	adc	r25, r1
    5f10:	08 95       	ret

00005f12 <__usmulhisi3>:
    5f12:	0e 94 7a 2f 	call	0x5ef4	; 0x5ef4 <__umulhisi3>

00005f16 <__usmulhisi3_tail>:
    5f16:	b7 ff       	sbrs	r27, 7
    5f18:	08 95       	ret
    5f1a:	82 1b       	sub	r24, r18
    5f1c:	93 0b       	sbc	r25, r19
    5f1e:	08 95       	ret

00005f20 <__prologue_saves__>:
    5f20:	2f 92       	push	r2
    5f22:	3f 92       	push	r3
    5f24:	4f 92       	push	r4
    5f26:	5f 92       	push	r5
    5f28:	6f 92       	push	r6
    5f2a:	7f 92       	push	r7
    5f2c:	8f 92       	push	r8
    5f2e:	9f 92       	push	r9
    5f30:	af 92       	push	r10
    5f32:	bf 92       	push	r11
    5f34:	cf 92       	push	r12
    5f36:	df 92       	push	r13
    5f38:	ef 92       	push	r14
    5f3a:	ff 92       	push	r15
    5f3c:	0f 93       	push	r16
    5f3e:	1f 93       	push	r17
    5f40:	cf 93       	push	r28
    5f42:	df 93       	push	r29
    5f44:	cd b7       	in	r28, 0x3d	; 61
    5f46:	de b7       	in	r29, 0x3e	; 62
    5f48:	ca 1b       	sub	r28, r26
    5f4a:	db 0b       	sbc	r29, r27
    5f4c:	0f b6       	in	r0, 0x3f	; 63
    5f4e:	f8 94       	cli
    5f50:	de bf       	out	0x3e, r29	; 62
    5f52:	0f be       	out	0x3f, r0	; 63
    5f54:	cd bf       	out	0x3d, r28	; 61
    5f56:	09 94       	ijmp

00005f58 <__epilogue_restores__>:
    5f58:	2a 88       	ldd	r2, Y+18	; 0x12
    5f5a:	39 88       	ldd	r3, Y+17	; 0x11
    5f5c:	48 88       	ldd	r4, Y+16	; 0x10
    5f5e:	5f 84       	ldd	r5, Y+15	; 0x0f
    5f60:	6e 84       	ldd	r6, Y+14	; 0x0e
    5f62:	7d 84       	ldd	r7, Y+13	; 0x0d
    5f64:	8c 84       	ldd	r8, Y+12	; 0x0c
    5f66:	9b 84       	ldd	r9, Y+11	; 0x0b
    5f68:	aa 84       	ldd	r10, Y+10	; 0x0a
    5f6a:	b9 84       	ldd	r11, Y+9	; 0x09
    5f6c:	c8 84       	ldd	r12, Y+8	; 0x08
    5f6e:	df 80       	ldd	r13, Y+7	; 0x07
    5f70:	ee 80       	ldd	r14, Y+6	; 0x06
    5f72:	fd 80       	ldd	r15, Y+5	; 0x05
    5f74:	0c 81       	ldd	r16, Y+4	; 0x04
    5f76:	1b 81       	ldd	r17, Y+3	; 0x03
    5f78:	aa 81       	ldd	r26, Y+2	; 0x02
    5f7a:	b9 81       	ldd	r27, Y+1	; 0x01
    5f7c:	ce 0f       	add	r28, r30
    5f7e:	d1 1d       	adc	r29, r1
    5f80:	0f b6       	in	r0, 0x3f	; 63
    5f82:	f8 94       	cli
    5f84:	de bf       	out	0x3e, r29	; 62
    5f86:	0f be       	out	0x3f, r0	; 63
    5f88:	cd bf       	out	0x3d, r28	; 61
    5f8a:	ed 01       	movw	r28, r26
    5f8c:	08 95       	ret

00005f8e <__fixsfsi>:
    5f8e:	0e 94 ce 2f 	call	0x5f9c	; 0x5f9c <__fixunssfsi>
    5f92:	68 94       	set
    5f94:	b1 11       	cpse	r27, r1
    5f96:	0c 94 5d 30 	jmp	0x60ba	; 0x60ba <__fp_szero>
    5f9a:	08 95       	ret

00005f9c <__fixunssfsi>:
    5f9c:	0e 94 42 30 	call	0x6084	; 0x6084 <__fp_splitA>
    5fa0:	88 f0       	brcs	.+34     	; 0x5fc4 <__fixunssfsi+0x28>
    5fa2:	9f 57       	subi	r25, 0x7F	; 127
    5fa4:	98 f0       	brcs	.+38     	; 0x5fcc <__fixunssfsi+0x30>
    5fa6:	b9 2f       	mov	r27, r25
    5fa8:	99 27       	eor	r25, r25
    5faa:	b7 51       	subi	r27, 0x17	; 23
    5fac:	b0 f0       	brcs	.+44     	; 0x5fda <__fixunssfsi+0x3e>
    5fae:	e1 f0       	breq	.+56     	; 0x5fe8 <__fixunssfsi+0x4c>
    5fb0:	66 0f       	add	r22, r22
    5fb2:	77 1f       	adc	r23, r23
    5fb4:	88 1f       	adc	r24, r24
    5fb6:	99 1f       	adc	r25, r25
    5fb8:	1a f0       	brmi	.+6      	; 0x5fc0 <__fixunssfsi+0x24>
    5fba:	ba 95       	dec	r27
    5fbc:	c9 f7       	brne	.-14     	; 0x5fb0 <__fixunssfsi+0x14>
    5fbe:	14 c0       	rjmp	.+40     	; 0x5fe8 <__fixunssfsi+0x4c>
    5fc0:	b1 30       	cpi	r27, 0x01	; 1
    5fc2:	91 f0       	breq	.+36     	; 0x5fe8 <__fixunssfsi+0x4c>
    5fc4:	0e 94 5c 30 	call	0x60b8	; 0x60b8 <__fp_zero>
    5fc8:	b1 e0       	ldi	r27, 0x01	; 1
    5fca:	08 95       	ret
    5fcc:	0c 94 5c 30 	jmp	0x60b8	; 0x60b8 <__fp_zero>
    5fd0:	67 2f       	mov	r22, r23
    5fd2:	78 2f       	mov	r23, r24
    5fd4:	88 27       	eor	r24, r24
    5fd6:	b8 5f       	subi	r27, 0xF8	; 248
    5fd8:	39 f0       	breq	.+14     	; 0x5fe8 <__fixunssfsi+0x4c>
    5fda:	b9 3f       	cpi	r27, 0xF9	; 249
    5fdc:	cc f3       	brlt	.-14     	; 0x5fd0 <__fixunssfsi+0x34>
    5fde:	86 95       	lsr	r24
    5fe0:	77 95       	ror	r23
    5fe2:	67 95       	ror	r22
    5fe4:	b3 95       	inc	r27
    5fe6:	d9 f7       	brne	.-10     	; 0x5fde <__fixunssfsi+0x42>
    5fe8:	3e f4       	brtc	.+14     	; 0x5ff8 <__fixunssfsi+0x5c>
    5fea:	90 95       	com	r25
    5fec:	80 95       	com	r24
    5fee:	70 95       	com	r23
    5ff0:	61 95       	neg	r22
    5ff2:	7f 4f       	sbci	r23, 0xFF	; 255
    5ff4:	8f 4f       	sbci	r24, 0xFF	; 255
    5ff6:	9f 4f       	sbci	r25, 0xFF	; 255
    5ff8:	08 95       	ret

00005ffa <__floatunsisf>:
    5ffa:	e8 94       	clt
    5ffc:	09 c0       	rjmp	.+18     	; 0x6010 <__floatsisf+0x12>

00005ffe <__floatsisf>:
    5ffe:	97 fb       	bst	r25, 7
    6000:	3e f4       	brtc	.+14     	; 0x6010 <__floatsisf+0x12>
    6002:	90 95       	com	r25
    6004:	80 95       	com	r24
    6006:	70 95       	com	r23
    6008:	61 95       	neg	r22
    600a:	7f 4f       	sbci	r23, 0xFF	; 255
    600c:	8f 4f       	sbci	r24, 0xFF	; 255
    600e:	9f 4f       	sbci	r25, 0xFF	; 255
    6010:	99 23       	and	r25, r25
    6012:	a9 f0       	breq	.+42     	; 0x603e <__floatsisf+0x40>
    6014:	f9 2f       	mov	r31, r25
    6016:	96 e9       	ldi	r25, 0x96	; 150
    6018:	bb 27       	eor	r27, r27
    601a:	93 95       	inc	r25
    601c:	f6 95       	lsr	r31
    601e:	87 95       	ror	r24
    6020:	77 95       	ror	r23
    6022:	67 95       	ror	r22
    6024:	b7 95       	ror	r27
    6026:	f1 11       	cpse	r31, r1
    6028:	f8 cf       	rjmp	.-16     	; 0x601a <__floatsisf+0x1c>
    602a:	fa f4       	brpl	.+62     	; 0x606a <__floatsisf+0x6c>
    602c:	bb 0f       	add	r27, r27
    602e:	11 f4       	brne	.+4      	; 0x6034 <__floatsisf+0x36>
    6030:	60 ff       	sbrs	r22, 0
    6032:	1b c0       	rjmp	.+54     	; 0x606a <__floatsisf+0x6c>
    6034:	6f 5f       	subi	r22, 0xFF	; 255
    6036:	7f 4f       	sbci	r23, 0xFF	; 255
    6038:	8f 4f       	sbci	r24, 0xFF	; 255
    603a:	9f 4f       	sbci	r25, 0xFF	; 255
    603c:	16 c0       	rjmp	.+44     	; 0x606a <__floatsisf+0x6c>
    603e:	88 23       	and	r24, r24
    6040:	11 f0       	breq	.+4      	; 0x6046 <__floatsisf+0x48>
    6042:	96 e9       	ldi	r25, 0x96	; 150
    6044:	11 c0       	rjmp	.+34     	; 0x6068 <__floatsisf+0x6a>
    6046:	77 23       	and	r23, r23
    6048:	21 f0       	breq	.+8      	; 0x6052 <__floatsisf+0x54>
    604a:	9e e8       	ldi	r25, 0x8E	; 142
    604c:	87 2f       	mov	r24, r23
    604e:	76 2f       	mov	r23, r22
    6050:	05 c0       	rjmp	.+10     	; 0x605c <__floatsisf+0x5e>
    6052:	66 23       	and	r22, r22
    6054:	71 f0       	breq	.+28     	; 0x6072 <__floatsisf+0x74>
    6056:	96 e8       	ldi	r25, 0x86	; 134
    6058:	86 2f       	mov	r24, r22
    605a:	70 e0       	ldi	r23, 0x00	; 0
    605c:	60 e0       	ldi	r22, 0x00	; 0
    605e:	2a f0       	brmi	.+10     	; 0x606a <__floatsisf+0x6c>
    6060:	9a 95       	dec	r25
    6062:	66 0f       	add	r22, r22
    6064:	77 1f       	adc	r23, r23
    6066:	88 1f       	adc	r24, r24
    6068:	da f7       	brpl	.-10     	; 0x6060 <__floatsisf+0x62>
    606a:	88 0f       	add	r24, r24
    606c:	96 95       	lsr	r25
    606e:	87 95       	ror	r24
    6070:	97 f9       	bld	r25, 7
    6072:	08 95       	ret

00006074 <__fp_split3>:
    6074:	57 fd       	sbrc	r21, 7
    6076:	90 58       	subi	r25, 0x80	; 128
    6078:	44 0f       	add	r20, r20
    607a:	55 1f       	adc	r21, r21
    607c:	59 f0       	breq	.+22     	; 0x6094 <__fp_splitA+0x10>
    607e:	5f 3f       	cpi	r21, 0xFF	; 255
    6080:	71 f0       	breq	.+28     	; 0x609e <__fp_splitA+0x1a>
    6082:	47 95       	ror	r20

00006084 <__fp_splitA>:
    6084:	88 0f       	add	r24, r24
    6086:	97 fb       	bst	r25, 7
    6088:	99 1f       	adc	r25, r25
    608a:	61 f0       	breq	.+24     	; 0x60a4 <__fp_splitA+0x20>
    608c:	9f 3f       	cpi	r25, 0xFF	; 255
    608e:	79 f0       	breq	.+30     	; 0x60ae <__fp_splitA+0x2a>
    6090:	87 95       	ror	r24
    6092:	08 95       	ret
    6094:	12 16       	cp	r1, r18
    6096:	13 06       	cpc	r1, r19
    6098:	14 06       	cpc	r1, r20
    609a:	55 1f       	adc	r21, r21
    609c:	f2 cf       	rjmp	.-28     	; 0x6082 <__fp_split3+0xe>
    609e:	46 95       	lsr	r20
    60a0:	f1 df       	rcall	.-30     	; 0x6084 <__fp_splitA>
    60a2:	08 c0       	rjmp	.+16     	; 0x60b4 <__fp_splitA+0x30>
    60a4:	16 16       	cp	r1, r22
    60a6:	17 06       	cpc	r1, r23
    60a8:	18 06       	cpc	r1, r24
    60aa:	99 1f       	adc	r25, r25
    60ac:	f1 cf       	rjmp	.-30     	; 0x6090 <__fp_splitA+0xc>
    60ae:	86 95       	lsr	r24
    60b0:	71 05       	cpc	r23, r1
    60b2:	61 05       	cpc	r22, r1
    60b4:	08 94       	sec
    60b6:	08 95       	ret

000060b8 <__fp_zero>:
    60b8:	e8 94       	clt

000060ba <__fp_szero>:
    60ba:	bb 27       	eor	r27, r27
    60bc:	66 27       	eor	r22, r22
    60be:	77 27       	eor	r23, r23
    60c0:	cb 01       	movw	r24, r22
    60c2:	97 f9       	bld	r25, 7
    60c4:	08 95       	ret

000060c6 <__mulsf3>:
    60c6:	0e 94 76 30 	call	0x60ec	; 0x60ec <__mulsf3x>
    60ca:	0c 94 e7 30 	jmp	0x61ce	; 0x61ce <__fp_round>
    60ce:	0e 94 d9 30 	call	0x61b2	; 0x61b2 <__fp_pscA>
    60d2:	38 f0       	brcs	.+14     	; 0x60e2 <__mulsf3+0x1c>
    60d4:	0e 94 e0 30 	call	0x61c0	; 0x61c0 <__fp_pscB>
    60d8:	20 f0       	brcs	.+8      	; 0x60e2 <__mulsf3+0x1c>
    60da:	95 23       	and	r25, r21
    60dc:	11 f0       	breq	.+4      	; 0x60e2 <__mulsf3+0x1c>
    60de:	0c 94 d0 30 	jmp	0x61a0	; 0x61a0 <__fp_inf>
    60e2:	0c 94 d6 30 	jmp	0x61ac	; 0x61ac <__fp_nan>
    60e6:	11 24       	eor	r1, r1
    60e8:	0c 94 5d 30 	jmp	0x60ba	; 0x60ba <__fp_szero>

000060ec <__mulsf3x>:
    60ec:	0e 94 3a 30 	call	0x6074	; 0x6074 <__fp_split3>
    60f0:	70 f3       	brcs	.-36     	; 0x60ce <__mulsf3+0x8>

000060f2 <__mulsf3_pse>:
    60f2:	95 9f       	mul	r25, r21
    60f4:	c1 f3       	breq	.-16     	; 0x60e6 <__mulsf3+0x20>
    60f6:	95 0f       	add	r25, r21
    60f8:	50 e0       	ldi	r21, 0x00	; 0
    60fa:	55 1f       	adc	r21, r21
    60fc:	62 9f       	mul	r22, r18
    60fe:	f0 01       	movw	r30, r0
    6100:	72 9f       	mul	r23, r18
    6102:	bb 27       	eor	r27, r27
    6104:	f0 0d       	add	r31, r0
    6106:	b1 1d       	adc	r27, r1
    6108:	63 9f       	mul	r22, r19
    610a:	aa 27       	eor	r26, r26
    610c:	f0 0d       	add	r31, r0
    610e:	b1 1d       	adc	r27, r1
    6110:	aa 1f       	adc	r26, r26
    6112:	64 9f       	mul	r22, r20
    6114:	66 27       	eor	r22, r22
    6116:	b0 0d       	add	r27, r0
    6118:	a1 1d       	adc	r26, r1
    611a:	66 1f       	adc	r22, r22
    611c:	82 9f       	mul	r24, r18
    611e:	22 27       	eor	r18, r18
    6120:	b0 0d       	add	r27, r0
    6122:	a1 1d       	adc	r26, r1
    6124:	62 1f       	adc	r22, r18
    6126:	73 9f       	mul	r23, r19
    6128:	b0 0d       	add	r27, r0
    612a:	a1 1d       	adc	r26, r1
    612c:	62 1f       	adc	r22, r18
    612e:	83 9f       	mul	r24, r19
    6130:	a0 0d       	add	r26, r0
    6132:	61 1d       	adc	r22, r1
    6134:	22 1f       	adc	r18, r18
    6136:	74 9f       	mul	r23, r20
    6138:	33 27       	eor	r19, r19
    613a:	a0 0d       	add	r26, r0
    613c:	61 1d       	adc	r22, r1
    613e:	23 1f       	adc	r18, r19
    6140:	84 9f       	mul	r24, r20
    6142:	60 0d       	add	r22, r0
    6144:	21 1d       	adc	r18, r1
    6146:	82 2f       	mov	r24, r18
    6148:	76 2f       	mov	r23, r22
    614a:	6a 2f       	mov	r22, r26
    614c:	11 24       	eor	r1, r1
    614e:	9f 57       	subi	r25, 0x7F	; 127
    6150:	50 40       	sbci	r21, 0x00	; 0
    6152:	9a f0       	brmi	.+38     	; 0x617a <__mulsf3_pse+0x88>
    6154:	f1 f0       	breq	.+60     	; 0x6192 <__mulsf3_pse+0xa0>
    6156:	88 23       	and	r24, r24
    6158:	4a f0       	brmi	.+18     	; 0x616c <__mulsf3_pse+0x7a>
    615a:	ee 0f       	add	r30, r30
    615c:	ff 1f       	adc	r31, r31
    615e:	bb 1f       	adc	r27, r27
    6160:	66 1f       	adc	r22, r22
    6162:	77 1f       	adc	r23, r23
    6164:	88 1f       	adc	r24, r24
    6166:	91 50       	subi	r25, 0x01	; 1
    6168:	50 40       	sbci	r21, 0x00	; 0
    616a:	a9 f7       	brne	.-22     	; 0x6156 <__mulsf3_pse+0x64>
    616c:	9e 3f       	cpi	r25, 0xFE	; 254
    616e:	51 05       	cpc	r21, r1
    6170:	80 f0       	brcs	.+32     	; 0x6192 <__mulsf3_pse+0xa0>
    6172:	0c 94 d0 30 	jmp	0x61a0	; 0x61a0 <__fp_inf>
    6176:	0c 94 5d 30 	jmp	0x60ba	; 0x60ba <__fp_szero>
    617a:	5f 3f       	cpi	r21, 0xFF	; 255
    617c:	e4 f3       	brlt	.-8      	; 0x6176 <__mulsf3_pse+0x84>
    617e:	98 3e       	cpi	r25, 0xE8	; 232
    6180:	d4 f3       	brlt	.-12     	; 0x6176 <__mulsf3_pse+0x84>
    6182:	86 95       	lsr	r24
    6184:	77 95       	ror	r23
    6186:	67 95       	ror	r22
    6188:	b7 95       	ror	r27
    618a:	f7 95       	ror	r31
    618c:	e7 95       	ror	r30
    618e:	9f 5f       	subi	r25, 0xFF	; 255
    6190:	c1 f7       	brne	.-16     	; 0x6182 <__mulsf3_pse+0x90>
    6192:	fe 2b       	or	r31, r30
    6194:	88 0f       	add	r24, r24
    6196:	91 1d       	adc	r25, r1
    6198:	96 95       	lsr	r25
    619a:	87 95       	ror	r24
    619c:	97 f9       	bld	r25, 7
    619e:	08 95       	ret

000061a0 <__fp_inf>:
    61a0:	97 f9       	bld	r25, 7
    61a2:	9f 67       	ori	r25, 0x7F	; 127
    61a4:	80 e8       	ldi	r24, 0x80	; 128
    61a6:	70 e0       	ldi	r23, 0x00	; 0
    61a8:	60 e0       	ldi	r22, 0x00	; 0
    61aa:	08 95       	ret

000061ac <__fp_nan>:
    61ac:	9f ef       	ldi	r25, 0xFF	; 255
    61ae:	80 ec       	ldi	r24, 0xC0	; 192
    61b0:	08 95       	ret

000061b2 <__fp_pscA>:
    61b2:	00 24       	eor	r0, r0
    61b4:	0a 94       	dec	r0
    61b6:	16 16       	cp	r1, r22
    61b8:	17 06       	cpc	r1, r23
    61ba:	18 06       	cpc	r1, r24
    61bc:	09 06       	cpc	r0, r25
    61be:	08 95       	ret

000061c0 <__fp_pscB>:
    61c0:	00 24       	eor	r0, r0
    61c2:	0a 94       	dec	r0
    61c4:	12 16       	cp	r1, r18
    61c6:	13 06       	cpc	r1, r19
    61c8:	14 06       	cpc	r1, r20
    61ca:	05 06       	cpc	r0, r21
    61cc:	08 95       	ret

000061ce <__fp_round>:
    61ce:	09 2e       	mov	r0, r25
    61d0:	03 94       	inc	r0
    61d2:	00 0c       	add	r0, r0
    61d4:	11 f4       	brne	.+4      	; 0x61da <__fp_round+0xc>
    61d6:	88 23       	and	r24, r24
    61d8:	52 f0       	brmi	.+20     	; 0x61ee <__fp_round+0x20>
    61da:	bb 0f       	add	r27, r27
    61dc:	40 f4       	brcc	.+16     	; 0x61ee <__fp_round+0x20>
    61de:	bf 2b       	or	r27, r31
    61e0:	11 f4       	brne	.+4      	; 0x61e6 <__fp_round+0x18>
    61e2:	60 ff       	sbrs	r22, 0
    61e4:	04 c0       	rjmp	.+8      	; 0x61ee <__fp_round+0x20>
    61e6:	6f 5f       	subi	r22, 0xFF	; 255
    61e8:	7f 4f       	sbci	r23, 0xFF	; 255
    61ea:	8f 4f       	sbci	r24, 0xFF	; 255
    61ec:	9f 4f       	sbci	r25, 0xFF	; 255
    61ee:	08 95       	ret

000061f0 <malloc>:
    61f0:	0f 93       	push	r16
    61f2:	1f 93       	push	r17
    61f4:	cf 93       	push	r28
    61f6:	df 93       	push	r29
    61f8:	9c 01       	movw	r18, r24
    61fa:	02 97       	sbiw	r24, 0x02	; 2
    61fc:	10 f4       	brcc	.+4      	; 0x6202 <malloc+0x12>
    61fe:	22 e0       	ldi	r18, 0x02	; 2
    6200:	30 e0       	ldi	r19, 0x00	; 0
    6202:	e0 91 ad 06 	lds	r30, 0x06AD	; 0x8006ad <__flp>
    6206:	f0 91 ae 06 	lds	r31, 0x06AE	; 0x8006ae <__flp+0x1>
    620a:	90 e0       	ldi	r25, 0x00	; 0
    620c:	80 e0       	ldi	r24, 0x00	; 0
    620e:	b0 e0       	ldi	r27, 0x00	; 0
    6210:	a0 e0       	ldi	r26, 0x00	; 0
    6212:	30 97       	sbiw	r30, 0x00	; 0
    6214:	91 f4       	brne	.+36     	; 0x623a <malloc+0x4a>
    6216:	00 97       	sbiw	r24, 0x00	; 0
    6218:	09 f4       	brne	.+2      	; 0x621c <malloc+0x2c>
    621a:	45 c0       	rjmp	.+138    	; 0x62a6 <malloc+0xb6>
    621c:	82 1b       	sub	r24, r18
    621e:	93 0b       	sbc	r25, r19
    6220:	84 30       	cpi	r24, 0x04	; 4
    6222:	91 05       	cpc	r25, r1
    6224:	b8 f5       	brcc	.+110    	; 0x6294 <malloc+0xa4>
    6226:	8a 81       	ldd	r24, Y+2	; 0x02
    6228:	9b 81       	ldd	r25, Y+3	; 0x03
    622a:	61 15       	cp	r22, r1
    622c:	71 05       	cpc	r23, r1
    622e:	69 f1       	breq	.+90     	; 0x628a <malloc+0x9a>
    6230:	fb 01       	movw	r30, r22
    6232:	93 83       	std	Z+3, r25	; 0x03
    6234:	82 83       	std	Z+2, r24	; 0x02
    6236:	fe 01       	movw	r30, r28
    6238:	11 c0       	rjmp	.+34     	; 0x625c <malloc+0x6c>
    623a:	40 81       	ld	r20, Z
    623c:	51 81       	ldd	r21, Z+1	; 0x01
    623e:	02 81       	ldd	r16, Z+2	; 0x02
    6240:	13 81       	ldd	r17, Z+3	; 0x03
    6242:	42 17       	cp	r20, r18
    6244:	53 07       	cpc	r21, r19
    6246:	f0 f0       	brcs	.+60     	; 0x6284 <malloc+0x94>
    6248:	42 17       	cp	r20, r18
    624a:	53 07       	cpc	r21, r19
    624c:	99 f4       	brne	.+38     	; 0x6274 <malloc+0x84>
    624e:	10 97       	sbiw	r26, 0x00	; 0
    6250:	61 f0       	breq	.+24     	; 0x626a <malloc+0x7a>
    6252:	12 96       	adiw	r26, 0x02	; 2
    6254:	0c 93       	st	X, r16
    6256:	12 97       	sbiw	r26, 0x02	; 2
    6258:	13 96       	adiw	r26, 0x03	; 3
    625a:	1c 93       	st	X, r17
    625c:	32 96       	adiw	r30, 0x02	; 2
    625e:	cf 01       	movw	r24, r30
    6260:	df 91       	pop	r29
    6262:	cf 91       	pop	r28
    6264:	1f 91       	pop	r17
    6266:	0f 91       	pop	r16
    6268:	08 95       	ret
    626a:	00 93 ad 06 	sts	0x06AD, r16	; 0x8006ad <__flp>
    626e:	10 93 ae 06 	sts	0x06AE, r17	; 0x8006ae <__flp+0x1>
    6272:	f4 cf       	rjmp	.-24     	; 0x625c <malloc+0x6c>
    6274:	00 97       	sbiw	r24, 0x00	; 0
    6276:	19 f0       	breq	.+6      	; 0x627e <malloc+0x8e>
    6278:	48 17       	cp	r20, r24
    627a:	59 07       	cpc	r21, r25
    627c:	18 f4       	brcc	.+6      	; 0x6284 <malloc+0x94>
    627e:	ca 01       	movw	r24, r20
    6280:	bd 01       	movw	r22, r26
    6282:	ef 01       	movw	r28, r30
    6284:	df 01       	movw	r26, r30
    6286:	f8 01       	movw	r30, r16
    6288:	c4 cf       	rjmp	.-120    	; 0x6212 <malloc+0x22>
    628a:	90 93 ae 06 	sts	0x06AE, r25	; 0x8006ae <__flp+0x1>
    628e:	80 93 ad 06 	sts	0x06AD, r24	; 0x8006ad <__flp>
    6292:	d1 cf       	rjmp	.-94     	; 0x6236 <malloc+0x46>
    6294:	fe 01       	movw	r30, r28
    6296:	e8 0f       	add	r30, r24
    6298:	f9 1f       	adc	r31, r25
    629a:	21 93       	st	Z+, r18
    629c:	31 93       	st	Z+, r19
    629e:	02 97       	sbiw	r24, 0x02	; 2
    62a0:	99 83       	std	Y+1, r25	; 0x01
    62a2:	88 83       	st	Y, r24
    62a4:	dc cf       	rjmp	.-72     	; 0x625e <malloc+0x6e>
    62a6:	80 91 af 06 	lds	r24, 0x06AF	; 0x8006af <__brkval>
    62aa:	90 91 b0 06 	lds	r25, 0x06B0	; 0x8006b0 <__brkval+0x1>
    62ae:	89 2b       	or	r24, r25
    62b0:	41 f4       	brne	.+16     	; 0x62c2 <malloc+0xd2>
    62b2:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__malloc_heap_start>
    62b6:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__malloc_heap_start+0x1>
    62ba:	90 93 b0 06 	sts	0x06B0, r25	; 0x8006b0 <__brkval+0x1>
    62be:	80 93 af 06 	sts	0x06AF, r24	; 0x8006af <__brkval>
    62c2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__malloc_heap_end>
    62c6:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__malloc_heap_end+0x1>
    62ca:	00 97       	sbiw	r24, 0x00	; 0
    62cc:	41 f4       	brne	.+16     	; 0x62de <malloc+0xee>
    62ce:	8d b7       	in	r24, 0x3d	; 61
    62d0:	9e b7       	in	r25, 0x3e	; 62
    62d2:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <__malloc_margin>
    62d6:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <__malloc_margin+0x1>
    62da:	84 1b       	sub	r24, r20
    62dc:	95 0b       	sbc	r25, r21
    62de:	40 91 af 06 	lds	r20, 0x06AF	; 0x8006af <__brkval>
    62e2:	50 91 b0 06 	lds	r21, 0x06B0	; 0x8006b0 <__brkval+0x1>
    62e6:	48 17       	cp	r20, r24
    62e8:	59 07       	cpc	r21, r25
    62ea:	08 f0       	brcs	.+2      	; 0x62ee <malloc+0xfe>
    62ec:	b8 cf       	rjmp	.-144    	; 0x625e <malloc+0x6e>
    62ee:	84 1b       	sub	r24, r20
    62f0:	95 0b       	sbc	r25, r21
    62f2:	82 17       	cp	r24, r18
    62f4:	93 07       	cpc	r25, r19
    62f6:	08 f4       	brcc	.+2      	; 0x62fa <malloc+0x10a>
    62f8:	b2 cf       	rjmp	.-156    	; 0x625e <malloc+0x6e>
    62fa:	b9 01       	movw	r22, r18
    62fc:	6e 5f       	subi	r22, 0xFE	; 254
    62fe:	7f 4f       	sbci	r23, 0xFF	; 255
    6300:	86 17       	cp	r24, r22
    6302:	97 07       	cpc	r25, r23
    6304:	08 f4       	brcc	.+2      	; 0x6308 <malloc+0x118>
    6306:	ab cf       	rjmp	.-170    	; 0x625e <malloc+0x6e>
    6308:	64 0f       	add	r22, r20
    630a:	75 1f       	adc	r23, r21
    630c:	70 93 b0 06 	sts	0x06B0, r23	; 0x8006b0 <__brkval+0x1>
    6310:	60 93 af 06 	sts	0x06AF, r22	; 0x8006af <__brkval>
    6314:	fa 01       	movw	r30, r20
    6316:	21 93       	st	Z+, r18
    6318:	31 93       	st	Z+, r19
    631a:	a1 cf       	rjmp	.-190    	; 0x625e <malloc+0x6e>

0000631c <free>:
    631c:	cf 93       	push	r28
    631e:	df 93       	push	r29
    6320:	9c 01       	movw	r18, r24
    6322:	00 97       	sbiw	r24, 0x00	; 0
    6324:	e9 f0       	breq	.+58     	; 0x6360 <free+0x44>
    6326:	fc 01       	movw	r30, r24
    6328:	32 97       	sbiw	r30, 0x02	; 2
    632a:	13 82       	std	Z+3, r1	; 0x03
    632c:	12 82       	std	Z+2, r1	; 0x02
    632e:	c0 91 ad 06 	lds	r28, 0x06AD	; 0x8006ad <__flp>
    6332:	d0 91 ae 06 	lds	r29, 0x06AE	; 0x8006ae <__flp+0x1>
    6336:	de 01       	movw	r26, r28
    6338:	90 e0       	ldi	r25, 0x00	; 0
    633a:	80 e0       	ldi	r24, 0x00	; 0
    633c:	20 97       	sbiw	r28, 0x00	; 0
    633e:	a1 f4       	brne	.+40     	; 0x6368 <free+0x4c>
    6340:	80 81       	ld	r24, Z
    6342:	91 81       	ldd	r25, Z+1	; 0x01
    6344:	28 0f       	add	r18, r24
    6346:	39 1f       	adc	r19, r25
    6348:	80 91 af 06 	lds	r24, 0x06AF	; 0x8006af <__brkval>
    634c:	90 91 b0 06 	lds	r25, 0x06B0	; 0x8006b0 <__brkval+0x1>
    6350:	82 17       	cp	r24, r18
    6352:	93 07       	cpc	r25, r19
    6354:	09 f0       	breq	.+2      	; 0x6358 <free+0x3c>
    6356:	67 c0       	rjmp	.+206    	; 0x6426 <free+0x10a>
    6358:	f0 93 b0 06 	sts	0x06B0, r31	; 0x8006b0 <__brkval+0x1>
    635c:	e0 93 af 06 	sts	0x06AF, r30	; 0x8006af <__brkval>
    6360:	df 91       	pop	r29
    6362:	cf 91       	pop	r28
    6364:	08 95       	ret
    6366:	da 01       	movw	r26, r20
    6368:	ae 17       	cp	r26, r30
    636a:	bf 07       	cpc	r27, r31
    636c:	08 f0       	brcs	.+2      	; 0x6370 <free+0x54>
    636e:	41 c0       	rjmp	.+130    	; 0x63f2 <free+0xd6>
    6370:	12 96       	adiw	r26, 0x02	; 2
    6372:	4d 91       	ld	r20, X+
    6374:	5c 91       	ld	r21, X
    6376:	13 97       	sbiw	r26, 0x03	; 3
    6378:	cd 01       	movw	r24, r26
    637a:	41 15       	cp	r20, r1
    637c:	51 05       	cpc	r21, r1
    637e:	99 f7       	brne	.-26     	; 0x6366 <free+0x4a>
    6380:	dc 01       	movw	r26, r24
    6382:	13 96       	adiw	r26, 0x03	; 3
    6384:	fc 93       	st	X, r31
    6386:	ee 93       	st	-X, r30
    6388:	12 97       	sbiw	r26, 0x02	; 2
    638a:	4d 91       	ld	r20, X+
    638c:	5d 91       	ld	r21, X+
    638e:	a4 0f       	add	r26, r20
    6390:	b5 1f       	adc	r27, r21
    6392:	ea 17       	cp	r30, r26
    6394:	fb 07       	cpc	r31, r27
    6396:	81 f4       	brne	.+32     	; 0x63b8 <free+0x9c>
    6398:	20 81       	ld	r18, Z
    639a:	31 81       	ldd	r19, Z+1	; 0x01
    639c:	2e 5f       	subi	r18, 0xFE	; 254
    639e:	3f 4f       	sbci	r19, 0xFF	; 255
    63a0:	24 0f       	add	r18, r20
    63a2:	35 1f       	adc	r19, r21
    63a4:	dc 01       	movw	r26, r24
    63a6:	11 96       	adiw	r26, 0x01	; 1
    63a8:	3c 93       	st	X, r19
    63aa:	2e 93       	st	-X, r18
    63ac:	22 81       	ldd	r18, Z+2	; 0x02
    63ae:	33 81       	ldd	r19, Z+3	; 0x03
    63b0:	13 96       	adiw	r26, 0x03	; 3
    63b2:	3c 93       	st	X, r19
    63b4:	2e 93       	st	-X, r18
    63b6:	12 97       	sbiw	r26, 0x02	; 2
    63b8:	b0 e0       	ldi	r27, 0x00	; 0
    63ba:	a0 e0       	ldi	r26, 0x00	; 0
    63bc:	8a 81       	ldd	r24, Y+2	; 0x02
    63be:	9b 81       	ldd	r25, Y+3	; 0x03
    63c0:	00 97       	sbiw	r24, 0x00	; 0
    63c2:	b1 f5       	brne	.+108    	; 0x6430 <free+0x114>
    63c4:	fe 01       	movw	r30, r28
    63c6:	81 91       	ld	r24, Z+
    63c8:	91 91       	ld	r25, Z+
    63ca:	e8 0f       	add	r30, r24
    63cc:	f9 1f       	adc	r31, r25
    63ce:	80 91 af 06 	lds	r24, 0x06AF	; 0x8006af <__brkval>
    63d2:	90 91 b0 06 	lds	r25, 0x06B0	; 0x8006b0 <__brkval+0x1>
    63d6:	8e 17       	cp	r24, r30
    63d8:	9f 07       	cpc	r25, r31
    63da:	11 f6       	brne	.-124    	; 0x6360 <free+0x44>
    63dc:	10 97       	sbiw	r26, 0x00	; 0
    63de:	59 f5       	brne	.+86     	; 0x6436 <free+0x11a>
    63e0:	10 92 ae 06 	sts	0x06AE, r1	; 0x8006ae <__flp+0x1>
    63e4:	10 92 ad 06 	sts	0x06AD, r1	; 0x8006ad <__flp>
    63e8:	d0 93 b0 06 	sts	0x06B0, r29	; 0x8006b0 <__brkval+0x1>
    63ec:	c0 93 af 06 	sts	0x06AF, r28	; 0x8006af <__brkval>
    63f0:	b7 cf       	rjmp	.-146    	; 0x6360 <free+0x44>
    63f2:	b3 83       	std	Z+3, r27	; 0x03
    63f4:	a2 83       	std	Z+2, r26	; 0x02
    63f6:	40 81       	ld	r20, Z
    63f8:	51 81       	ldd	r21, Z+1	; 0x01
    63fa:	24 0f       	add	r18, r20
    63fc:	35 1f       	adc	r19, r21
    63fe:	a2 17       	cp	r26, r18
    6400:	b3 07       	cpc	r27, r19
    6402:	71 f4       	brne	.+28     	; 0x6420 <free+0x104>
    6404:	4e 5f       	subi	r20, 0xFE	; 254
    6406:	5f 4f       	sbci	r21, 0xFF	; 255
    6408:	2d 91       	ld	r18, X+
    640a:	3c 91       	ld	r19, X
    640c:	11 97       	sbiw	r26, 0x01	; 1
    640e:	24 0f       	add	r18, r20
    6410:	35 1f       	adc	r19, r21
    6412:	31 83       	std	Z+1, r19	; 0x01
    6414:	20 83       	st	Z, r18
    6416:	12 96       	adiw	r26, 0x02	; 2
    6418:	2d 91       	ld	r18, X+
    641a:	3c 91       	ld	r19, X
    641c:	33 83       	std	Z+3, r19	; 0x03
    641e:	22 83       	std	Z+2, r18	; 0x02
    6420:	00 97       	sbiw	r24, 0x00	; 0
    6422:	09 f0       	breq	.+2      	; 0x6426 <free+0x10a>
    6424:	ad cf       	rjmp	.-166    	; 0x6380 <free+0x64>
    6426:	f0 93 ae 06 	sts	0x06AE, r31	; 0x8006ae <__flp+0x1>
    642a:	e0 93 ad 06 	sts	0x06AD, r30	; 0x8006ad <__flp>
    642e:	98 cf       	rjmp	.-208    	; 0x6360 <free+0x44>
    6430:	de 01       	movw	r26, r28
    6432:	ec 01       	movw	r28, r24
    6434:	c3 cf       	rjmp	.-122    	; 0x63bc <free+0xa0>
    6436:	13 96       	adiw	r26, 0x03	; 3
    6438:	1c 92       	st	X, r1
    643a:	1e 92       	st	-X, r1
    643c:	12 97       	sbiw	r26, 0x02	; 2
    643e:	d4 cf       	rjmp	.-88     	; 0x63e8 <free+0xcc>

00006440 <strtoul>:
    6440:	a6 e0       	ldi	r26, 0x06	; 6
    6442:	b0 e0       	ldi	r27, 0x00	; 0
    6444:	e6 e2       	ldi	r30, 0x26	; 38
    6446:	f2 e3       	ldi	r31, 0x32	; 50
    6448:	0c 94 92 2f 	jmp	0x5f24	; 0x5f24 <__prologue_saves__+0x4>
    644c:	8d 83       	std	Y+5, r24	; 0x05
    644e:	9e 83       	std	Y+6, r25	; 0x06
    6450:	6b 01       	movw	r12, r22
    6452:	7a 01       	movw	r14, r20
    6454:	61 15       	cp	r22, r1
    6456:	71 05       	cpc	r23, r1
    6458:	29 f0       	breq	.+10     	; 0x6464 <strtoul+0x24>
    645a:	ed 81       	ldd	r30, Y+5	; 0x05
    645c:	fe 81       	ldd	r31, Y+6	; 0x06
    645e:	db 01       	movw	r26, r22
    6460:	ed 93       	st	X+, r30
    6462:	fc 93       	st	X, r31
    6464:	e1 14       	cp	r14, r1
    6466:	f1 04       	cpc	r15, r1
    6468:	29 f0       	breq	.+10     	; 0x6474 <strtoul+0x34>
    646a:	c7 01       	movw	r24, r14
    646c:	02 97       	sbiw	r24, 0x02	; 2
    646e:	83 97       	sbiw	r24, 0x23	; 35
    6470:	08 f0       	brcs	.+2      	; 0x6474 <strtoul+0x34>
    6472:	a6 c0       	rjmp	.+332    	; 0x65c0 <strtoul+0x180>
    6474:	ad 80       	ldd	r10, Y+5	; 0x05
    6476:	be 80       	ldd	r11, Y+6	; 0x06
    6478:	95 01       	movw	r18, r10
    647a:	2f 5f       	subi	r18, 0xFF	; 255
    647c:	3f 4f       	sbci	r19, 0xFF	; 255
    647e:	3e 83       	std	Y+6, r19	; 0x06
    6480:	2d 83       	std	Y+5, r18	; 0x05
    6482:	d5 01       	movw	r26, r10
    6484:	1c 91       	ld	r17, X
    6486:	81 2f       	mov	r24, r17
    6488:	90 e0       	ldi	r25, 0x00	; 0
    648a:	0e 94 8b 33 	call	0x6716	; 0x6716 <isspace>
    648e:	89 2b       	or	r24, r25
    6490:	89 f7       	brne	.-30     	; 0x6474 <strtoul+0x34>
    6492:	1d 32       	cpi	r17, 0x2D	; 45
    6494:	b1 f4       	brne	.+44     	; 0x64c2 <strtoul+0x82>
    6496:	ed 81       	ldd	r30, Y+5	; 0x05
    6498:	fe 81       	ldd	r31, Y+6	; 0x06
    649a:	10 81       	ld	r17, Z
    649c:	95 01       	movw	r18, r10
    649e:	2e 5f       	subi	r18, 0xFE	; 254
    64a0:	3f 4f       	sbci	r19, 0xFF	; 255
    64a2:	3e 83       	std	Y+6, r19	; 0x06
    64a4:	2d 83       	std	Y+5, r18	; 0x05
    64a6:	01 e0       	ldi	r16, 0x01	; 1
    64a8:	e1 14       	cp	r14, r1
    64aa:	f1 04       	cpc	r15, r1
    64ac:	09 f4       	brne	.+2      	; 0x64b0 <strtoul+0x70>
    64ae:	01 c1       	rjmp	.+514    	; 0x66b2 <strtoul+0x272>
    64b0:	f0 e1       	ldi	r31, 0x10	; 16
    64b2:	ef 16       	cp	r14, r31
    64b4:	f1 04       	cpc	r15, r1
    64b6:	09 f0       	breq	.+2      	; 0x64ba <strtoul+0x7a>
    64b8:	04 c1       	rjmp	.+520    	; 0x66c2 <strtoul+0x282>
    64ba:	10 33       	cpi	r17, 0x30	; 48
    64bc:	69 f0       	breq	.+26     	; 0x64d8 <strtoul+0x98>
    64be:	e0 2f       	mov	r30, r16
    64c0:	1d c0       	rjmp	.+58     	; 0x64fc <strtoul+0xbc>
    64c2:	1b 32       	cpi	r17, 0x2B	; 43
    64c4:	39 f4       	brne	.+14     	; 0x64d4 <strtoul+0x94>
    64c6:	ad 81       	ldd	r26, Y+5	; 0x05
    64c8:	be 81       	ldd	r27, Y+6	; 0x06
    64ca:	1c 91       	ld	r17, X
    64cc:	f5 01       	movw	r30, r10
    64ce:	32 96       	adiw	r30, 0x02	; 2
    64d0:	fe 83       	std	Y+6, r31	; 0x06
    64d2:	ed 83       	std	Y+5, r30	; 0x05
    64d4:	00 e0       	ldi	r16, 0x00	; 0
    64d6:	e8 cf       	rjmp	.-48     	; 0x64a8 <strtoul+0x68>
    64d8:	ad 81       	ldd	r26, Y+5	; 0x05
    64da:	be 81       	ldd	r27, Y+6	; 0x06
    64dc:	8c 91       	ld	r24, X
    64de:	8f 7d       	andi	r24, 0xDF	; 223
    64e0:	88 35       	cpi	r24, 0x58	; 88
    64e2:	09 f0       	breq	.+2      	; 0x64e6 <strtoul+0xa6>
    64e4:	72 c0       	rjmp	.+228    	; 0x65ca <strtoul+0x18a>
    64e6:	11 96       	adiw	r26, 0x01	; 1
    64e8:	1c 91       	ld	r17, X
    64ea:	11 97       	sbiw	r26, 0x01	; 1
    64ec:	12 96       	adiw	r26, 0x02	; 2
    64ee:	be 83       	std	Y+6, r27	; 0x06
    64f0:	ad 83       	std	Y+5, r26	; 0x05
    64f2:	e0 2f       	mov	r30, r16
    64f4:	e2 60       	ori	r30, 0x02	; 2
    64f6:	50 e1       	ldi	r21, 0x10	; 16
    64f8:	e5 2e       	mov	r14, r21
    64fa:	f1 2c       	mov	r15, r1
    64fc:	88 24       	eor	r8, r8
    64fe:	8a 94       	dec	r8
    6500:	98 2c       	mov	r9, r8
    6502:	a8 2c       	mov	r10, r8
    6504:	8f e0       	ldi	r24, 0x0F	; 15
    6506:	b8 2e       	mov	r11, r24
    6508:	81 c0       	rjmp	.+258    	; 0x660c <strtoul+0x1cc>
    650a:	e0 2f       	mov	r30, r16
    650c:	10 e3       	ldi	r17, 0x30	; 48
    650e:	29 e9       	ldi	r18, 0x99	; 153
    6510:	82 2e       	mov	r8, r18
    6512:	98 2c       	mov	r9, r8
    6514:	a8 2c       	mov	r10, r8
    6516:	29 e1       	ldi	r18, 0x19	; 25
    6518:	b2 2e       	mov	r11, r18
    651a:	78 c0       	rjmp	.+240    	; 0x660c <strtoul+0x1cc>
    651c:	e0 2f       	mov	r30, r16
    651e:	10 e3       	ldi	r17, 0x30	; 48
    6520:	ed cf       	rjmp	.-38     	; 0x64fc <strtoul+0xbc>
    6522:	e0 2f       	mov	r30, r16
    6524:	88 24       	eor	r8, r8
    6526:	8a 94       	dec	r8
    6528:	98 2c       	mov	r9, r8
    652a:	a8 2c       	mov	r10, r8
    652c:	3f e1       	ldi	r19, 0x1F	; 31
    652e:	b3 2e       	mov	r11, r19
    6530:	6d c0       	rjmp	.+218    	; 0x660c <strtoul+0x1cc>
    6532:	e0 2f       	mov	r30, r16
    6534:	10 e3       	ldi	r17, 0x30	; 48
    6536:	48 e0       	ldi	r20, 0x08	; 8
    6538:	e4 2e       	mov	r14, r20
    653a:	f1 2c       	mov	r15, r1
    653c:	f3 cf       	rjmp	.-26     	; 0x6524 <strtoul+0xe4>
    653e:	8f ef       	ldi	r24, 0xFF	; 255
    6540:	b2 c0       	rjmp	.+356    	; 0x66a6 <strtoul+0x266>
    6542:	c1 14       	cp	r12, r1
    6544:	d1 04       	cpc	r13, r1
    6546:	49 f0       	breq	.+18     	; 0x655a <strtoul+0x11a>
    6548:	88 23       	and	r24, r24
    654a:	79 f1       	breq	.+94     	; 0x65aa <strtoul+0x16a>
    654c:	2d 81       	ldd	r18, Y+5	; 0x05
    654e:	3e 81       	ldd	r19, Y+6	; 0x06
    6550:	21 50       	subi	r18, 0x01	; 1
    6552:	31 09       	sbc	r19, r1
    6554:	f6 01       	movw	r30, r12
    6556:	31 83       	std	Z+1, r19	; 0x01
    6558:	20 83       	st	Z, r18
    655a:	00 23       	and	r16, r16
    655c:	79 f0       	breq	.+30     	; 0x657c <strtoul+0x13c>
    655e:	29 81       	ldd	r18, Y+1	; 0x01
    6560:	3a 81       	ldd	r19, Y+2	; 0x02
    6562:	4b 81       	ldd	r20, Y+3	; 0x03
    6564:	5c 81       	ldd	r21, Y+4	; 0x04
    6566:	50 95       	com	r21
    6568:	40 95       	com	r20
    656a:	30 95       	com	r19
    656c:	21 95       	neg	r18
    656e:	3f 4f       	sbci	r19, 0xFF	; 255
    6570:	4f 4f       	sbci	r20, 0xFF	; 255
    6572:	5f 4f       	sbci	r21, 0xFF	; 255
    6574:	29 83       	std	Y+1, r18	; 0x01
    6576:	3a 83       	std	Y+2, r19	; 0x02
    6578:	4b 83       	std	Y+3, r20	; 0x03
    657a:	5c 83       	std	Y+4, r21	; 0x04
    657c:	8f 3f       	cpi	r24, 0xFF	; 255
    657e:	69 f4       	brne	.+26     	; 0x659a <strtoul+0x15a>
    6580:	82 e2       	ldi	r24, 0x22	; 34
    6582:	90 e0       	ldi	r25, 0x00	; 0
    6584:	90 93 b4 06 	sts	0x06B4, r25	; 0x8006b4 <errno+0x1>
    6588:	80 93 b3 06 	sts	0x06B3, r24	; 0x8006b3 <errno>
    658c:	8f ef       	ldi	r24, 0xFF	; 255
    658e:	9f ef       	ldi	r25, 0xFF	; 255
    6590:	dc 01       	movw	r26, r24
    6592:	89 83       	std	Y+1, r24	; 0x01
    6594:	9a 83       	std	Y+2, r25	; 0x02
    6596:	ab 83       	std	Y+3, r26	; 0x03
    6598:	bc 83       	std	Y+4, r27	; 0x04
    659a:	69 81       	ldd	r22, Y+1	; 0x01
    659c:	7a 81       	ldd	r23, Y+2	; 0x02
    659e:	8b 81       	ldd	r24, Y+3	; 0x03
    65a0:	9c 81       	ldd	r25, Y+4	; 0x04
    65a2:	26 96       	adiw	r28, 0x06	; 6
    65a4:	e0 e1       	ldi	r30, 0x10	; 16
    65a6:	0c 94 ae 2f 	jmp	0x5f5c	; 0x5f5c <__epilogue_restores__+0x4>
    65aa:	e1 ff       	sbrs	r30, 1
    65ac:	06 c0       	rjmp	.+12     	; 0x65ba <strtoul+0x17a>
    65ae:	ed 81       	ldd	r30, Y+5	; 0x05
    65b0:	fe 81       	ldd	r31, Y+6	; 0x06
    65b2:	32 97       	sbiw	r30, 0x02	; 2
    65b4:	d6 01       	movw	r26, r12
    65b6:	ed 93       	st	X+, r30
    65b8:	fc 93       	st	X, r31
    65ba:	00 23       	and	r16, r16
    65bc:	71 f3       	breq	.-36     	; 0x659a <strtoul+0x15a>
    65be:	cf cf       	rjmp	.-98     	; 0x655e <strtoul+0x11e>
    65c0:	19 82       	std	Y+1, r1	; 0x01
    65c2:	1a 82       	std	Y+2, r1	; 0x02
    65c4:	1b 82       	std	Y+3, r1	; 0x03
    65c6:	1c 82       	std	Y+4, r1	; 0x04
    65c8:	e8 cf       	rjmp	.-48     	; 0x659a <strtoul+0x15a>
    65ca:	e1 14       	cp	r14, r1
    65cc:	f1 04       	cpc	r15, r1
    65ce:	09 f4       	brne	.+2      	; 0x65d2 <strtoul+0x192>
    65d0:	b0 cf       	rjmp	.-160    	; 0x6532 <strtoul+0xf2>
    65d2:	ba e0       	ldi	r27, 0x0A	; 10
    65d4:	eb 16       	cp	r14, r27
    65d6:	f1 04       	cpc	r15, r1
    65d8:	09 f4       	brne	.+2      	; 0x65dc <strtoul+0x19c>
    65da:	97 cf       	rjmp	.-210    	; 0x650a <strtoul+0xca>
    65dc:	e0 e1       	ldi	r30, 0x10	; 16
    65de:	ee 16       	cp	r14, r30
    65e0:	f1 04       	cpc	r15, r1
    65e2:	09 f4       	brne	.+2      	; 0x65e6 <strtoul+0x1a6>
    65e4:	9b cf       	rjmp	.-202    	; 0x651c <strtoul+0xdc>
    65e6:	10 e3       	ldi	r17, 0x30	; 48
    65e8:	f8 e0       	ldi	r31, 0x08	; 8
    65ea:	ef 16       	cp	r14, r31
    65ec:	f1 04       	cpc	r15, r1
    65ee:	09 f4       	brne	.+2      	; 0x65f2 <strtoul+0x1b2>
    65f0:	98 cf       	rjmp	.-208    	; 0x6522 <strtoul+0xe2>
    65f2:	6f ef       	ldi	r22, 0xFF	; 255
    65f4:	7f ef       	ldi	r23, 0xFF	; 255
    65f6:	cb 01       	movw	r24, r22
    65f8:	97 01       	movw	r18, r14
    65fa:	0f 2c       	mov	r0, r15
    65fc:	00 0c       	add	r0, r0
    65fe:	44 0b       	sbc	r20, r20
    6600:	55 0b       	sbc	r21, r21
    6602:	0e 94 4a 2f 	call	0x5e94	; 0x5e94 <__udivmodsi4>
    6606:	49 01       	movw	r8, r18
    6608:	5a 01       	movw	r10, r20
    660a:	e0 2f       	mov	r30, r16
    660c:	80 e0       	ldi	r24, 0x00	; 0
    660e:	19 82       	std	Y+1, r1	; 0x01
    6610:	1a 82       	std	Y+2, r1	; 0x02
    6612:	1b 82       	std	Y+3, r1	; 0x03
    6614:	1c 82       	std	Y+4, r1	; 0x04
    6616:	27 01       	movw	r4, r14
    6618:	0f 2c       	mov	r0, r15
    661a:	00 0c       	add	r0, r0
    661c:	66 08       	sbc	r6, r6
    661e:	77 08       	sbc	r7, r7
    6620:	f0 ed       	ldi	r31, 0xD0	; 208
    6622:	f1 0f       	add	r31, r17
    6624:	fa 30       	cpi	r31, 0x0A	; 10
    6626:	60 f0       	brcs	.+24     	; 0x6640 <strtoul+0x200>
    6628:	9f eb       	ldi	r25, 0xBF	; 191
    662a:	91 0f       	add	r25, r17
    662c:	f9 ec       	ldi	r31, 0xC9	; 201
    662e:	9a 31       	cpi	r25, 0x1A	; 26
    6630:	30 f0       	brcs	.+12     	; 0x663e <strtoul+0x1fe>
    6632:	9f e9       	ldi	r25, 0x9F	; 159
    6634:	91 0f       	add	r25, r17
    6636:	9a 31       	cpi	r25, 0x1A	; 26
    6638:	08 f0       	brcs	.+2      	; 0x663c <strtoul+0x1fc>
    663a:	83 cf       	rjmp	.-250    	; 0x6542 <strtoul+0x102>
    663c:	f9 ea       	ldi	r31, 0xA9	; 169
    663e:	f1 0f       	add	r31, r17
    6640:	fe 15       	cp	r31, r14
    6642:	1f 04       	cpc	r1, r15
    6644:	0c f0       	brlt	.+2      	; 0x6648 <strtoul+0x208>
    6646:	7d cf       	rjmp	.-262    	; 0x6542 <strtoul+0x102>
    6648:	8f 3f       	cpi	r24, 0xFF	; 255
    664a:	69 f1       	breq	.+90     	; 0x66a6 <strtoul+0x266>
    664c:	29 81       	ldd	r18, Y+1	; 0x01
    664e:	3a 81       	ldd	r19, Y+2	; 0x02
    6650:	4b 81       	ldd	r20, Y+3	; 0x03
    6652:	5c 81       	ldd	r21, Y+4	; 0x04
    6654:	82 16       	cp	r8, r18
    6656:	93 06       	cpc	r9, r19
    6658:	a4 06       	cpc	r10, r20
    665a:	b5 06       	cpc	r11, r21
    665c:	08 f4       	brcc	.+2      	; 0x6660 <strtoul+0x220>
    665e:	6f cf       	rjmp	.-290    	; 0x653e <strtoul+0xfe>
    6660:	a3 01       	movw	r20, r6
    6662:	92 01       	movw	r18, r4
    6664:	69 81       	ldd	r22, Y+1	; 0x01
    6666:	7a 81       	ldd	r23, Y+2	; 0x02
    6668:	8b 81       	ldd	r24, Y+3	; 0x03
    666a:	9c 81       	ldd	r25, Y+4	; 0x04
    666c:	0e 94 68 37 	call	0x6ed0	; 0x6ed0 <__mulsi3>
    6670:	69 83       	std	Y+1, r22	; 0x01
    6672:	7a 83       	std	Y+2, r23	; 0x02
    6674:	8b 83       	std	Y+3, r24	; 0x03
    6676:	9c 83       	std	Y+4, r25	; 0x04
    6678:	8f 2f       	mov	r24, r31
    667a:	90 e0       	ldi	r25, 0x00	; 0
    667c:	b0 e0       	ldi	r27, 0x00	; 0
    667e:	a0 e0       	ldi	r26, 0x00	; 0
    6680:	29 81       	ldd	r18, Y+1	; 0x01
    6682:	3a 81       	ldd	r19, Y+2	; 0x02
    6684:	4b 81       	ldd	r20, Y+3	; 0x03
    6686:	5c 81       	ldd	r21, Y+4	; 0x04
    6688:	28 0f       	add	r18, r24
    668a:	39 1f       	adc	r19, r25
    668c:	4a 1f       	adc	r20, r26
    668e:	5b 1f       	adc	r21, r27
    6690:	29 83       	std	Y+1, r18	; 0x01
    6692:	3a 83       	std	Y+2, r19	; 0x02
    6694:	4b 83       	std	Y+3, r20	; 0x03
    6696:	5c 83       	std	Y+4, r21	; 0x04
    6698:	28 17       	cp	r18, r24
    669a:	39 07       	cpc	r19, r25
    669c:	4a 07       	cpc	r20, r26
    669e:	5b 07       	cpc	r21, r27
    66a0:	08 f4       	brcc	.+2      	; 0x66a4 <strtoul+0x264>
    66a2:	4d cf       	rjmp	.-358    	; 0x653e <strtoul+0xfe>
    66a4:	81 e0       	ldi	r24, 0x01	; 1
    66a6:	ad 81       	ldd	r26, Y+5	; 0x05
    66a8:	be 81       	ldd	r27, Y+6	; 0x06
    66aa:	1d 91       	ld	r17, X+
    66ac:	be 83       	std	Y+6, r27	; 0x06
    66ae:	ad 83       	std	Y+5, r26	; 0x05
    66b0:	b7 cf       	rjmp	.-146    	; 0x6620 <strtoul+0x1e0>
    66b2:	10 33       	cpi	r17, 0x30	; 48
    66b4:	09 f4       	brne	.+2      	; 0x66b8 <strtoul+0x278>
    66b6:	10 cf       	rjmp	.-480    	; 0x64d8 <strtoul+0x98>
    66b8:	e0 2f       	mov	r30, r16
    66ba:	9a e0       	ldi	r25, 0x0A	; 10
    66bc:	e9 2e       	mov	r14, r25
    66be:	f1 2c       	mov	r15, r1
    66c0:	26 cf       	rjmp	.-436    	; 0x650e <strtoul+0xce>
    66c2:	9a e0       	ldi	r25, 0x0A	; 10
    66c4:	e9 16       	cp	r14, r25
    66c6:	f1 04       	cpc	r15, r1
    66c8:	09 f0       	breq	.+2      	; 0x66cc <strtoul+0x28c>
    66ca:	8e cf       	rjmp	.-228    	; 0x65e8 <strtoul+0x1a8>
    66cc:	e0 2f       	mov	r30, r16
    66ce:	1f cf       	rjmp	.-450    	; 0x650e <strtoul+0xce>

000066d0 <abort>:
    66d0:	81 e0       	ldi	r24, 0x01	; 1
    66d2:	90 e0       	ldi	r25, 0x00	; 0
    66d4:	f8 94       	cli
    66d6:	0c 94 83 37 	jmp	0x6f06	; 0x6f06 <_exit>

000066da <atoi>:
    66da:	fc 01       	movw	r30, r24
    66dc:	88 27       	eor	r24, r24
    66de:	99 27       	eor	r25, r25
    66e0:	e8 94       	clt
    66e2:	21 91       	ld	r18, Z+
    66e4:	20 32       	cpi	r18, 0x20	; 32
    66e6:	e9 f3       	breq	.-6      	; 0x66e2 <atoi+0x8>
    66e8:	29 30       	cpi	r18, 0x09	; 9
    66ea:	10 f0       	brcs	.+4      	; 0x66f0 <atoi+0x16>
    66ec:	2e 30       	cpi	r18, 0x0E	; 14
    66ee:	c8 f3       	brcs	.-14     	; 0x66e2 <atoi+0x8>
    66f0:	2b 32       	cpi	r18, 0x2B	; 43
    66f2:	41 f0       	breq	.+16     	; 0x6704 <atoi+0x2a>
    66f4:	2d 32       	cpi	r18, 0x2D	; 45
    66f6:	39 f4       	brne	.+14     	; 0x6706 <atoi+0x2c>
    66f8:	68 94       	set
    66fa:	04 c0       	rjmp	.+8      	; 0x6704 <atoi+0x2a>
    66fc:	0e 94 46 34 	call	0x688c	; 0x688c <__mulhi_const_10>
    6700:	82 0f       	add	r24, r18
    6702:	91 1d       	adc	r25, r1
    6704:	21 91       	ld	r18, Z+
    6706:	20 53       	subi	r18, 0x30	; 48
    6708:	2a 30       	cpi	r18, 0x0A	; 10
    670a:	c0 f3       	brcs	.-16     	; 0x66fc <atoi+0x22>
    670c:	1e f4       	brtc	.+6      	; 0x6714 <atoi+0x3a>
    670e:	90 95       	com	r25
    6710:	81 95       	neg	r24
    6712:	9f 4f       	sbci	r25, 0xFF	; 255
    6714:	08 95       	ret

00006716 <isspace>:
    6716:	91 11       	cpse	r25, r1
    6718:	0c 94 5e 36 	jmp	0x6cbc	; 0x6cbc <__ctype_isfalse>
    671c:	80 32       	cpi	r24, 0x20	; 32
    671e:	19 f0       	breq	.+6      	; 0x6726 <isspace+0x10>
    6720:	89 50       	subi	r24, 0x09	; 9
    6722:	85 50       	subi	r24, 0x05	; 5
    6724:	c8 f7       	brcc	.-14     	; 0x6718 <isspace+0x2>
    6726:	08 95       	ret

00006728 <memcmp_P>:
    6728:	fb 01       	movw	r30, r22
    672a:	dc 01       	movw	r26, r24
    672c:	04 c0       	rjmp	.+8      	; 0x6736 <memcmp_P+0xe>
    672e:	8d 91       	ld	r24, X+
    6730:	05 90       	lpm	r0, Z+
    6732:	80 19       	sub	r24, r0
    6734:	21 f4       	brne	.+8      	; 0x673e <memcmp_P+0x16>
    6736:	41 50       	subi	r20, 0x01	; 1
    6738:	50 40       	sbci	r21, 0x00	; 0
    673a:	c8 f7       	brcc	.-14     	; 0x672e <memcmp_P+0x6>
    673c:	88 1b       	sub	r24, r24
    673e:	99 0b       	sbc	r25, r25
    6740:	08 95       	ret

00006742 <memcpy_P>:
    6742:	fb 01       	movw	r30, r22
    6744:	dc 01       	movw	r26, r24
    6746:	02 c0       	rjmp	.+4      	; 0x674c <memcpy_P+0xa>
    6748:	05 90       	lpm	r0, Z+
    674a:	0d 92       	st	X+, r0
    674c:	41 50       	subi	r20, 0x01	; 1
    674e:	50 40       	sbci	r21, 0x00	; 0
    6750:	d8 f7       	brcc	.-10     	; 0x6748 <memcpy_P+0x6>
    6752:	08 95       	ret

00006754 <strstr_P>:
    6754:	fb 01       	movw	r30, r22
    6756:	55 91       	lpm	r21, Z+
    6758:	55 23       	and	r21, r21
    675a:	a9 f0       	breq	.+42     	; 0x6786 <strstr_P+0x32>
    675c:	bf 01       	movw	r22, r30
    675e:	dc 01       	movw	r26, r24
    6760:	4d 91       	ld	r20, X+
    6762:	45 17       	cp	r20, r21
    6764:	41 11       	cpse	r20, r1
    6766:	e1 f7       	brne	.-8      	; 0x6760 <strstr_P+0xc>
    6768:	59 f4       	brne	.+22     	; 0x6780 <strstr_P+0x2c>
    676a:	cd 01       	movw	r24, r26
    676c:	05 90       	lpm	r0, Z+
    676e:	00 20       	and	r0, r0
    6770:	49 f0       	breq	.+18     	; 0x6784 <strstr_P+0x30>
    6772:	4d 91       	ld	r20, X+
    6774:	40 15       	cp	r20, r0
    6776:	41 11       	cpse	r20, r1
    6778:	c9 f3       	breq	.-14     	; 0x676c <strstr_P+0x18>
    677a:	fb 01       	movw	r30, r22
    677c:	41 11       	cpse	r20, r1
    677e:	ef cf       	rjmp	.-34     	; 0x675e <strstr_P+0xa>
    6780:	81 e0       	ldi	r24, 0x01	; 1
    6782:	90 e0       	ldi	r25, 0x00	; 0
    6784:	01 97       	sbiw	r24, 0x01	; 1
    6786:	08 95       	ret

00006788 <strtok>:
    6788:	41 eb       	ldi	r20, 0xB1	; 177
    678a:	56 e0       	ldi	r21, 0x06	; 6
    678c:	0e 94 14 34 	call	0x6828	; 0x6828 <strtok_r>
    6790:	08 95       	ret

00006792 <memcmp>:
    6792:	fb 01       	movw	r30, r22
    6794:	dc 01       	movw	r26, r24
    6796:	04 c0       	rjmp	.+8      	; 0x67a0 <memcmp+0xe>
    6798:	8d 91       	ld	r24, X+
    679a:	01 90       	ld	r0, Z+
    679c:	80 19       	sub	r24, r0
    679e:	21 f4       	brne	.+8      	; 0x67a8 <memcmp+0x16>
    67a0:	41 50       	subi	r20, 0x01	; 1
    67a2:	50 40       	sbci	r21, 0x00	; 0
    67a4:	c8 f7       	brcc	.-14     	; 0x6798 <memcmp+0x6>
    67a6:	88 1b       	sub	r24, r24
    67a8:	99 0b       	sbc	r25, r25
    67aa:	08 95       	ret

000067ac <memmove>:
    67ac:	68 17       	cp	r22, r24
    67ae:	79 07       	cpc	r23, r25
    67b0:	68 f4       	brcc	.+26     	; 0x67cc <memmove+0x20>
    67b2:	fb 01       	movw	r30, r22
    67b4:	dc 01       	movw	r26, r24
    67b6:	e4 0f       	add	r30, r20
    67b8:	f5 1f       	adc	r31, r21
    67ba:	a4 0f       	add	r26, r20
    67bc:	b5 1f       	adc	r27, r21
    67be:	02 c0       	rjmp	.+4      	; 0x67c4 <memmove+0x18>
    67c0:	02 90       	ld	r0, -Z
    67c2:	0e 92       	st	-X, r0
    67c4:	41 50       	subi	r20, 0x01	; 1
    67c6:	50 40       	sbci	r21, 0x00	; 0
    67c8:	d8 f7       	brcc	.-10     	; 0x67c0 <memmove+0x14>
    67ca:	08 95       	ret
    67cc:	0c 94 6c 36 	jmp	0x6cd8	; 0x6cd8 <memcpy>

000067d0 <memset>:
    67d0:	dc 01       	movw	r26, r24
    67d2:	01 c0       	rjmp	.+2      	; 0x67d6 <memset+0x6>
    67d4:	6d 93       	st	X+, r22
    67d6:	41 50       	subi	r20, 0x01	; 1
    67d8:	50 40       	sbci	r21, 0x00	; 0
    67da:	e0 f7       	brcc	.-8      	; 0x67d4 <memset+0x4>
    67dc:	08 95       	ret

000067de <strchr>:
    67de:	fc 01       	movw	r30, r24
    67e0:	81 91       	ld	r24, Z+
    67e2:	86 17       	cp	r24, r22
    67e4:	21 f0       	breq	.+8      	; 0x67ee <strchr+0x10>
    67e6:	88 23       	and	r24, r24
    67e8:	d9 f7       	brne	.-10     	; 0x67e0 <strchr+0x2>
    67ea:	99 27       	eor	r25, r25
    67ec:	08 95       	ret
    67ee:	31 97       	sbiw	r30, 0x01	; 1
    67f0:	cf 01       	movw	r24, r30
    67f2:	08 95       	ret

000067f4 <strstr>:
    67f4:	fb 01       	movw	r30, r22
    67f6:	51 91       	ld	r21, Z+
    67f8:	55 23       	and	r21, r21
    67fa:	a9 f0       	breq	.+42     	; 0x6826 <strstr+0x32>
    67fc:	bf 01       	movw	r22, r30
    67fe:	dc 01       	movw	r26, r24
    6800:	4d 91       	ld	r20, X+
    6802:	45 17       	cp	r20, r21
    6804:	41 11       	cpse	r20, r1
    6806:	e1 f7       	brne	.-8      	; 0x6800 <strstr+0xc>
    6808:	59 f4       	brne	.+22     	; 0x6820 <strstr+0x2c>
    680a:	cd 01       	movw	r24, r26
    680c:	01 90       	ld	r0, Z+
    680e:	00 20       	and	r0, r0
    6810:	49 f0       	breq	.+18     	; 0x6824 <strstr+0x30>
    6812:	4d 91       	ld	r20, X+
    6814:	40 15       	cp	r20, r0
    6816:	41 11       	cpse	r20, r1
    6818:	c9 f3       	breq	.-14     	; 0x680c <strstr+0x18>
    681a:	fb 01       	movw	r30, r22
    681c:	41 11       	cpse	r20, r1
    681e:	ef cf       	rjmp	.-34     	; 0x67fe <strstr+0xa>
    6820:	81 e0       	ldi	r24, 0x01	; 1
    6822:	90 e0       	ldi	r25, 0x00	; 0
    6824:	01 97       	sbiw	r24, 0x01	; 1
    6826:	08 95       	ret

00006828 <strtok_r>:
    6828:	fa 01       	movw	r30, r20
    682a:	a1 91       	ld	r26, Z+
    682c:	b0 81       	ld	r27, Z
    682e:	00 97       	sbiw	r24, 0x00	; 0
    6830:	19 f4       	brne	.+6      	; 0x6838 <strtok_r+0x10>
    6832:	10 97       	sbiw	r26, 0x00	; 0
    6834:	e1 f0       	breq	.+56     	; 0x686e <strtok_r+0x46>
    6836:	cd 01       	movw	r24, r26
    6838:	dc 01       	movw	r26, r24
    683a:	cd 01       	movw	r24, r26
    683c:	0d 90       	ld	r0, X+
    683e:	00 20       	and	r0, r0
    6840:	11 f4       	brne	.+4      	; 0x6846 <strtok_r+0x1e>
    6842:	c0 01       	movw	r24, r0
    6844:	13 c0       	rjmp	.+38     	; 0x686c <strtok_r+0x44>
    6846:	fb 01       	movw	r30, r22
    6848:	21 91       	ld	r18, Z+
    684a:	22 23       	and	r18, r18
    684c:	19 f0       	breq	.+6      	; 0x6854 <strtok_r+0x2c>
    684e:	20 15       	cp	r18, r0
    6850:	d9 f7       	brne	.-10     	; 0x6848 <strtok_r+0x20>
    6852:	f3 cf       	rjmp	.-26     	; 0x683a <strtok_r+0x12>
    6854:	fb 01       	movw	r30, r22
    6856:	21 91       	ld	r18, Z+
    6858:	20 15       	cp	r18, r0
    685a:	19 f4       	brne	.+6      	; 0x6862 <strtok_r+0x3a>
    685c:	1e 92       	st	-X, r1
    685e:	11 96       	adiw	r26, 0x01	; 1
    6860:	06 c0       	rjmp	.+12     	; 0x686e <strtok_r+0x46>
    6862:	22 23       	and	r18, r18
    6864:	c1 f7       	brne	.-16     	; 0x6856 <strtok_r+0x2e>
    6866:	0d 90       	ld	r0, X+
    6868:	00 20       	and	r0, r0
    686a:	a1 f7       	brne	.-24     	; 0x6854 <strtok_r+0x2c>
    686c:	d0 01       	movw	r26, r0
    686e:	fa 01       	movw	r30, r20
    6870:	a1 93       	st	Z+, r26
    6872:	b0 83       	st	Z, r27
    6874:	08 95       	ret

00006876 <__itoa_ncheck>:
    6876:	bb 27       	eor	r27, r27
    6878:	4a 30       	cpi	r20, 0x0A	; 10
    687a:	31 f4       	brne	.+12     	; 0x6888 <__itoa_ncheck+0x12>
    687c:	99 23       	and	r25, r25
    687e:	22 f4       	brpl	.+8      	; 0x6888 <__itoa_ncheck+0x12>
    6880:	bd e2       	ldi	r27, 0x2D	; 45
    6882:	90 95       	com	r25
    6884:	81 95       	neg	r24
    6886:	9f 4f       	sbci	r25, 0xFF	; 255
    6888:	0c 94 4f 34 	jmp	0x689e	; 0x689e <__utoa_common>

0000688c <__mulhi_const_10>:
    688c:	7a e0       	ldi	r23, 0x0A	; 10
    688e:	97 9f       	mul	r25, r23
    6890:	90 2d       	mov	r25, r0
    6892:	87 9f       	mul	r24, r23
    6894:	80 2d       	mov	r24, r0
    6896:	91 0d       	add	r25, r1
    6898:	11 24       	eor	r1, r1
    689a:	08 95       	ret

0000689c <__utoa_ncheck>:
    689c:	bb 27       	eor	r27, r27

0000689e <__utoa_common>:
    689e:	fb 01       	movw	r30, r22
    68a0:	55 27       	eor	r21, r21
    68a2:	aa 27       	eor	r26, r26
    68a4:	88 0f       	add	r24, r24
    68a6:	99 1f       	adc	r25, r25
    68a8:	aa 1f       	adc	r26, r26
    68aa:	a4 17       	cp	r26, r20
    68ac:	10 f0       	brcs	.+4      	; 0x68b2 <__utoa_common+0x14>
    68ae:	a4 1b       	sub	r26, r20
    68b0:	83 95       	inc	r24
    68b2:	50 51       	subi	r21, 0x10	; 16
    68b4:	b9 f7       	brne	.-18     	; 0x68a4 <__utoa_common+0x6>
    68b6:	a0 5d       	subi	r26, 0xD0	; 208
    68b8:	aa 33       	cpi	r26, 0x3A	; 58
    68ba:	08 f0       	brcs	.+2      	; 0x68be <__utoa_common+0x20>
    68bc:	a9 5d       	subi	r26, 0xD9	; 217
    68be:	a1 93       	st	Z+, r26
    68c0:	00 97       	sbiw	r24, 0x00	; 0
    68c2:	79 f7       	brne	.-34     	; 0x68a2 <__utoa_common+0x4>
    68c4:	b1 11       	cpse	r27, r1
    68c6:	b1 93       	st	Z+, r27
    68c8:	11 92       	st	Z+, r1
    68ca:	cb 01       	movw	r24, r22
    68cc:	0c 94 80 36 	jmp	0x6d00	; 0x6d00 <strrev>

000068d0 <sprintf_P>:
    68d0:	ae e0       	ldi	r26, 0x0E	; 14
    68d2:	b0 e0       	ldi	r27, 0x00	; 0
    68d4:	ee e6       	ldi	r30, 0x6E	; 110
    68d6:	f4 e3       	ldi	r31, 0x34	; 52
    68d8:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__prologue_saves__+0x1c>
    68dc:	0d 89       	ldd	r16, Y+21	; 0x15
    68de:	1e 89       	ldd	r17, Y+22	; 0x16
    68e0:	8e e0       	ldi	r24, 0x0E	; 14
    68e2:	8c 83       	std	Y+4, r24	; 0x04
    68e4:	1a 83       	std	Y+2, r17	; 0x02
    68e6:	09 83       	std	Y+1, r16	; 0x01
    68e8:	8f ef       	ldi	r24, 0xFF	; 255
    68ea:	9f e7       	ldi	r25, 0x7F	; 127
    68ec:	9e 83       	std	Y+6, r25	; 0x06
    68ee:	8d 83       	std	Y+5, r24	; 0x05
    68f0:	ae 01       	movw	r20, r28
    68f2:	47 5e       	subi	r20, 0xE7	; 231
    68f4:	5f 4f       	sbci	r21, 0xFF	; 255
    68f6:	6f 89       	ldd	r22, Y+23	; 0x17
    68f8:	78 8d       	ldd	r23, Y+24	; 0x18
    68fa:	ce 01       	movw	r24, r28
    68fc:	01 96       	adiw	r24, 0x01	; 1
    68fe:	0e 94 8b 34 	call	0x6916	; 0x6916 <vfprintf>
    6902:	2f 81       	ldd	r18, Y+7	; 0x07
    6904:	38 85       	ldd	r19, Y+8	; 0x08
    6906:	02 0f       	add	r16, r18
    6908:	13 1f       	adc	r17, r19
    690a:	f8 01       	movw	r30, r16
    690c:	10 82       	st	Z, r1
    690e:	2e 96       	adiw	r28, 0x0e	; 14
    6910:	e4 e0       	ldi	r30, 0x04	; 4
    6912:	0c 94 ba 2f 	jmp	0x5f74	; 0x5f74 <__epilogue_restores__+0x1c>

00006916 <vfprintf>:
    6916:	af e0       	ldi	r26, 0x0F	; 15
    6918:	b0 e0       	ldi	r27, 0x00	; 0
    691a:	e1 e9       	ldi	r30, 0x91	; 145
    691c:	f4 e3       	ldi	r31, 0x34	; 52
    691e:	0c 94 90 2f 	jmp	0x5f20	; 0x5f20 <__prologue_saves__>
    6922:	7c 01       	movw	r14, r24
    6924:	3b 01       	movw	r6, r22
    6926:	8a 01       	movw	r16, r20
    6928:	dc 01       	movw	r26, r24
    692a:	17 96       	adiw	r26, 0x07	; 7
    692c:	1c 92       	st	X, r1
    692e:	1e 92       	st	-X, r1
    6930:	16 97       	sbiw	r26, 0x06	; 6
    6932:	13 96       	adiw	r26, 0x03	; 3
    6934:	8c 91       	ld	r24, X
    6936:	81 ff       	sbrs	r24, 1
    6938:	be c1       	rjmp	.+892    	; 0x6cb6 <vfprintf+0x3a0>
    693a:	9a e0       	ldi	r25, 0x0A	; 10
    693c:	29 2e       	mov	r2, r25
    693e:	fe 01       	movw	r30, r28
    6940:	31 96       	adiw	r30, 0x01	; 1
    6942:	4f 01       	movw	r8, r30
    6944:	d7 01       	movw	r26, r14
    6946:	13 96       	adiw	r26, 0x03	; 3
    6948:	9c 91       	ld	r25, X
    694a:	f3 01       	movw	r30, r6
    694c:	93 fd       	sbrc	r25, 3
    694e:	85 91       	lpm	r24, Z+
    6950:	93 ff       	sbrs	r25, 3
    6952:	81 91       	ld	r24, Z+
    6954:	3f 01       	movw	r6, r30
    6956:	88 23       	and	r24, r24
    6958:	09 f4       	brne	.+2      	; 0x695c <vfprintf+0x46>
    695a:	44 c1       	rjmp	.+648    	; 0x6be4 <vfprintf+0x2ce>
    695c:	85 32       	cpi	r24, 0x25	; 37
    695e:	39 f4       	brne	.+14     	; 0x696e <vfprintf+0x58>
    6960:	93 fd       	sbrc	r25, 3
    6962:	85 91       	lpm	r24, Z+
    6964:	93 ff       	sbrs	r25, 3
    6966:	81 91       	ld	r24, Z+
    6968:	3f 01       	movw	r6, r30
    696a:	85 32       	cpi	r24, 0x25	; 37
    696c:	29 f4       	brne	.+10     	; 0x6978 <vfprintf+0x62>
    696e:	b7 01       	movw	r22, r14
    6970:	90 e0       	ldi	r25, 0x00	; 0
    6972:	0e 94 90 36 	call	0x6d20	; 0x6d20 <fputc>
    6976:	e6 cf       	rjmp	.-52     	; 0x6944 <vfprintf+0x2e>
    6978:	b1 2c       	mov	r11, r1
    697a:	41 2c       	mov	r4, r1
    697c:	51 2c       	mov	r5, r1
    697e:	bf e1       	ldi	r27, 0x1F	; 31
    6980:	b5 15       	cp	r27, r5
    6982:	38 f0       	brcs	.+14     	; 0x6992 <vfprintf+0x7c>
    6984:	8b 32       	cpi	r24, 0x2B	; 43
    6986:	09 f1       	breq	.+66     	; 0x69ca <vfprintf+0xb4>
    6988:	88 f4       	brcc	.+34     	; 0x69ac <vfprintf+0x96>
    698a:	80 32       	cpi	r24, 0x20	; 32
    698c:	01 f1       	breq	.+64     	; 0x69ce <vfprintf+0xb8>
    698e:	83 32       	cpi	r24, 0x23	; 35
    6990:	21 f1       	breq	.+72     	; 0x69da <vfprintf+0xc4>
    6992:	57 fc       	sbrc	r5, 7
    6994:	3a c0       	rjmp	.+116    	; 0x6a0a <vfprintf+0xf4>
    6996:	20 ed       	ldi	r18, 0xD0	; 208
    6998:	28 0f       	add	r18, r24
    699a:	2a 30       	cpi	r18, 0x0A	; 10
    699c:	40 f5       	brcc	.+80     	; 0x69ee <vfprintf+0xd8>
    699e:	56 fe       	sbrs	r5, 6
    69a0:	1f c0       	rjmp	.+62     	; 0x69e0 <vfprintf+0xca>
    69a2:	b2 9c       	mul	r11, r2
    69a4:	20 0d       	add	r18, r0
    69a6:	11 24       	eor	r1, r1
    69a8:	b2 2e       	mov	r11, r18
    69aa:	06 c0       	rjmp	.+12     	; 0x69b8 <vfprintf+0xa2>
    69ac:	8d 32       	cpi	r24, 0x2D	; 45
    69ae:	91 f0       	breq	.+36     	; 0x69d4 <vfprintf+0xbe>
    69b0:	80 33       	cpi	r24, 0x30	; 48
    69b2:	79 f7       	brne	.-34     	; 0x6992 <vfprintf+0x7c>
    69b4:	68 94       	set
    69b6:	50 f8       	bld	r5, 0
    69b8:	f3 01       	movw	r30, r6
    69ba:	93 fd       	sbrc	r25, 3
    69bc:	85 91       	lpm	r24, Z+
    69be:	93 ff       	sbrs	r25, 3
    69c0:	81 91       	ld	r24, Z+
    69c2:	3f 01       	movw	r6, r30
    69c4:	81 11       	cpse	r24, r1
    69c6:	db cf       	rjmp	.-74     	; 0x697e <vfprintf+0x68>
    69c8:	20 c0       	rjmp	.+64     	; 0x6a0a <vfprintf+0xf4>
    69ca:	68 94       	set
    69cc:	51 f8       	bld	r5, 1
    69ce:	68 94       	set
    69d0:	52 f8       	bld	r5, 2
    69d2:	f2 cf       	rjmp	.-28     	; 0x69b8 <vfprintf+0xa2>
    69d4:	68 94       	set
    69d6:	53 f8       	bld	r5, 3
    69d8:	ef cf       	rjmp	.-34     	; 0x69b8 <vfprintf+0xa2>
    69da:	68 94       	set
    69dc:	54 f8       	bld	r5, 4
    69de:	ec cf       	rjmp	.-40     	; 0x69b8 <vfprintf+0xa2>
    69e0:	42 9c       	mul	r4, r2
    69e2:	20 0d       	add	r18, r0
    69e4:	11 24       	eor	r1, r1
    69e6:	42 2e       	mov	r4, r18
    69e8:	68 94       	set
    69ea:	55 f8       	bld	r5, 5
    69ec:	e5 cf       	rjmp	.-54     	; 0x69b8 <vfprintf+0xa2>
    69ee:	8e 32       	cpi	r24, 0x2E	; 46
    69f0:	29 f4       	brne	.+10     	; 0x69fc <vfprintf+0xe6>
    69f2:	56 fc       	sbrc	r5, 6
    69f4:	f7 c0       	rjmp	.+494    	; 0x6be4 <vfprintf+0x2ce>
    69f6:	68 94       	set
    69f8:	56 f8       	bld	r5, 6
    69fa:	de cf       	rjmp	.-68     	; 0x69b8 <vfprintf+0xa2>
    69fc:	8c 36       	cpi	r24, 0x6C	; 108
    69fe:	19 f4       	brne	.+6      	; 0x6a06 <vfprintf+0xf0>
    6a00:	68 94       	set
    6a02:	57 f8       	bld	r5, 7
    6a04:	d9 cf       	rjmp	.-78     	; 0x69b8 <vfprintf+0xa2>
    6a06:	88 36       	cpi	r24, 0x68	; 104
    6a08:	b9 f2       	breq	.-82     	; 0x69b8 <vfprintf+0xa2>
    6a0a:	98 2f       	mov	r25, r24
    6a0c:	9f 7d       	andi	r25, 0xDF	; 223
    6a0e:	95 54       	subi	r25, 0x45	; 69
    6a10:	93 30       	cpi	r25, 0x03	; 3
    6a12:	c0 f0       	brcs	.+48     	; 0x6a44 <vfprintf+0x12e>
    6a14:	83 36       	cpi	r24, 0x63	; 99
    6a16:	81 f1       	breq	.+96     	; 0x6a78 <vfprintf+0x162>
    6a18:	83 37       	cpi	r24, 0x73	; 115
    6a1a:	a1 f1       	breq	.+104    	; 0x6a84 <vfprintf+0x16e>
    6a1c:	83 35       	cpi	r24, 0x53	; 83
    6a1e:	09 f0       	breq	.+2      	; 0x6a22 <vfprintf+0x10c>
    6a20:	5b c0       	rjmp	.+182    	; 0x6ad8 <vfprintf+0x1c2>
    6a22:	d8 01       	movw	r26, r16
    6a24:	cd 90       	ld	r12, X+
    6a26:	dd 90       	ld	r13, X+
    6a28:	8d 01       	movw	r16, r26
    6a2a:	6b 2d       	mov	r22, r11
    6a2c:	70 e0       	ldi	r23, 0x00	; 0
    6a2e:	56 fc       	sbrc	r5, 6
    6a30:	02 c0       	rjmp	.+4      	; 0x6a36 <vfprintf+0x120>
    6a32:	6f ef       	ldi	r22, 0xFF	; 255
    6a34:	7f ef       	ldi	r23, 0xFF	; 255
    6a36:	c6 01       	movw	r24, r12
    6a38:	0e 94 61 36 	call	0x6cc2	; 0x6cc2 <strnlen_P>
    6a3c:	5c 01       	movw	r10, r24
    6a3e:	68 94       	set
    6a40:	57 f8       	bld	r5, 7
    6a42:	0a c0       	rjmp	.+20     	; 0x6a58 <vfprintf+0x142>
    6a44:	0c 5f       	subi	r16, 0xFC	; 252
    6a46:	1f 4f       	sbci	r17, 0xFF	; 255
    6a48:	ef e3       	ldi	r30, 0x3F	; 63
    6a4a:	e9 83       	std	Y+1, r30	; 0x01
    6a4c:	aa 24       	eor	r10, r10
    6a4e:	a3 94       	inc	r10
    6a50:	b1 2c       	mov	r11, r1
    6a52:	64 01       	movw	r12, r8
    6a54:	e8 94       	clt
    6a56:	57 f8       	bld	r5, 7
    6a58:	53 fe       	sbrs	r5, 3
    6a5a:	29 c0       	rjmp	.+82     	; 0x6aae <vfprintf+0x198>
    6a5c:	34 2c       	mov	r3, r4
    6a5e:	a1 14       	cp	r10, r1
    6a60:	b1 04       	cpc	r11, r1
    6a62:	51 f5       	brne	.+84     	; 0x6ab8 <vfprintf+0x1a2>
    6a64:	33 20       	and	r3, r3
    6a66:	09 f4       	brne	.+2      	; 0x6a6a <vfprintf+0x154>
    6a68:	6d cf       	rjmp	.-294    	; 0x6944 <vfprintf+0x2e>
    6a6a:	b7 01       	movw	r22, r14
    6a6c:	80 e2       	ldi	r24, 0x20	; 32
    6a6e:	90 e0       	ldi	r25, 0x00	; 0
    6a70:	0e 94 90 36 	call	0x6d20	; 0x6d20 <fputc>
    6a74:	3a 94       	dec	r3
    6a76:	f6 cf       	rjmp	.-20     	; 0x6a64 <vfprintf+0x14e>
    6a78:	d8 01       	movw	r26, r16
    6a7a:	8c 91       	ld	r24, X
    6a7c:	89 83       	std	Y+1, r24	; 0x01
    6a7e:	0e 5f       	subi	r16, 0xFE	; 254
    6a80:	1f 4f       	sbci	r17, 0xFF	; 255
    6a82:	e4 cf       	rjmp	.-56     	; 0x6a4c <vfprintf+0x136>
    6a84:	f8 01       	movw	r30, r16
    6a86:	c1 90       	ld	r12, Z+
    6a88:	d1 90       	ld	r13, Z+
    6a8a:	8f 01       	movw	r16, r30
    6a8c:	6b 2d       	mov	r22, r11
    6a8e:	70 e0       	ldi	r23, 0x00	; 0
    6a90:	56 fc       	sbrc	r5, 6
    6a92:	02 c0       	rjmp	.+4      	; 0x6a98 <vfprintf+0x182>
    6a94:	6f ef       	ldi	r22, 0xFF	; 255
    6a96:	7f ef       	ldi	r23, 0xFF	; 255
    6a98:	c6 01       	movw	r24, r12
    6a9a:	0e 94 75 36 	call	0x6cea	; 0x6cea <strnlen>
    6a9e:	5c 01       	movw	r10, r24
    6aa0:	d9 cf       	rjmp	.-78     	; 0x6a54 <vfprintf+0x13e>
    6aa2:	b7 01       	movw	r22, r14
    6aa4:	80 e2       	ldi	r24, 0x20	; 32
    6aa6:	90 e0       	ldi	r25, 0x00	; 0
    6aa8:	0e 94 90 36 	call	0x6d20	; 0x6d20 <fputc>
    6aac:	4a 94       	dec	r4
    6aae:	4a 14       	cp	r4, r10
    6ab0:	1b 04       	cpc	r1, r11
    6ab2:	09 f0       	breq	.+2      	; 0x6ab6 <vfprintf+0x1a0>
    6ab4:	b0 f7       	brcc	.-20     	; 0x6aa2 <vfprintf+0x18c>
    6ab6:	d2 cf       	rjmp	.-92     	; 0x6a5c <vfprintf+0x146>
    6ab8:	f6 01       	movw	r30, r12
    6aba:	57 fc       	sbrc	r5, 7
    6abc:	85 91       	lpm	r24, Z+
    6abe:	57 fe       	sbrs	r5, 7
    6ac0:	81 91       	ld	r24, Z+
    6ac2:	6f 01       	movw	r12, r30
    6ac4:	b7 01       	movw	r22, r14
    6ac6:	90 e0       	ldi	r25, 0x00	; 0
    6ac8:	0e 94 90 36 	call	0x6d20	; 0x6d20 <fputc>
    6acc:	31 10       	cpse	r3, r1
    6ace:	3a 94       	dec	r3
    6ad0:	b1 e0       	ldi	r27, 0x01	; 1
    6ad2:	ab 1a       	sub	r10, r27
    6ad4:	b1 08       	sbc	r11, r1
    6ad6:	c3 cf       	rjmp	.-122    	; 0x6a5e <vfprintf+0x148>
    6ad8:	84 36       	cpi	r24, 0x64	; 100
    6ada:	19 f0       	breq	.+6      	; 0x6ae2 <vfprintf+0x1cc>
    6adc:	89 36       	cpi	r24, 0x69	; 105
    6ade:	09 f0       	breq	.+2      	; 0x6ae2 <vfprintf+0x1cc>
    6ae0:	71 c0       	rjmp	.+226    	; 0x6bc4 <vfprintf+0x2ae>
    6ae2:	f8 01       	movw	r30, r16
    6ae4:	57 fe       	sbrs	r5, 7
    6ae6:	67 c0       	rjmp	.+206    	; 0x6bb6 <vfprintf+0x2a0>
    6ae8:	61 91       	ld	r22, Z+
    6aea:	71 91       	ld	r23, Z+
    6aec:	81 91       	ld	r24, Z+
    6aee:	91 91       	ld	r25, Z+
    6af0:	8f 01       	movw	r16, r30
    6af2:	e5 2d       	mov	r30, r5
    6af4:	ef 76       	andi	r30, 0x6F	; 111
    6af6:	de 2e       	mov	r13, r30
    6af8:	97 ff       	sbrs	r25, 7
    6afa:	09 c0       	rjmp	.+18     	; 0x6b0e <vfprintf+0x1f8>
    6afc:	90 95       	com	r25
    6afe:	80 95       	com	r24
    6b00:	70 95       	com	r23
    6b02:	61 95       	neg	r22
    6b04:	7f 4f       	sbci	r23, 0xFF	; 255
    6b06:	8f 4f       	sbci	r24, 0xFF	; 255
    6b08:	9f 4f       	sbci	r25, 0xFF	; 255
    6b0a:	68 94       	set
    6b0c:	d7 f8       	bld	r13, 7
    6b0e:	2a e0       	ldi	r18, 0x0A	; 10
    6b10:	30 e0       	ldi	r19, 0x00	; 0
    6b12:	a4 01       	movw	r20, r8
    6b14:	0e 94 c0 36 	call	0x6d80	; 0x6d80 <__ultoa_invert>
    6b18:	c8 2e       	mov	r12, r24
    6b1a:	c8 18       	sub	r12, r8
    6b1c:	ac 2c       	mov	r10, r12
    6b1e:	5d 2c       	mov	r5, r13
    6b20:	d6 fe       	sbrs	r13, 6
    6b22:	0c c0       	rjmp	.+24     	; 0x6b3c <vfprintf+0x226>
    6b24:	e8 94       	clt
    6b26:	50 f8       	bld	r5, 0
    6b28:	cb 14       	cp	r12, r11
    6b2a:	40 f4       	brcc	.+16     	; 0x6b3c <vfprintf+0x226>
    6b2c:	d4 fe       	sbrs	r13, 4
    6b2e:	05 c0       	rjmp	.+10     	; 0x6b3a <vfprintf+0x224>
    6b30:	d2 fc       	sbrc	r13, 2
    6b32:	03 c0       	rjmp	.+6      	; 0x6b3a <vfprintf+0x224>
    6b34:	5d 2d       	mov	r21, r13
    6b36:	5e 7e       	andi	r21, 0xEE	; 238
    6b38:	55 2e       	mov	r5, r21
    6b3a:	ab 2c       	mov	r10, r11
    6b3c:	54 fe       	sbrs	r5, 4
    6b3e:	93 c0       	rjmp	.+294    	; 0x6c66 <vfprintf+0x350>
    6b40:	fe 01       	movw	r30, r28
    6b42:	ec 0d       	add	r30, r12
    6b44:	f1 1d       	adc	r31, r1
    6b46:	80 81       	ld	r24, Z
    6b48:	80 33       	cpi	r24, 0x30	; 48
    6b4a:	09 f0       	breq	.+2      	; 0x6b4e <vfprintf+0x238>
    6b4c:	85 c0       	rjmp	.+266    	; 0x6c58 <vfprintf+0x342>
    6b4e:	65 2d       	mov	r22, r5
    6b50:	69 7e       	andi	r22, 0xE9	; 233
    6b52:	56 2e       	mov	r5, r22
    6b54:	75 2d       	mov	r23, r5
    6b56:	78 70       	andi	r23, 0x08	; 8
    6b58:	37 2e       	mov	r3, r23
    6b5a:	53 fc       	sbrc	r5, 3
    6b5c:	93 c0       	rjmp	.+294    	; 0x6c84 <vfprintf+0x36e>
    6b5e:	50 fe       	sbrs	r5, 0
    6b60:	8d c0       	rjmp	.+282    	; 0x6c7c <vfprintf+0x366>
    6b62:	bc 2c       	mov	r11, r12
    6b64:	a4 14       	cp	r10, r4
    6b66:	10 f4       	brcc	.+4      	; 0x6b6c <vfprintf+0x256>
    6b68:	b4 0c       	add	r11, r4
    6b6a:	ba 18       	sub	r11, r10
    6b6c:	54 fe       	sbrs	r5, 4
    6b6e:	90 c0       	rjmp	.+288    	; 0x6c90 <vfprintf+0x37a>
    6b70:	b7 01       	movw	r22, r14
    6b72:	80 e3       	ldi	r24, 0x30	; 48
    6b74:	90 e0       	ldi	r25, 0x00	; 0
    6b76:	0e 94 90 36 	call	0x6d20	; 0x6d20 <fputc>
    6b7a:	52 fe       	sbrs	r5, 2
    6b7c:	07 c0       	rjmp	.+14     	; 0x6b8c <vfprintf+0x276>
    6b7e:	88 e7       	ldi	r24, 0x78	; 120
    6b80:	51 fc       	sbrc	r5, 1
    6b82:	88 e5       	ldi	r24, 0x58	; 88
    6b84:	90 e0       	ldi	r25, 0x00	; 0
    6b86:	b7 01       	movw	r22, r14
    6b88:	0e 94 90 36 	call	0x6d20	; 0x6d20 <fputc>
    6b8c:	cb 14       	cp	r12, r11
    6b8e:	08 f4       	brcc	.+2      	; 0x6b92 <vfprintf+0x27c>
    6b90:	8b c0       	rjmp	.+278    	; 0x6ca8 <vfprintf+0x392>
    6b92:	ca 94       	dec	r12
    6b94:	d1 2c       	mov	r13, r1
    6b96:	8f ef       	ldi	r24, 0xFF	; 255
    6b98:	c8 1a       	sub	r12, r24
    6b9a:	d8 0a       	sbc	r13, r24
    6b9c:	c8 0c       	add	r12, r8
    6b9e:	d9 1c       	adc	r13, r9
    6ba0:	d6 01       	movw	r26, r12
    6ba2:	8e 91       	ld	r24, -X
    6ba4:	6d 01       	movw	r12, r26
    6ba6:	b7 01       	movw	r22, r14
    6ba8:	90 e0       	ldi	r25, 0x00	; 0
    6baa:	0e 94 90 36 	call	0x6d20	; 0x6d20 <fputc>
    6bae:	8c 14       	cp	r8, r12
    6bb0:	9d 04       	cpc	r9, r13
    6bb2:	b1 f7       	brne	.-20     	; 0x6ba0 <vfprintf+0x28a>
    6bb4:	57 cf       	rjmp	.-338    	; 0x6a64 <vfprintf+0x14e>
    6bb6:	61 91       	ld	r22, Z+
    6bb8:	71 91       	ld	r23, Z+
    6bba:	07 2e       	mov	r0, r23
    6bbc:	00 0c       	add	r0, r0
    6bbe:	88 0b       	sbc	r24, r24
    6bc0:	99 0b       	sbc	r25, r25
    6bc2:	96 cf       	rjmp	.-212    	; 0x6af0 <vfprintf+0x1da>
    6bc4:	d5 2c       	mov	r13, r5
    6bc6:	e8 94       	clt
    6bc8:	d4 f8       	bld	r13, 4
    6bca:	2a e0       	ldi	r18, 0x0A	; 10
    6bcc:	85 37       	cpi	r24, 0x75	; 117
    6bce:	29 f1       	breq	.+74     	; 0x6c1a <vfprintf+0x304>
    6bd0:	f5 2d       	mov	r31, r5
    6bd2:	f9 7f       	andi	r31, 0xF9	; 249
    6bd4:	df 2e       	mov	r13, r31
    6bd6:	80 37       	cpi	r24, 0x70	; 112
    6bd8:	a1 f0       	breq	.+40     	; 0x6c02 <vfprintf+0x2ec>
    6bda:	58 f4       	brcc	.+22     	; 0x6bf2 <vfprintf+0x2dc>
    6bdc:	88 35       	cpi	r24, 0x58	; 88
    6bde:	a1 f0       	breq	.+40     	; 0x6c08 <vfprintf+0x2f2>
    6be0:	8f 36       	cpi	r24, 0x6F	; 111
    6be2:	d1 f0       	breq	.+52     	; 0x6c18 <vfprintf+0x302>
    6be4:	f7 01       	movw	r30, r14
    6be6:	86 81       	ldd	r24, Z+6	; 0x06
    6be8:	97 81       	ldd	r25, Z+7	; 0x07
    6bea:	2f 96       	adiw	r28, 0x0f	; 15
    6bec:	e2 e1       	ldi	r30, 0x12	; 18
    6bee:	0c 94 ac 2f 	jmp	0x5f58	; 0x5f58 <__epilogue_restores__>
    6bf2:	88 37       	cpi	r24, 0x78	; 120
    6bf4:	b9 f7       	brne	.-18     	; 0x6be4 <vfprintf+0x2ce>
    6bf6:	d4 fe       	sbrs	r13, 4
    6bf8:	02 c0       	rjmp	.+4      	; 0x6bfe <vfprintf+0x2e8>
    6bfa:	68 94       	set
    6bfc:	d2 f8       	bld	r13, 2
    6bfe:	20 e1       	ldi	r18, 0x10	; 16
    6c00:	0c c0       	rjmp	.+24     	; 0x6c1a <vfprintf+0x304>
    6c02:	68 94       	set
    6c04:	d4 f8       	bld	r13, 4
    6c06:	f7 cf       	rjmp	.-18     	; 0x6bf6 <vfprintf+0x2e0>
    6c08:	54 fe       	sbrs	r5, 4
    6c0a:	03 c0       	rjmp	.+6      	; 0x6c12 <vfprintf+0x2fc>
    6c0c:	2f 2f       	mov	r18, r31
    6c0e:	26 60       	ori	r18, 0x06	; 6
    6c10:	d2 2e       	mov	r13, r18
    6c12:	20 e1       	ldi	r18, 0x10	; 16
    6c14:	32 e0       	ldi	r19, 0x02	; 2
    6c16:	02 c0       	rjmp	.+4      	; 0x6c1c <vfprintf+0x306>
    6c18:	28 e0       	ldi	r18, 0x08	; 8
    6c1a:	30 e0       	ldi	r19, 0x00	; 0
    6c1c:	f8 01       	movw	r30, r16
    6c1e:	d7 fe       	sbrs	r13, 7
    6c20:	15 c0       	rjmp	.+42     	; 0x6c4c <vfprintf+0x336>
    6c22:	41 91       	ld	r20, Z+
    6c24:	51 91       	ld	r21, Z+
    6c26:	61 91       	ld	r22, Z+
    6c28:	71 91       	ld	r23, Z+
    6c2a:	4c 87       	std	Y+12, r20	; 0x0c
    6c2c:	5d 87       	std	Y+13, r21	; 0x0d
    6c2e:	6e 87       	std	Y+14, r22	; 0x0e
    6c30:	7f 87       	std	Y+15, r23	; 0x0f
    6c32:	8f 01       	movw	r16, r30
    6c34:	a4 01       	movw	r20, r8
    6c36:	6c 85       	ldd	r22, Y+12	; 0x0c
    6c38:	7d 85       	ldd	r23, Y+13	; 0x0d
    6c3a:	8e 85       	ldd	r24, Y+14	; 0x0e
    6c3c:	9f 85       	ldd	r25, Y+15	; 0x0f
    6c3e:	0e 94 c0 36 	call	0x6d80	; 0x6d80 <__ultoa_invert>
    6c42:	c8 2e       	mov	r12, r24
    6c44:	c8 18       	sub	r12, r8
    6c46:	e8 94       	clt
    6c48:	d7 f8       	bld	r13, 7
    6c4a:	68 cf       	rjmp	.-304    	; 0x6b1c <vfprintf+0x206>
    6c4c:	81 91       	ld	r24, Z+
    6c4e:	91 91       	ld	r25, Z+
    6c50:	ac 01       	movw	r20, r24
    6c52:	70 e0       	ldi	r23, 0x00	; 0
    6c54:	60 e0       	ldi	r22, 0x00	; 0
    6c56:	e9 cf       	rjmp	.-46     	; 0x6c2a <vfprintf+0x314>
    6c58:	52 fc       	sbrc	r5, 2
    6c5a:	02 c0       	rjmp	.+4      	; 0x6c60 <vfprintf+0x34a>
    6c5c:	a3 94       	inc	r10
    6c5e:	7a cf       	rjmp	.-268    	; 0x6b54 <vfprintf+0x23e>
    6c60:	a3 94       	inc	r10
    6c62:	a3 94       	inc	r10
    6c64:	77 cf       	rjmp	.-274    	; 0x6b54 <vfprintf+0x23e>
    6c66:	85 2d       	mov	r24, r5
    6c68:	86 78       	andi	r24, 0x86	; 134
    6c6a:	09 f4       	brne	.+2      	; 0x6c6e <vfprintf+0x358>
    6c6c:	73 cf       	rjmp	.-282    	; 0x6b54 <vfprintf+0x23e>
    6c6e:	f6 cf       	rjmp	.-20     	; 0x6c5c <vfprintf+0x346>
    6c70:	b7 01       	movw	r22, r14
    6c72:	80 e2       	ldi	r24, 0x20	; 32
    6c74:	90 e0       	ldi	r25, 0x00	; 0
    6c76:	0e 94 90 36 	call	0x6d20	; 0x6d20 <fputc>
    6c7a:	a3 94       	inc	r10
    6c7c:	a4 14       	cp	r10, r4
    6c7e:	c0 f3       	brcs	.-16     	; 0x6c70 <vfprintf+0x35a>
    6c80:	31 2c       	mov	r3, r1
    6c82:	74 cf       	rjmp	.-280    	; 0x6b6c <vfprintf+0x256>
    6c84:	34 2c       	mov	r3, r4
    6c86:	3a 18       	sub	r3, r10
    6c88:	a4 14       	cp	r10, r4
    6c8a:	08 f4       	brcc	.+2      	; 0x6c8e <vfprintf+0x378>
    6c8c:	6f cf       	rjmp	.-290    	; 0x6b6c <vfprintf+0x256>
    6c8e:	f8 cf       	rjmp	.-16     	; 0x6c80 <vfprintf+0x36a>
    6c90:	85 2d       	mov	r24, r5
    6c92:	86 78       	andi	r24, 0x86	; 134
    6c94:	09 f4       	brne	.+2      	; 0x6c98 <vfprintf+0x382>
    6c96:	7a cf       	rjmp	.-268    	; 0x6b8c <vfprintf+0x276>
    6c98:	8b e2       	ldi	r24, 0x2B	; 43
    6c9a:	51 fe       	sbrs	r5, 1
    6c9c:	80 e2       	ldi	r24, 0x20	; 32
    6c9e:	57 fc       	sbrc	r5, 7
    6ca0:	8d e2       	ldi	r24, 0x2D	; 45
    6ca2:	b7 01       	movw	r22, r14
    6ca4:	90 e0       	ldi	r25, 0x00	; 0
    6ca6:	70 cf       	rjmp	.-288    	; 0x6b88 <vfprintf+0x272>
    6ca8:	b7 01       	movw	r22, r14
    6caa:	80 e3       	ldi	r24, 0x30	; 48
    6cac:	90 e0       	ldi	r25, 0x00	; 0
    6cae:	0e 94 90 36 	call	0x6d20	; 0x6d20 <fputc>
    6cb2:	ba 94       	dec	r11
    6cb4:	6b cf       	rjmp	.-298    	; 0x6b8c <vfprintf+0x276>
    6cb6:	8f ef       	ldi	r24, 0xFF	; 255
    6cb8:	9f ef       	ldi	r25, 0xFF	; 255
    6cba:	97 cf       	rjmp	.-210    	; 0x6bea <vfprintf+0x2d4>

00006cbc <__ctype_isfalse>:
    6cbc:	99 27       	eor	r25, r25
    6cbe:	88 27       	eor	r24, r24

00006cc0 <__ctype_istrue>:
    6cc0:	08 95       	ret

00006cc2 <strnlen_P>:
    6cc2:	fc 01       	movw	r30, r24
    6cc4:	05 90       	lpm	r0, Z+
    6cc6:	61 50       	subi	r22, 0x01	; 1
    6cc8:	70 40       	sbci	r23, 0x00	; 0
    6cca:	01 10       	cpse	r0, r1
    6ccc:	d8 f7       	brcc	.-10     	; 0x6cc4 <strnlen_P+0x2>
    6cce:	80 95       	com	r24
    6cd0:	90 95       	com	r25
    6cd2:	8e 0f       	add	r24, r30
    6cd4:	9f 1f       	adc	r25, r31
    6cd6:	08 95       	ret

00006cd8 <memcpy>:
    6cd8:	fb 01       	movw	r30, r22
    6cda:	dc 01       	movw	r26, r24
    6cdc:	02 c0       	rjmp	.+4      	; 0x6ce2 <memcpy+0xa>
    6cde:	01 90       	ld	r0, Z+
    6ce0:	0d 92       	st	X+, r0
    6ce2:	41 50       	subi	r20, 0x01	; 1
    6ce4:	50 40       	sbci	r21, 0x00	; 0
    6ce6:	d8 f7       	brcc	.-10     	; 0x6cde <memcpy+0x6>
    6ce8:	08 95       	ret

00006cea <strnlen>:
    6cea:	fc 01       	movw	r30, r24
    6cec:	61 50       	subi	r22, 0x01	; 1
    6cee:	70 40       	sbci	r23, 0x00	; 0
    6cf0:	01 90       	ld	r0, Z+
    6cf2:	01 10       	cpse	r0, r1
    6cf4:	d8 f7       	brcc	.-10     	; 0x6cec <strnlen+0x2>
    6cf6:	80 95       	com	r24
    6cf8:	90 95       	com	r25
    6cfa:	8e 0f       	add	r24, r30
    6cfc:	9f 1f       	adc	r25, r31
    6cfe:	08 95       	ret

00006d00 <strrev>:
    6d00:	dc 01       	movw	r26, r24
    6d02:	fc 01       	movw	r30, r24
    6d04:	67 2f       	mov	r22, r23
    6d06:	71 91       	ld	r23, Z+
    6d08:	77 23       	and	r23, r23
    6d0a:	e1 f7       	brne	.-8      	; 0x6d04 <strrev+0x4>
    6d0c:	32 97       	sbiw	r30, 0x02	; 2
    6d0e:	04 c0       	rjmp	.+8      	; 0x6d18 <strrev+0x18>
    6d10:	7c 91       	ld	r23, X
    6d12:	6d 93       	st	X+, r22
    6d14:	70 83       	st	Z, r23
    6d16:	62 91       	ld	r22, -Z
    6d18:	ae 17       	cp	r26, r30
    6d1a:	bf 07       	cpc	r27, r31
    6d1c:	c8 f3       	brcs	.-14     	; 0x6d10 <strrev+0x10>
    6d1e:	08 95       	ret

00006d20 <fputc>:
    6d20:	0f 93       	push	r16
    6d22:	1f 93       	push	r17
    6d24:	cf 93       	push	r28
    6d26:	df 93       	push	r29
    6d28:	18 2f       	mov	r17, r24
    6d2a:	09 2f       	mov	r16, r25
    6d2c:	eb 01       	movw	r28, r22
    6d2e:	8b 81       	ldd	r24, Y+3	; 0x03
    6d30:	81 fd       	sbrc	r24, 1
    6d32:	09 c0       	rjmp	.+18     	; 0x6d46 <fputc+0x26>
    6d34:	1f ef       	ldi	r17, 0xFF	; 255
    6d36:	0f ef       	ldi	r16, 0xFF	; 255
    6d38:	81 2f       	mov	r24, r17
    6d3a:	90 2f       	mov	r25, r16
    6d3c:	df 91       	pop	r29
    6d3e:	cf 91       	pop	r28
    6d40:	1f 91       	pop	r17
    6d42:	0f 91       	pop	r16
    6d44:	08 95       	ret
    6d46:	82 ff       	sbrs	r24, 2
    6d48:	14 c0       	rjmp	.+40     	; 0x6d72 <fputc+0x52>
    6d4a:	2e 81       	ldd	r18, Y+6	; 0x06
    6d4c:	3f 81       	ldd	r19, Y+7	; 0x07
    6d4e:	8c 81       	ldd	r24, Y+4	; 0x04
    6d50:	9d 81       	ldd	r25, Y+5	; 0x05
    6d52:	28 17       	cp	r18, r24
    6d54:	39 07       	cpc	r19, r25
    6d56:	3c f4       	brge	.+14     	; 0x6d66 <fputc+0x46>
    6d58:	e8 81       	ld	r30, Y
    6d5a:	f9 81       	ldd	r31, Y+1	; 0x01
    6d5c:	cf 01       	movw	r24, r30
    6d5e:	01 96       	adiw	r24, 0x01	; 1
    6d60:	99 83       	std	Y+1, r25	; 0x01
    6d62:	88 83       	st	Y, r24
    6d64:	10 83       	st	Z, r17
    6d66:	8e 81       	ldd	r24, Y+6	; 0x06
    6d68:	9f 81       	ldd	r25, Y+7	; 0x07
    6d6a:	01 96       	adiw	r24, 0x01	; 1
    6d6c:	9f 83       	std	Y+7, r25	; 0x07
    6d6e:	8e 83       	std	Y+6, r24	; 0x06
    6d70:	e3 cf       	rjmp	.-58     	; 0x6d38 <fputc+0x18>
    6d72:	e8 85       	ldd	r30, Y+8	; 0x08
    6d74:	f9 85       	ldd	r31, Y+9	; 0x09
    6d76:	81 2f       	mov	r24, r17
    6d78:	09 95       	icall
    6d7a:	89 2b       	or	r24, r25
    6d7c:	a1 f3       	breq	.-24     	; 0x6d66 <fputc+0x46>
    6d7e:	da cf       	rjmp	.-76     	; 0x6d34 <fputc+0x14>

00006d80 <__ultoa_invert>:
    6d80:	fa 01       	movw	r30, r20
    6d82:	aa 27       	eor	r26, r26
    6d84:	28 30       	cpi	r18, 0x08	; 8
    6d86:	51 f1       	breq	.+84     	; 0x6ddc <__ultoa_invert+0x5c>
    6d88:	20 31       	cpi	r18, 0x10	; 16
    6d8a:	81 f1       	breq	.+96     	; 0x6dec <__ultoa_invert+0x6c>
    6d8c:	e8 94       	clt
    6d8e:	6f 93       	push	r22
    6d90:	6e 7f       	andi	r22, 0xFE	; 254
    6d92:	6e 5f       	subi	r22, 0xFE	; 254
    6d94:	7f 4f       	sbci	r23, 0xFF	; 255
    6d96:	8f 4f       	sbci	r24, 0xFF	; 255
    6d98:	9f 4f       	sbci	r25, 0xFF	; 255
    6d9a:	af 4f       	sbci	r26, 0xFF	; 255
    6d9c:	b1 e0       	ldi	r27, 0x01	; 1
    6d9e:	3e d0       	rcall	.+124    	; 0x6e1c <__ultoa_invert+0x9c>
    6da0:	b4 e0       	ldi	r27, 0x04	; 4
    6da2:	3c d0       	rcall	.+120    	; 0x6e1c <__ultoa_invert+0x9c>
    6da4:	67 0f       	add	r22, r23
    6da6:	78 1f       	adc	r23, r24
    6da8:	89 1f       	adc	r24, r25
    6daa:	9a 1f       	adc	r25, r26
    6dac:	a1 1d       	adc	r26, r1
    6dae:	68 0f       	add	r22, r24
    6db0:	79 1f       	adc	r23, r25
    6db2:	8a 1f       	adc	r24, r26
    6db4:	91 1d       	adc	r25, r1
    6db6:	a1 1d       	adc	r26, r1
    6db8:	6a 0f       	add	r22, r26
    6dba:	71 1d       	adc	r23, r1
    6dbc:	81 1d       	adc	r24, r1
    6dbe:	91 1d       	adc	r25, r1
    6dc0:	a1 1d       	adc	r26, r1
    6dc2:	20 d0       	rcall	.+64     	; 0x6e04 <__ultoa_invert+0x84>
    6dc4:	09 f4       	brne	.+2      	; 0x6dc8 <__ultoa_invert+0x48>
    6dc6:	68 94       	set
    6dc8:	3f 91       	pop	r19
    6dca:	2a e0       	ldi	r18, 0x0A	; 10
    6dcc:	26 9f       	mul	r18, r22
    6dce:	11 24       	eor	r1, r1
    6dd0:	30 19       	sub	r19, r0
    6dd2:	30 5d       	subi	r19, 0xD0	; 208
    6dd4:	31 93       	st	Z+, r19
    6dd6:	de f6       	brtc	.-74     	; 0x6d8e <__ultoa_invert+0xe>
    6dd8:	cf 01       	movw	r24, r30
    6dda:	08 95       	ret
    6ddc:	46 2f       	mov	r20, r22
    6dde:	47 70       	andi	r20, 0x07	; 7
    6de0:	40 5d       	subi	r20, 0xD0	; 208
    6de2:	41 93       	st	Z+, r20
    6de4:	b3 e0       	ldi	r27, 0x03	; 3
    6de6:	0f d0       	rcall	.+30     	; 0x6e06 <__ultoa_invert+0x86>
    6de8:	c9 f7       	brne	.-14     	; 0x6ddc <__ultoa_invert+0x5c>
    6dea:	f6 cf       	rjmp	.-20     	; 0x6dd8 <__ultoa_invert+0x58>
    6dec:	46 2f       	mov	r20, r22
    6dee:	4f 70       	andi	r20, 0x0F	; 15
    6df0:	40 5d       	subi	r20, 0xD0	; 208
    6df2:	4a 33       	cpi	r20, 0x3A	; 58
    6df4:	18 f0       	brcs	.+6      	; 0x6dfc <__ultoa_invert+0x7c>
    6df6:	49 5d       	subi	r20, 0xD9	; 217
    6df8:	31 fd       	sbrc	r19, 1
    6dfa:	40 52       	subi	r20, 0x20	; 32
    6dfc:	41 93       	st	Z+, r20
    6dfe:	02 d0       	rcall	.+4      	; 0x6e04 <__ultoa_invert+0x84>
    6e00:	a9 f7       	brne	.-22     	; 0x6dec <__ultoa_invert+0x6c>
    6e02:	ea cf       	rjmp	.-44     	; 0x6dd8 <__ultoa_invert+0x58>
    6e04:	b4 e0       	ldi	r27, 0x04	; 4
    6e06:	a6 95       	lsr	r26
    6e08:	97 95       	ror	r25
    6e0a:	87 95       	ror	r24
    6e0c:	77 95       	ror	r23
    6e0e:	67 95       	ror	r22
    6e10:	ba 95       	dec	r27
    6e12:	c9 f7       	brne	.-14     	; 0x6e06 <__ultoa_invert+0x86>
    6e14:	00 97       	sbiw	r24, 0x00	; 0
    6e16:	61 05       	cpc	r22, r1
    6e18:	71 05       	cpc	r23, r1
    6e1a:	08 95       	ret
    6e1c:	9b 01       	movw	r18, r22
    6e1e:	ac 01       	movw	r20, r24
    6e20:	0a 2e       	mov	r0, r26
    6e22:	06 94       	lsr	r0
    6e24:	57 95       	ror	r21
    6e26:	47 95       	ror	r20
    6e28:	37 95       	ror	r19
    6e2a:	27 95       	ror	r18
    6e2c:	ba 95       	dec	r27
    6e2e:	c9 f7       	brne	.-14     	; 0x6e22 <__ultoa_invert+0xa2>
    6e30:	62 0f       	add	r22, r18
    6e32:	73 1f       	adc	r23, r19
    6e34:	84 1f       	adc	r24, r20
    6e36:	95 1f       	adc	r25, r21
    6e38:	a0 1d       	adc	r26, r0
    6e3a:	08 95       	ret

00006e3c <eeprom_read_block>:
    6e3c:	dc 01       	movw	r26, r24
    6e3e:	cb 01       	movw	r24, r22

00006e40 <eeprom_read_blraw>:
    6e40:	fc 01       	movw	r30, r24
    6e42:	f9 99       	sbic	0x1f, 1	; 31
    6e44:	fe cf       	rjmp	.-4      	; 0x6e42 <eeprom_read_blraw+0x2>
    6e46:	06 c0       	rjmp	.+12     	; 0x6e54 <eeprom_read_blraw+0x14>
    6e48:	f2 bd       	out	0x22, r31	; 34
    6e4a:	e1 bd       	out	0x21, r30	; 33
    6e4c:	f8 9a       	sbi	0x1f, 0	; 31
    6e4e:	31 96       	adiw	r30, 0x01	; 1
    6e50:	00 b4       	in	r0, 0x20	; 32
    6e52:	0d 92       	st	X+, r0
    6e54:	41 50       	subi	r20, 0x01	; 1
    6e56:	50 40       	sbci	r21, 0x00	; 0
    6e58:	b8 f7       	brcc	.-18     	; 0x6e48 <eeprom_read_blraw+0x8>
    6e5a:	08 95       	ret

00006e5c <eeprom_update_block>:
    6e5c:	dc 01       	movw	r26, r24
    6e5e:	a4 0f       	add	r26, r20
    6e60:	b5 1f       	adc	r27, r21
    6e62:	41 50       	subi	r20, 0x01	; 1
    6e64:	50 40       	sbci	r21, 0x00	; 0
    6e66:	48 f0       	brcs	.+18     	; 0x6e7a <eeprom_update_block+0x1e>
    6e68:	cb 01       	movw	r24, r22
    6e6a:	84 0f       	add	r24, r20
    6e6c:	95 1f       	adc	r25, r21
    6e6e:	2e 91       	ld	r18, -X
    6e70:	0e 94 3f 37 	call	0x6e7e	; 0x6e7e <eeprom_update_r18>
    6e74:	41 50       	subi	r20, 0x01	; 1
    6e76:	50 40       	sbci	r21, 0x00	; 0
    6e78:	d0 f7       	brcc	.-12     	; 0x6e6e <eeprom_update_block+0x12>
    6e7a:	08 95       	ret

00006e7c <eeprom_update_byte>:
    6e7c:	26 2f       	mov	r18, r22

00006e7e <eeprom_update_r18>:
    6e7e:	f9 99       	sbic	0x1f, 1	; 31
    6e80:	fe cf       	rjmp	.-4      	; 0x6e7e <eeprom_update_r18>
    6e82:	92 bd       	out	0x22, r25	; 34
    6e84:	81 bd       	out	0x21, r24	; 33
    6e86:	f8 9a       	sbi	0x1f, 0	; 31
    6e88:	01 97       	sbiw	r24, 0x01	; 1
    6e8a:	00 b4       	in	r0, 0x20	; 32
    6e8c:	02 16       	cp	r0, r18
    6e8e:	39 f0       	breq	.+14     	; 0x6e9e <eeprom_update_r18+0x20>
    6e90:	1f ba       	out	0x1f, r1	; 31
    6e92:	20 bd       	out	0x20, r18	; 32
    6e94:	0f b6       	in	r0, 0x3f	; 63
    6e96:	f8 94       	cli
    6e98:	fa 9a       	sbi	0x1f, 2	; 31
    6e9a:	f9 9a       	sbi	0x1f, 1	; 31
    6e9c:	0f be       	out	0x3f, r0	; 63
    6e9e:	08 95       	ret

00006ea0 <eeprom_write_block>:
    6ea0:	dc 01       	movw	r26, r24
    6ea2:	cb 01       	movw	r24, r22
    6ea4:	03 c0       	rjmp	.+6      	; 0x6eac <eeprom_write_block+0xc>
    6ea6:	2d 91       	ld	r18, X+
    6ea8:	0e 94 5b 37 	call	0x6eb6	; 0x6eb6 <eeprom_write_r18>
    6eac:	41 50       	subi	r20, 0x01	; 1
    6eae:	50 40       	sbci	r21, 0x00	; 0
    6eb0:	d0 f7       	brcc	.-12     	; 0x6ea6 <eeprom_write_block+0x6>
    6eb2:	08 95       	ret

00006eb4 <eeprom_write_byte>:
    6eb4:	26 2f       	mov	r18, r22

00006eb6 <eeprom_write_r18>:
    6eb6:	f9 99       	sbic	0x1f, 1	; 31
    6eb8:	fe cf       	rjmp	.-4      	; 0x6eb6 <eeprom_write_r18>
    6eba:	1f ba       	out	0x1f, r1	; 31
    6ebc:	92 bd       	out	0x22, r25	; 34
    6ebe:	81 bd       	out	0x21, r24	; 33
    6ec0:	20 bd       	out	0x20, r18	; 32
    6ec2:	0f b6       	in	r0, 0x3f	; 63
    6ec4:	f8 94       	cli
    6ec6:	fa 9a       	sbi	0x1f, 2	; 31
    6ec8:	f9 9a       	sbi	0x1f, 1	; 31
    6eca:	0f be       	out	0x3f, r0	; 63
    6ecc:	01 96       	adiw	r24, 0x01	; 1
    6ece:	08 95       	ret

00006ed0 <__mulsi3>:
    6ed0:	db 01       	movw	r26, r22
    6ed2:	8f 93       	push	r24
    6ed4:	9f 93       	push	r25
    6ed6:	0e 94 78 37 	call	0x6ef0	; 0x6ef0 <__muluhisi3>
    6eda:	bf 91       	pop	r27
    6edc:	af 91       	pop	r26
    6ede:	a2 9f       	mul	r26, r18
    6ee0:	80 0d       	add	r24, r0
    6ee2:	91 1d       	adc	r25, r1
    6ee4:	a3 9f       	mul	r26, r19
    6ee6:	90 0d       	add	r25, r0
    6ee8:	b2 9f       	mul	r27, r18
    6eea:	90 0d       	add	r25, r0
    6eec:	11 24       	eor	r1, r1
    6eee:	08 95       	ret

00006ef0 <__muluhisi3>:
    6ef0:	0e 94 7a 2f 	call	0x5ef4	; 0x5ef4 <__umulhisi3>
    6ef4:	a5 9f       	mul	r26, r21
    6ef6:	90 0d       	add	r25, r0
    6ef8:	b4 9f       	mul	r27, r20
    6efa:	90 0d       	add	r25, r0
    6efc:	a4 9f       	mul	r26, r20
    6efe:	80 0d       	add	r24, r0
    6f00:	91 1d       	adc	r25, r1
    6f02:	11 24       	eor	r1, r1
    6f04:	08 95       	ret

00006f06 <_exit>:
    6f06:	f8 94       	cli

00006f08 <__stop_program>:
    6f08:	ff cf       	rjmp	.-2      	; 0x6f08 <__stop_program>
    6f0a:	7b 05       	cpc	r23, r11
    6f0c:	92 05       	cpc	r25, r2
    6f0e:	98 05       	cpc	r25, r8
    6f10:	9e 05       	cpc	r25, r14
    6f12:	a4 05       	cpc	r26, r4
    6f14:	aa 05       	cpc	r26, r10
    6f16:	b0 05       	cpc	r27, r0
    6f18:	b6 05       	cpc	r27, r6
    6f1a:	bc 05       	cpc	r27, r12
    6f1c:	65 07       	cpc	r22, r21
    6f1e:	6a 07       	cpc	r22, r26
    6f20:	59 07       	cpc	r21, r25
    6f22:	6f 07       	cpc	r22, r31
    6f24:	79 07       	cpc	r23, r25
    6f26:	7e 07       	cpc	r23, r30
    6f28:	74 07       	cpc	r23, r20
    6f2a:	59 12       	cpse	r5, r25
    6f2c:	5d 12       	cpse	r5, r29
    6f2e:	70 12       	cpse	r7, r16
    6f30:	83 12       	cpse	r8, r19
    6f32:	9c 12       	cpse	r9, r28
    6f34:	aa 12       	cpse	r10, r26
    6f36:	b8 12       	cpse	r11, r24
    6f38:	1c 14       	cp	r1, r12
    6f3a:	10 14       	cp	r1, r0
    6f3c:	1e 14       	cp	r1, r14
    6f3e:	12 14       	cp	r1, r2
    6f40:	14 14       	cp	r1, r4
    6f42:	16 14       	cp	r1, r6
    6f44:	1a 14       	cp	r1, r10
    6f46:	18 14       	cp	r1, r8
